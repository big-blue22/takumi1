// app.js - 螳悟・菫ｮ蠕ｩ迚・class App {
    constructor() {
        this.currentPage = 'dashboard';
        this.currentTheme = localStorage.getItem('theme') || 'dark';
        this.isGuest = false;
        this.currentUser = null;
        
        // 繧ｨ繝ｩ繝ｼ霑ｽ霍｡
        this.apiErrorCount = 0;
        this.lastSuccessfulAPICall = Date.now();
        this.consecutiveErrors = 0;
        
        // 繧ｵ繝ｼ繝薙せ縺ｮ蛻晄悄蛹・        this.initializeServices();
        
        // DOMContentLoaded縺ｧ蛻晄悄蛹・        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.init());
        } else {
            this.init();
        }
    }
    
    initializeServices() {
        // API繧ｵ繝ｼ繝薙せ縺悟ｭ伜惠縺吶ｋ蝣ｴ蜷医・縺ｿ蛻晄悄蛹・        if (typeof AICoachingService !== 'undefined') {
            this.aiService = new AICoachingService();
        }
        
        // 隱崎ｨｼ繧ｵ繝ｼ繝薙せ
        if (typeof AuthService !== 'undefined') {
            this.authService = new AuthService();
        }
        
        // 繧ｲ繝ｼ繝繝槭ロ繝ｼ繧ｸ繝｣繝ｼ
        if (typeof GameManager !== 'undefined') {
            this.gameManager = new GameManager();
        }
        
        // Gemini繧ｵ繝ｼ繝薙せ
        if (typeof GeminiService !== 'undefined') {
            this.geminiService = new GeminiService();
        }
        
        // 繝励Ξ繧､繝､繝ｼ邨ｱ險医・繝阪・繧ｸ繝｣繝ｼ
        if (typeof PlayerStatsManager !== 'undefined') {
            this.playerStatsManager = new PlayerStatsManager();
        }

        // 繧ｳ繝ｼ繝√Φ繧ｰ繝励Λ繝ｳ繧ｵ繝ｼ繝薙せ
        if (typeof CoachingPlanService !== 'undefined') {
            this.coachingPlanService = new CoachingPlanService();
        }

        this.chatMessages = [];
    }
    
    async init() {
        console.log('App initializing...');
        
        // 繝・・繝槭・蛻晄悄蛹・        this.initTheme();
        
        // 縺吶∋縺ｦ縺ｮ繝｢繝ｼ繝繝ｫ繧帝撼陦ｨ遉ｺ縺ｫ縺吶ｋ
        this.hideAllModals();
        
        // 邨ｱ荳API繝槭ロ繝ｼ繧ｸ繝｣繝ｼ縺ｮ蛻晄悄蛹門ｮ御ｺ・ｒ蠕・▽
        await this.waitForUnifiedAPIManager();

        // 1. 譛蜆ｪ蜈医〒蛻晏屓險ｭ螳夲ｼ医せ繧ｭ繝ｫ繝ｬ繝吶Ν縺ｪ縺ｩ・峨′蠢・ｦ√°繝√ぉ繝・け
        if (this.needsInitialSetup()) {
            console.log('蛻晏屓險ｭ螳壹′蠢・ｦ√〒縺吶ょ・譛溯ｨｭ螳夂判髱｢繧定｡ｨ遉ｺ縺励∪縺吶・);
            this.showInitialSetupModal();
            return; // 蛻晄悄險ｭ螳壹′螳御ｺ・☆繧九∪縺ｧ莉悶・蜃ｦ逅・ｒ荳ｭ譁ｭ
        }
        
        // 2. 蛻晏屓險ｭ螳壹′螳御ｺ・＠縺ｦ縺・ｌ縺ｰ縲∵ｬ｡縺ｫAPI險ｭ螳壹ｒ繝√ぉ繝・け
        const apiCheckResult = await this.performBackgroundAPICheck();

        if (apiCheckResult.success) {
            console.log('繝舌ャ繧ｯ繧ｰ繝ｩ繧ｦ繝ｳ繝陰PI謗･邯壽・蜉・);
            this.closeInitialSetupModal(); // 荳崎ｦ√↑繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ

            // 繝｡繧､繝ｳ逕ｻ髱｢縺ｸ驕ｷ遘ｻ
            console.log('繝｡繧､繝ｳ逕ｻ髱｢縺ｸ驕ｷ遘ｻ');
            await this.initializeMainApp();

            // 驕手ｲ闕ｷ迥ｶ諷九・蝣ｴ蜷医・霑ｽ蜉繝｡繝・そ繝ｼ繧ｸ繧定｡ｨ遉ｺ
            if (apiCheckResult.overloaded) {
                this.showToast('笞・・Gemini API縺碁℃雋闕ｷ迥ｶ諷九〒縺吶よ凾髢薙ｒ縺翫＞縺ｦ蜀榊ｺｦ縺願ｩｦ縺励￥縺縺輔＞縲・, 'warning');
            }
        } else {
            console.log('API譛ｪ險ｭ螳壹∪縺溘・謗･邯壼､ｱ謨・);

            // 503繧ｨ繝ｩ繝ｼ縺ｮ蝣ｴ蜷医・迚ｹ蛻･縺ｪ繝｡繝・そ繝ｼ繧ｸ
            if (apiCheckResult.error && (
                apiCheckResult.error.message.includes('503') ||
                apiCheckResult.error.message.includes('驕手ｲ闕ｷ') ||
                apiCheckResult.error.message.includes('overloaded')
            )) {
                this.showToast('笞・・Gemini API縺御ｸ譎ら噪縺ｫ驕手ｲ闕ｷ荳ｭ縺ｧ縺吶・PI繧ｭ繝ｼ縺ｯ菫晏ｭ倥＆繧後※縺・ｋ縺ｮ縺ｧ縲∝ｾ後⊇縺ｩ閾ｪ蜍慕噪縺ｫ蛻ｩ逕ｨ蜿ｯ閭ｽ縺ｫ縺ｪ繧翫∪縺吶・, 'warning');
                // 驕手ｲ闕ｷ縺ｮ蝣ｴ蜷医〒繧ゅい繝励Μ縺ｯ襍ｷ蜍輔☆繧・                await this.initializeMainApp();
            } else {
                // API譛ｪ險ｭ螳壹∪縺溘・謗･邯壼､ｱ謨玲凾縺ｯAPI險ｭ螳夂判髱｢繧定｡ｨ遉ｺ
                this.showInitialAPISetupModal();
                this.setupInitialAPIModalListeners();
            }
        }
        
        console.log('App initialized successfully');
    }
    
    // 繝・・繝樒ｮ｡逅・    initTheme() {
        this.applyTheme(this.currentTheme);
        
        const themeBtn = document.getElementById('theme-toggle-btn');
        if (themeBtn) {
            themeBtn.addEventListener('click', () => {
                this.currentTheme = this.currentTheme === 'dark' ? 'light' : 'dark';
                this.applyTheme(this.currentTheme);
                localStorage.setItem('theme', this.currentTheme);
                
                // 繝・・繝槫､画峩譎ゅ↓繧ｰ繝ｩ繝輔ｒ蜀肴緒逕ｻ
                this.refreshChartsForTheme();
            });
        }
    }
    
    // 繝・・繝槫､画峩譎ゅ↓繧ｰ繝ｩ繝輔ｒ蜀肴緒逕ｻ
    refreshChartsForTheme() {
        if (this.currentPage === 'dashboard') {
            this.renderWinRateTrendChart();
            this.renderCharacterUsageChart();
        }
    }
    
    applyTheme(theme) {
        const root = document.documentElement;
        const themeBtn = document.getElementById('theme-toggle-btn');
        
        if (theme === 'light') {
            root.setAttribute('data-theme', 'light');
            if (themeBtn) themeBtn.textContent = '笘・・;
            
            // 繝ｩ繧､繝医Δ繝ｼ繝峨・繧ｹ繧ｿ繧､繝ｫ
            root.style.setProperty('--bg-primary', '#ffffff');
            root.style.setProperty('--bg-secondary', '#f5f5f5');
            root.style.setProperty('--bg-card', '#ffffff');
            root.style.setProperty('--text-primary', '#1a1a1a');
            root.style.setProperty('--text-secondary', '#666666');
            root.style.setProperty('--border-color', '#e0e0e0');
            root.style.setProperty('--accent-primary', '#0066cc');
            root.style.setProperty('--accent-secondary', '#0052a3');
        } else {
            root.setAttribute('data-theme', 'dark');
            if (themeBtn) themeBtn.textContent = '嫌';
            
            // 繝繝ｼ繧ｯ繝｢繝ｼ繝峨・繧ｹ繧ｿ繧､繝ｫ
            root.style.setProperty('--bg-primary', '#1a1a2e');
            root.style.setProperty('--bg-secondary', '#16213e');
            root.style.setProperty('--bg-card', '#0f1924');
            root.style.setProperty('--text-primary', '#ffffff');
            root.style.setProperty('--text-secondary', '#b0b0b0');
            root.style.setProperty('--border-color', '#2a3f5f');
            root.style.setProperty('--accent-primary', '#e94560');
            root.style.setProperty('--accent-secondary', '#c13651');
        }
    }
    
    // 隱崎ｨｼ繝√ぉ繝・け
    checkAuthentication() {
        const storedUser = sessionStorage.getItem('currentUser');
        const isGuest = sessionStorage.getItem('isGuest');
        
        if (storedUser) {
            this.currentUser = JSON.parse(storedUser);
            this.updateUserDisplay(this.currentUser.username);
        } else if (isGuest === 'true') {
            this.isGuest = true;
            this.updateUserDisplay('繧ｲ繧ｹ繝医Θ繝ｼ繧ｶ繝ｼ', true);
        } else {
            // 繝ｭ繧ｰ繧､繝ｳ繝｢繝ｼ繝繝ｫ繧定｡ｨ遉ｺ
            this.showLoginModal();
        }
    }
    
    showLoginModal() {
        const modal = document.getElementById('login-modal');
        if (modal) {
            modal.classList.remove('hidden');
        }
    }
    
    hideLoginModal() {
        const modal = document.getElementById('login-modal');
        if (modal) {
            modal.classList.add('hidden');
        }
    }
    
    updateUserDisplay(username, isGuest = false) {
        const headerUserName = document.getElementById('header-user-name');
        const userTypeIndicator = document.getElementById('user-type-indicator');
        
        if (headerUserName) {
            headerUserName.textContent = username;
        }
        
        if (userTypeIndicator) {
            userTypeIndicator.textContent = isGuest ? '繧ｲ繧ｹ繝・ : '繝ｦ繝ｼ繧ｶ繝ｼ';
            userTypeIndicator.className = isGuest ? 'user-type guest' : 'user-type registered';
        }
    }
    
    // 縺吶∋縺ｦ縺ｮ繝｢繝ｼ繝繝ｫ繧帝撼陦ｨ遉ｺ
    hideAllModals() {
        const modals = [
            'login-modal',
            'api-initial-setup-modal',
            'api-setup-modal',
            'initial-setup-modal'
        ];
        
        modals.forEach(modalId => {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.add('hidden');
                modal.style.display = 'none';
            }
        });
    }

    // 邨ｱ荳API繝槭ロ繝ｼ繧ｸ繝｣繝ｼ縺ｮ蛻晄悄蛹門ｮ御ｺ・ｒ蠕・▽
    async waitForUnifiedAPIManager() {
        let attempts = 0;
        const maxAttempts = 50; // 5遘貞ｾ・ｩ・        
        while (!window.unifiedApiManager && attempts < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, 100));
            attempts++;
        }
        
        if (!window.unifiedApiManager) {
            console.error('邨ｱ荳API繝槭ロ繝ｼ繧ｸ繝｣繝ｼ縺ｮ蛻晄悄蛹悶↓螟ｱ謨・);
            throw new Error('邨ｱ荳API繝槭ロ繝ｼ繧ｸ繝｣繝ｼ縺悟茜逕ｨ縺ｧ縺阪∪縺帙ｓ');
        }
        
        console.log('邨ｱ荳API繝槭ロ繝ｼ繧ｸ繝｣繝ｼ蛻晄悄蛹門ｮ御ｺ・);
    }

    // 繝舌ャ繧ｯ繧ｰ繝ｩ繧ｦ繝ｳ繝峨〒API險ｭ螳壹ｒ繝√ぉ繝・け
    async performBackgroundAPICheck() {
        try {
            if (!window.unifiedApiManager) {
                return { success: false, reason: 'manager_unavailable' };
            }
            
            // 菫晏ｭ俶ｸ医∩API繧ｭ繝ｼ縺後≠繧九°繝√ぉ繝・け
            const hasStoredKey = window.unifiedApiManager.isConfigured();
            
            if (!hasStoredKey) {
                console.log('API繧ｭ繝ｼ縺御ｿ晏ｭ倥＆繧後※縺・∪縺帙ｓ');
                return { success: false, reason: 'no_api_key' };
            }
            
            console.log('菫晏ｭ俶ｸ医∩API繧ｭ繝ｼ繧堤匱隕九√ヰ繝・け繧ｰ繝ｩ繧ｦ繝ｳ繝峨〒謗･邯壹ユ繧ｹ繝井ｸｭ...');
            
            // 繝舌ャ繧ｯ繧ｰ繝ｩ繧ｦ繝ｳ繝峨〒謗･邯壹ユ繧ｹ繝医ｒ螳溯｡・            const result = await window.unifiedApiManager.validateAPIKey();
            
            console.log('繝舌ャ繧ｯ繧ｰ繝ｩ繧ｦ繝ｳ繝画磁邯壹ユ繧ｹ繝域・蜉・', result);
            this.syncAPIKeyInputs();
            
            return { success: true, result: result };
            
        } catch (error) {
            console.warn('繝舌ャ繧ｯ繧ｰ繝ｩ繧ｦ繝ｳ繝画磁邯壹ユ繧ｹ繝医↓螟ｱ謨・', error);
            
            // 503繧ｨ繝ｩ繝ｼ・医し繝ｼ繝舌・驕手ｲ闕ｷ・峨・蝣ｴ蜷医・縲∝・譛溯ｨｭ螳壹Δ繝ｼ繝繝ｫ繧定｡ｨ遉ｺ縺帙★縺ｫ
            // API繧ｭ繝ｼ縺瑚ｨｭ螳壽ｸ医∩縺ｨ縺励※繧｢繝励Μ繧定ｵｷ蜍輔☆繧・            if (error.message && (error.message.includes('overloaded') || error.message.includes('503'))) {
                console.log('Gemini API繧ｵ繝ｼ繝舌・縺碁℃雋闕ｷ荳ｭ縺ｧ縺吶′縲、PI繧ｭ繝ｼ縺ｯ險ｭ螳壽ｸ医∩縺ｮ縺溘ａ繧｢繝励Μ繧定ｵｷ蜍輔＠縺ｾ縺・);
                this.showToast('笞・・Gemini API縺御ｸ譎ら噪縺ｫ驕手ｲ闕ｷ荳ｭ縺ｧ縺吶・I讖溯・縺ｯ蠕後⊇縺ｩ蛻ｩ逕ｨ蜿ｯ閭ｽ縺ｫ縺ｪ繧翫∪縺吶・, 'warning');
                this.syncAPIKeyInputs();
                return { success: true, overloaded: true };
            }
            
            return { 
                success: false, 
                reason: 'connection_failed',
                error: error 
            };
        }
    }

    // 繝｡繧､繝ｳ繧｢繝励Μ繧貞・譛溷喧(API謗･邯壽・蜉滓凾)
    async initializeMainApp() {
        // 邨ｱ荳API繝槭ロ繝ｼ繧ｸ繝｣繝ｼ縺九ｉGeminiService縺ｸ縺ｮAPI繧ｭ繝ｼ蜷梧悄繧堤｢ｺ菫・        if (window.unifiedApiManager && window.unifiedApiManager.isConfigured()) {
            window.unifiedApiManager.updateLegacyAPIKeys();
        }
        
        // 繝ｭ繧ｰ繧､繝ｳ繝√ぉ繝・け
        this.checkAuthentication();
        
        // 谿九ｊ縺ｮ蛻晄悄蛹悶ｒ螳溯｡・        this.continueInitialization();
        
        // 繧ｲ繝ｼ繝驕ｸ謚槭→繝繝・す繝･繝懊・繝画ｩ溯・縺ｮ蛻晄悄蛹・        this.initGameSelection();
        this.initializeSkillLevel();
        this.initDailyCoaching();
        this.initDashboardGoals();

        // 縺昴・莉悶・繝翫ン繧ｲ繝ｼ繧ｷ繝ｧ繝ｳ讖溯・
        this.initNavigationHelpers();
        
        // 騾｣蜍晁ｨ倬鹸縺ｮ蛻晄悄蛹・        this.initWinStreak();
        
        // 蛻晄悄繝壹・繧ｸ縺ｮ陦ｨ遉ｺ
        this.showPage(this.currentPage);
        
        // 繝√Ε繝ｼ繝医・蛻晄悄蛹・        this.initCharts();
        
        // 繝・・繧ｿ縺ｮ繝ｭ繝ｼ繝・        this.loadUserData();
        
        // 繝ｭ繧ｰ繧､繝ｳ逕ｻ髱｢繧定｡ｨ遉ｺ
        setTimeout(() => {
            this.showLoginModal();
        }, 100);
    }

    // API險ｭ螳壹メ繧ｧ繝・け縺ｨ蛻晄悄蛹厄ｼ亥ｾ捺擂縺ｮ繝｡繧ｽ繝・ラ縲∽ｺ呈鋤諤ｧ縺ｮ縺溘ａ谿九☆・・    async checkAndInitializeAPI() {
        // 譁ｰ縺励＞繝輔Ο繝ｼ縺ｫ鄂ｮ縺肴鋤縺医ｉ繧後◆縺溘ａ縲∽ｽ輔ｂ縺励↑縺・        console.log('checkAndInitializeAPI縺ｯ譁ｰ縺励＞繝輔Ο繝ｼ縺ｫ鄂ｮ縺肴鋤縺医ｉ繧後∪縺励◆');
    }
    
    // 蛻晄悄蛹悶・邯夊｡鯉ｼ・PI繧ｭ繝ｼ險ｭ螳壼ｾ鯉ｼ・    continueInitialization() {
        // API繧ｭ繝ｼ蛻晄悄險ｭ螳壹′蠢・ｦ√↑蝣ｴ蜷医・繧ｹ繧ｭ繝・・
        if (window.unifiedApiManager?.needsInitialSetup()) {
            return;
        }
        
        // 繧､繝吶Φ繝医Μ繧ｹ繝翫・縺ｮ險ｭ螳・        this.setupEventListeners();
        
        // 繝翫ン繧ｲ繝ｼ繧ｷ繝ｧ繝ｳ縺ｮ蛻晄悄蛹・        this.initNavigation();
        
        // 繝√Ε繝・ヨ讖溯・縺ｮ蛻晄悄蛹・        this.initChat();
        

        // 繧ｳ繝ｼ繝√Φ繧ｰ讖溯・縺ｮ繝輔ぅ繝ｼ繝峨ヰ繝・け繝懊ち繝ｳ繧定ｨｭ螳・        this.setupCoachingFeedbackListeners();

        // 豌励▼縺阪ち繧ｰ讖溯・縺ｮ繧､繝吶Φ繝医Μ繧ｹ繝翫・險ｭ螳・        this.setupInsightTagsListeners();
    }
    
    // 蛻晄悄API繧ｻ繝・ヨ繧｢繝・・繝｢繝ｼ繝繝ｫ繧定｡ｨ遉ｺ
    showInitialAPISetupModal() {
        const modal = document.getElementById('api-initial-setup-modal');
        if (modal) {
            modal.classList.remove('hidden');
            modal.style.display = 'flex'; // 遒ｺ螳溘↓陦ｨ遉ｺ
            
            console.log('蛻晄悄API險ｭ螳壹Δ繝ｼ繝繝ｫ繧定｡ｨ遉ｺ');
            
            // 蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨・蛻晄悄迥ｶ諷九ｒ繝√ぉ繝・け
            setTimeout(() => {
                const apiKeyInput = document.getElementById('initial-api-key');
                if (apiKeyInput) {
                    this.validateInitialAPIKeyInput(apiKeyInput.value.trim());
                }
            }, 400);
        }
    }
    
    // 蛻晄悄API繧ｻ繝・ヨ繧｢繝・・繝｢繝ｼ繝繝ｫ縺ｮ繧､繝吶Φ繝医Μ繧ｹ繝翫・險ｭ螳・    setupInitialAPIModalListeners() {
        // 驥崎､・匳骭ｲ繧帝亟縺・        if (window.apiModalListenersSet) {
            console.log('API繝｢繝ｼ繝繝ｫ繝ｪ繧ｹ繝翫・縺ｯ譌｢縺ｫ險ｭ螳壽ｸ医∩');
            return;
        }
        
        console.log('API繝｢繝ｼ繝繝ｫ繝ｪ繧ｹ繝翫・繧定ｨｭ螳壻ｸｭ...');
        
        // 繧､繝吶Φ繝亥ｧ碑ｭｲ繧剃ｽｿ逕ｨ縺励※document繝ｬ繝吶Ν縺ｧ繧､繝吶Φ繝医ｒ繧ｭ繝｣繝・メ
        document.addEventListener('click', (e) => {
            if (e.target.id === 'test-initial-api') {
                e.preventDefault();
                this.testInitialAPIConnection();
            } else if (e.target.id === 'save-initial-api') {
                e.preventDefault();
                this.saveInitialAPIKeyFromModal();
            } else if (e.target.id === 'skip-api-setup') {
                e.preventDefault();
                this.skipInitialAPISetup();
            } else if (e.target.id === 'toggle-initial-key') {
                e.preventDefault();
                this.toggleInitialAPIKeyVisibility();
            }
        });
        
        // 蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨・繧､繝吶Φ繝医ｂ險ｭ螳・        const apiKeyInput = document.getElementById('initial-api-key');
        if (apiKeyInput && !apiKeyInput.hasAttribute('data-listeners-added')) {
            apiKeyInput.addEventListener('input', (e) => {
                this.validateInitialAPIKeyInput(e.target.value.trim());
            });
            apiKeyInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    const saveBtn = document.getElementById('save-initial-api');
                    if (saveBtn && !saveBtn.disabled) {
                        this.saveInitialAPIKeyFromModal();
                    }
                }
            });
            apiKeyInput.setAttribute('data-listeners-added', 'true');
        }
        
        // 驥崎､・ｨｭ螳夐亟豁｢繝輔Λ繧ｰ繧定ｨｭ螳・        window.apiModalListenersSet = true;
        console.log('API繝｢繝ｼ繝繝ｫ繝ｪ繧ｹ繝翫・險ｭ螳壼ｮ御ｺ・);
    }
    
    // API繧ｭ繝ｼ陦ｨ遉ｺ/髱櫁｡ｨ遉ｺ蛻・ｊ譖ｿ縺・    toggleInitialAPIKeyVisibility() {
        const apiKeyInput = document.getElementById('initial-api-key');
        const toggleBtn = document.getElementById('toggle-initial-key');
        
        if (apiKeyInput && toggleBtn) {
            const isPassword = apiKeyInput.type === 'password';
            apiKeyInput.type = isPassword ? 'text' : 'password';
            toggleBtn.textContent = isPassword ? '刪' : '早・・;
        }
    }
    
    // 蛻晄悄API繧ｭ繝ｼ蜈･蜉帙・讀懆ｨｼ
    validateInitialAPIKeyInput(apiKey) {
        const testBtn = document.getElementById('test-initial-api');
        const saveBtn = document.getElementById('save-initial-api');
        
        if (!window.unifiedApiManager) return;
        
        const validation = window.unifiedApiManager.validateAPIKeyStrength(apiKey);
        const isValid = validation.valid;
        
        // 繝懊ち繝ｳ縺ｮ譛牙柑蛹・辟｡蜉ｹ蛹・        if (testBtn) testBtn.disabled = !isValid;
        if (saveBtn) saveBtn.disabled = !isValid;
        
        // 隕冶ｦ夂噪繝輔ぅ繝ｼ繝峨ヰ繝・け
        const inputWrapper = document.querySelector('#initial-api-key').parentNode;
        if (inputWrapper) {
            inputWrapper.classList.remove('input-valid', 'input-invalid');
            if (apiKey.length > 0) {
                if (isValid) {
                    inputWrapper.classList.add('input-valid');
                } else {
                    inputWrapper.classList.add('input-invalid');
                }
            }
        }
    }
    
    
    
    // 蛻晄悄API謗･邯壹ユ繧ｹ繝・    async testInitialAPIConnection() {
        const apiKeyInput = document.getElementById('initial-api-key');
        const testBtn = document.getElementById('test-initial-api');
        
        if (!apiKeyInput) {
            console.error('API繧ｭ繝ｼ蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨′隕九▽縺九ｊ縺ｾ縺帙ｓ');
            return;
        }
        
        if (!window.unifiedApiManager) {
            console.error('邨ｱ荳API繝槭ロ繝ｼ繧ｸ繝｣縺悟茜逕ｨ縺ｧ縺阪∪縺帙ｓ');
            this.showToast('API繝槭ロ繝ｼ繧ｸ繝｣縺悟茜逕ｨ縺ｧ縺阪∪縺帙ｓ', 'error');
            return;
        }
        
        const apiKey = apiKeyInput.value;
        if (!apiKey) {
            this.showToast('API繧ｭ繝ｼ繧貞・蜉帙＠縺ｦ縺上□縺輔＞', 'warning');
            return;
        }
        
        // API繧ｭ繝ｼ縺ｮ蠑ｷ蠎ｦ繝√ぉ繝・け
        const validation = window.unifiedApiManager.validateAPIKeyStrength(apiKey);
        if (!validation.valid) {
            this.showToast(`API繧ｭ繝ｼ繧ｨ繝ｩ繝ｼ: ${validation.issues[0]}`, 'error');
            return;
        }
        
        const originalText = testBtn.textContent;
        testBtn.disabled = true;
        testBtn.textContent = '繝・せ繝井ｸｭ...';
        
        try {
            // 荳譎ら噪縺ｫAPI繧ｭ繝ｼ繧定ｨｭ螳・            const originalApiKey = window.unifiedApiManager.getAPIKey();
            await window.unifiedApiManager.setAPIKey(apiKey);
            
            // 謗･邯壹ユ繧ｹ繝医ｒ螳溯｡・            await window.unifiedApiManager.validateAPIKey();
            
            this.showToast('謗･邯壹ユ繧ｹ繝医↓謌仙粥縺励∪縺励◆・・, 'success');
            
            // 繝・せ繝域・蜉滓凾縺ｫ蜈･蜉帶ｬ・ｒ邱題牡縺ｫ
            const inputWrapper = apiKeyInput.parentNode;
            if (inputWrapper) {
                inputWrapper.classList.remove('input-invalid');
                inputWrapper.classList.add('input-valid');
            }
            
            // 蜈・・API繧ｭ繝ｼ繧貞ｾｩ蜈・ｼ医ユ繧ｹ繝医□縺代↑縺ｮ縺ｧ・・            if (originalApiKey) {
                await window.unifiedApiManager.setAPIKey(originalApiKey);
            } else {
                window.unifiedApiManager.clearAPIKey();
            }
            
        } catch (error) {
            console.error('API謗･邯壹ユ繧ｹ繝医↓螟ｱ謨・', error);
            this.showToast(`謗･邯壹ユ繧ｹ繝医↓螟ｱ謨励＠縺ｾ縺励◆: ${error.message}`, 'error');
            
            // 繝・せ繝亥､ｱ謨玲凾縺ｫ蜈･蜉帶ｬ・ｒ襍､濶ｲ縺ｫ
            const inputWrapper = apiKeyInput.parentNode;
            if (inputWrapper) {
                inputWrapper.classList.remove('input-valid');
                inputWrapper.classList.add('input-invalid');
            }
        } finally {
            testBtn.disabled = false;
            testBtn.textContent = originalText;
        }
    }
    
    // 蛻晄悄繝｢繝ｼ繝繝ｫ縺九ｉAPI繧ｭ繝ｼ繧剃ｿ晏ｭ・    async saveInitialAPIKeyFromModal() {
        const apiKeyInput = document.getElementById('initial-api-key');
        const saveBtn = document.getElementById('save-initial-api');
        
        if (!apiKeyInput) {
            console.error('API繧ｭ繝ｼ蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨′隕九▽縺九ｊ縺ｾ縺帙ｓ');
            return;
        }
        
        if (!window.unifiedApiManager) {
            console.error('邨ｱ蜷・PI繝槭ロ繝ｼ繧ｸ繝｣繝ｼ縺悟茜逕ｨ縺ｧ縺阪∪縺帙ｓ');
            this.showToast('API繝槭ロ繝ｼ繧ｸ繝｣繝ｼ縺悟茜逕ｨ縺ｧ縺阪∪縺帙ｓ', 'error');
            return;
        }
        
        const apiKey = apiKeyInput.value.trim();
        if (!apiKey) {
            this.showToast('API繧ｭ繝ｼ繧貞・蜉帙＠縺ｦ縺上□縺輔＞', 'warning');
            return;
        }
        
        // API繧ｭ繝ｼ縺ｮ蠖｢蠑上メ繧ｧ繝・け
        const validation = window.unifiedApiManager.validateAPIKeyStrength(apiKey);
        if (!validation.valid) {
            this.showToast(`API繧ｭ繝ｼ縺檎┌蜉ｹ縺ｧ縺・ ${validation.issues.join(', ')}`, 'error');
            return;
        }
        
        const originalText = saveBtn.textContent;
        saveBtn.disabled = true;
        saveBtn.textContent = '菫晏ｭ倅ｸｭ...';
        
        try {
            // API繧ｭ繝ｼ繧堤ｵｱ蜷医・繝阪・繧ｸ繝｣繝ｼ縺ｫ菫晏ｭ・            window.unifiedApiManager.setAPIKey(apiKey);
            
            // 譌｢蟄倥・蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨ｂ蜷梧悄
            this.syncAPIKeyInputs();
            
            this.showToast('API繧ｭ繝ｼ繧剃ｿ晏ｭ倥＠縺ｾ縺励◆', 'success');
            this.closeInitialAPISetupModal();
            
            // API繧ｭ繝ｼ險ｭ螳壼ｮ御ｺ・ｾ後√Γ繧､繝ｳ繧｢繝励Μ繧貞・譛溷喧
            setTimeout(async () => {
                await this.initializeMainApp();
            }, 500);
            
        } catch (error) {
            console.error('API繧ｭ繝ｼ菫晏ｭ倥↓螟ｱ謨・', error);
            this.showToast(`菫晏ｭ倥↓螟ｱ謨励＠縺ｾ縺励◆: ${error.message}`, 'error');
        } finally {
            saveBtn.disabled = false;
            saveBtn.textContent = originalText;
        }
    }
    
    // 閾ｪ蜍墓磁邯壹ユ繧ｹ繝亥ｮ溯｡・    async performAutoConnectionTest() {
        if (!window.unifiedApiManager) {
            throw new Error('邨ｱ荳API繝槭ロ繝ｼ繧ｸ繝｣繝ｼ縺悟茜逕ｨ縺ｧ縺阪∪縺帙ｓ');
        }

        if (!window.unifiedApiManager.isConfigured()) {
            throw new Error('API繧ｭ繝ｼ縺瑚ｨｭ螳壹＆繧後※縺・∪縺帙ｓ');
        }

        try {
            // 繝ｭ繝ｼ繝・ぅ繝ｳ繧ｰ迥ｶ諷九ｒ陦ｨ遉ｺ・・PI繝｢繝ｼ繝繝ｫ縺碁撼陦ｨ遉ｺ縺ｮ蝣ｴ蜷医・繝医・繧ｹ繝郁｡ｨ遉ｺ・・            const apiModal = document.getElementById('api-initial-setup-modal');
            if (!apiModal || apiModal.classList.contains('hidden')) {
                this.showToast('菫晏ｭ俶ｸ医∩API繧ｭ繝ｼ縺ｧ謗･邯壹ユ繧ｹ繝井ｸｭ...', 'info');
            }

            // 邨ｱ荳API繝槭ロ繝ｼ繧ｸ繝｣繝ｼ繧剃ｽｿ縺｣縺ｦ謗･邯壹ユ繧ｹ繝・            const result = await window.unifiedApiManager.validateAPIKey();
            
            console.log('閾ｪ蜍墓磁邯壹ユ繧ｹ繝域・蜉・', result);
            return result;
            
        } catch (error) {
            console.error('閾ｪ蜍墓磁邯壹ユ繧ｹ繝亥､ｱ謨・', error);
            throw error;
        }
    }

    // 閾ｪ蜍墓磁邯壹ユ繧ｹ繝亥､ｱ謨玲凾縺ｮ繝上Φ繝峨Μ繝ｳ繧ｰ
    handleAutoConnectionTestFailure(error) {
        let errorMessage = '';
        let shouldShowModal = true;
        
        // 繧ｨ繝ｩ繝ｼ繧ｿ繧､繝怜挨縺ｮ繝｡繝・そ繝ｼ繧ｸ險ｭ螳・        if (error.message.includes('401') || error.message.includes('Unauthorized')) {
            errorMessage = '菫晏ｭ倥＆繧後◆API繧ｭ繝ｼ縺檎┌蜉ｹ縺ｧ縺吶よ眠縺励＞API繧ｭ繝ｼ繧定ｨｭ螳壹＠縺ｦ縺上□縺輔＞縲・;
        } else if (error.message.includes('403') || error.message.includes('Forbidden')) {
            errorMessage = 'API繧ｭ繝ｼ縺ｮ讓ｩ髯舌′荳崎ｶｳ縺励※縺・∪縺吶・emini API 縺ｮ譛牙柑縺ｪ繧ｭ繝ｼ繧剃ｽｿ逕ｨ縺励※縺上□縺輔＞縲・;
        } else if (error.message.includes('404') || error.message.includes('Not Found')) {
            errorMessage = 'API繧ｨ繝ｳ繝峨・繧､繝ｳ繝医′隕九▽縺九ｊ縺ｾ縺帙ｓ縲ゅ＠縺ｰ繧峨￥蠕後↓蜀崎ｩｦ陦後＠縺ｦ縺上□縺輔＞縲・;
        } else if (error.message.includes('429') || error.message.includes('Rate limit')) {
            errorMessage = 'API縺ｮ蛻ｩ逕ｨ蛻ｶ髯舌↓驕斐＠縺ｾ縺励◆縲ゅ＠縺ｰ繧峨￥蠕後↓蜀崎ｩｦ陦後＠縺ｦ縺上□縺輔＞縲・;
        } else if (error.message.includes('500') || error.message.includes('Internal Server Error')) {
            errorMessage = 'Gemini API繧ｵ繝ｼ繝舌・縺ｫ蝠城｡後′逋ｺ逕溘＠縺ｦ縺・∪縺吶ゅ＠縺ｰ繧峨￥蠕後↓蜀崎ｩｦ陦後＠縺ｦ縺上□縺輔＞縲・;
        } else if (error.message.includes('network') || error.message.includes('fetch')) {
            errorMessage = '繝阪ャ繝医Ρ繝ｼ繧ｯ謗･邯壹↓蝠城｡後′縺ゅｊ縺ｾ縺吶ゅう繝ｳ繧ｿ繝ｼ繝阪ャ繝域磁邯壹ｒ遒ｺ隱阪＠縺ｦ縺上□縺輔＞縲・;
        } else {
            errorMessage = `菫晏ｭ倥＆繧後◆API繧ｭ繝ｼ縺ｧ縺ｮ謗･邯壹↓螟ｱ謨励＠縺ｾ縺励◆: ${error.message}`;
        }
        
        // 繧ｨ繝ｩ繝ｼ繝医・繧ｹ繝医ｒ陦ｨ遉ｺ
        this.showToast(errorMessage, 'warning');
        
        // 蛻晄悄險ｭ螳夂判髱｢繧定｡ｨ遉ｺ
        setTimeout(() => {
            this.showInitialAPISetupModal();
            
            // 蛻晄悄險ｭ螳夂判髱｢蜀・〒繧ｨ繝ｩ繝ｼ繝｡繝・そ繝ｼ繧ｸ繧偵ワ繧､繝ｩ繧､繝・            const errorHelp = document.querySelector('#api-initial-setup-modal .error-help');
            if (errorHelp) {
                errorHelp.textContent = errorMessage;
                errorHelp.style.display = 'block';
            }
        }, 1000);
    }

    // 蛻晄悄API繧ｻ繝・ヨ繧｢繝・・繧偵せ繧ｭ繝・・
    skipInitialAPISetup() {
        this.showToast('API險ｭ螳壹ｒ繧ｹ繧ｭ繝・・縺励∪縺励◆縲ゆｸ驛ｨ讖溯・縺悟宛髯舌＆繧後∪縺吶・, 'info');
        this.closeInitialAPISetupModal();
        
        // 繧ｹ繧ｭ繝・・蠕後ｂ繝｡繧､繝ｳ繧｢繝励Μ繧貞・譛溷喧
        setTimeout(async () => {
            await this.initializeMainApp();
        }, 500);
    }
    
    // 蛻晄悄API繧ｻ繝・ヨ繧｢繝・・繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
    closeInitialAPISetupModal() {
        const modal = document.getElementById('api-initial-setup-modal');
        if (modal) {
            modal.classList.add('hidden');
            modal.style.display = 'none'; // 遒ｺ螳溘↓髱櫁｡ｨ遉ｺ縺ｫ縺吶ｋ
        }
    }
    
    // API繧ｻ繝・ヨ繧｢繝・・繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
    closeAPISetupModal() {
        const modal = document.getElementById('api-setup-modal');
        if (modal) {
            modal.classList.add('hidden');
        }
    }
    
    // API繧ｭ繝ｼ蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨・蜷梧悄
    syncAPIKeyInputs() {
        if (!window.unifiedApiManager) return;
        
        const apiKey = window.unifiedApiManager.getAPIKey();
        const inputs = [
            document.getElementById('gemini-api-key'),
            document.getElementById('initial-api-key')
        ];
        
        inputs.forEach(input => {
            if (input && apiKey) {
                input.value = apiKey;
            }
        });
    }
    
    // 繝翫ン繧ｲ繝ｼ繧ｷ繝ｧ繝ｳ
    initNavigation() {
        const navBtns = document.querySelectorAll('.nav-btn');
        navBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const page = btn.dataset.page;
                if (page) {
                    this.showPage(page);
                    
                    // 繧｢繧ｯ繝・ぅ繝悶け繝ｩ繧ｹ縺ｮ譖ｴ譁ｰ
                    navBtns.forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                }
            });
        });
    }
    
    showPage(pageId) {
        console.log('Showing page:', pageId);
        
        // 縺吶∋縺ｦ縺ｮ繝壹・繧ｸ繧帝撼陦ｨ遉ｺ
        const pages = document.querySelectorAll('.page');
        pages.forEach(page => {
            page.classList.remove('active');
        });
        
        // 謖・ｮ壹＆繧後◆繝壹・繧ｸ繧定｡ｨ遉ｺ
        const targetPage = document.getElementById(pageId);
        if (targetPage) {
            targetPage.classList.add('active');
            this.currentPage = pageId;
            
            // 繝壹・繧ｸ蝗ｺ譛峨・蛻晄悄蛹・            this.initPageContent(pageId);
        }
    }
    
    initPageContent(pageId) {
        switch(pageId) {
            case 'coaching-plans':
                this.initCoachingPlansPage();
                break;
            case 'dashboard':
                this.loadDashboard();
                break;
            case 'analysis':
                this.loadAnalysis();
                break;
            case 'goals':
                this.loadGoals();
                break;
            case 'gallery':
                this.loadGallery();
                break;
            case 'data-source':
                this.loadDataSourcePage();
                break;
            case 'settings':
                this.loadSettings();
                break;
        }
    }
    
    // 繧､繝吶Φ繝医Μ繧ｹ繝翫・險ｭ螳・    setupEventListeners() {
        // 繝ｭ繧ｰ繧､繝ｳ/逋ｻ骭ｲ繧ｿ繝門・繧頑崛縺・        const tabBtns = document.querySelectorAll('.tab-btn');
        tabBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const tabName = btn.dataset.tab;
                this.switchTab(tabName);
            });
        });
        
        // 繝ｭ繧ｰ繧､繝ｳ繝輔か繝ｼ繝
        const loginForm = document.getElementById('login-form');
        if (loginForm) {
            loginForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleLogin();
            });
        }
        
        // 逋ｻ骭ｲ繝輔か繝ｼ繝
        const registerForm = document.getElementById('register-form');
        if (registerForm) {
            registerForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleRegister();
            });
        }
        
        // 繧ｲ繧ｹ繝医・繧ｿ繝ｳ
        const guestBtn = document.getElementById('guest-btn');
        if (guestBtn) {
            guestBtn.addEventListener('click', () => {
                this.handleGuestAccess();
            });
        }
        
        // 繝ｭ繧ｰ繧｢繧ｦ繝医・繧ｿ繝ｳ
        const logoutBtn = document.getElementById('logout-btn');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', () => {
                this.handleLogout();
            });
        }
        
        // 隧ｦ蜷医ョ繝ｼ繧ｿ繝輔か繝ｼ繝
        const matchForm = document.getElementById('match-form');
        if (matchForm) {
            matchForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleMatchSubmit();
            });
        }

        // 繧ｯ繧､繝・け隧ｦ蜷亥・蜉帙ヵ繧ｩ繝ｼ繝
        const quickMatchForm = document.getElementById('quick-match-form');
        if (quickMatchForm) {
            quickMatchForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleQuickMatchSubmit();
            });
        }

        // 繧ｯ繧､繝・け蜈･蜉帙・繧､繝吶Φ繝医Μ繧ｹ繝翫・
        this.setupQuickMatchListeners();
        
        // 縺ｾ縺ｨ繧√※蜈･蜉帙・繧､繝吶Φ繝医Μ繧ｹ繝翫・
        this.setupBatchInputListeners();
        
        // 繝励Λ繝ｳ莉倥″逶ｮ讓吩ｽ懈・繝懊ち繝ｳ
        const createWithPlanBtn = document.getElementById('create-with-plan-btn');
        if (createWithPlanBtn) {
            createWithPlanBtn.addEventListener('click', () => {
                this.handleCreateGoalWithPlan();
            });
        }

        // 繧ｳ繝ｼ繝√Φ繧ｰ繝励Λ繝ｳ繝｢繝ｼ繝繝ｫ繧､繝吶Φ繝・        this.initCoachingPlanModal();
        
        // API險ｭ螳壹ヵ繧ｩ繝ｼ繝
        const apiForm = document.getElementById('api-form');
        if (apiForm) {
            apiForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleApiSave();
            });
        }
        
        // API繧ｭ繝ｼ陦ｨ遉ｺ繝医げ繝ｫ
        const toggleApiKey = document.getElementById('toggle-api-key');
        if (toggleApiKey) {
            toggleApiKey.addEventListener('click', () => {
                const apiKeyInput = document.getElementById('api-key');
                if (apiKeyInput) {
                    apiKeyInput.type = apiKeyInput.type === 'password' ? 'text' : 'password';
                    toggleApiKey.textContent = apiKeyInput.type === 'password' ? '早・・ : '早・鞘昨泓ｨ・・;
                }
            });
        }
        
        // API繝・せ繝医・繧ｿ繝ｳ
        const testApiBtn = document.getElementById('test-api-btn');
        if (testApiBtn) {
            testApiBtn.addEventListener('click', () => {
                this.testApiConnection();
            });
        }
        
        // API繧ｯ繝ｪ繧｢繝懊ち繝ｳ
        const clearApiBtn = document.getElementById('clear-api-btn');
        if (clearApiBtn) {
            clearApiBtn.addEventListener('click', () => {
                this.clearApiSettings();
            });
        }
        
        // AI譖ｴ譁ｰ繝懊ち繝ｳ
        const refreshAiBtn = document.getElementById('refresh-ai-btn');
        if (refreshAiBtn) {
            refreshAiBtn.addEventListener('click', () => {
                this.refreshAiRecommendations();
            });
        }
        
        // Street Fighter 6蟆ら畑繧｢繝励Μ縺ｮ縺溘ａ縲√ご繝ｼ繝驕ｸ謚樊ｩ溯・縺ｯ辟｡蜉ｹ蛹・
        // 繧ｹ繧ｭ繝ｫ繝ｬ繝吶Ν螟画峩繝懊ち繝ｳ
        const changeSkillBtn = document.getElementById('change-skill-btn');
        if (changeSkillBtn) {
            changeSkillBtn.addEventListener('click', () => {
                this.showSkillSelector();
            });
        }

        // 繧ｹ繧ｭ繝ｫ繝ｬ繝吶Ν驕ｸ謚樒｢ｺ螳壹・繧ｿ繝ｳ
        const confirmSkillBtn = document.getElementById('confirm-skill-btn');
        if (confirmSkillBtn) {
            confirmSkillBtn.addEventListener('click', () => {
                this.confirmSkillSelection();
            });
        }

        // 繧ｹ繧ｭ繝ｫ繝ｬ繝吶Ν驕ｸ謚槭く繝｣繝ｳ繧ｻ繝ｫ繝懊ち繝ｳ
        const cancelSkillBtn = document.getElementById('cancel-skill-btn');
        if (cancelSkillBtn) {
            cancelSkillBtn.addEventListener('click', () => {
                this.hideSkillSelector();
            });
        }

        // 繧｢繝励Μ蛻晄悄蛹悶・繧ｿ繝ｳ
        const resetBtn = document.getElementById('reset-app-btn');
        if (resetBtn) {
            resetBtn.addEventListener('click', () => {
                this.resetAppData();
            });
        }

        // Data Source Page Listeners
        const uploadForm = document.getElementById('upload-form');
        if (uploadForm) {
            uploadForm.addEventListener('submit', (e) => this.handleFileUpload(e));
        }

        const fileInput = document.getElementById('file-input');
        const uploadBtn = document.getElementById('upload-btn');
        if (fileInput && uploadBtn) {
            fileInput.addEventListener('change', () => {
                uploadBtn.disabled = fileInput.files.length === 0;
            });
        }

        // Gallery Page Listeners
        this.setupGalleryFilters();

        // 蜍晉紫隧ｳ邏ｰ繝懊ち繝ｳ
        const winRateDetailBtn = document.getElementById('show-winrate-detail-btn');
        if (winRateDetailBtn) {
            winRateDetailBtn.addEventListener('click', () => {
                this.showWinRateDetailModal();
            });
        }
    }
    
    // 繧ｿ繝門・繧頑崛縺・    switchTab(tabName) {
        const tabBtns = document.querySelectorAll('.tab-btn');
        const tabContents = document.querySelectorAll('.tab-content');
        
        tabBtns.forEach(btn => {
            if (btn.dataset.tab === tabName) {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }
        });
        
        tabContents.forEach(content => {
            if (content.id === `${tabName}-tab`) {
                content.classList.add('active');
            } else {
                content.classList.remove('active');
            }
        });
    }
    
    // 繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・    handleLogin() {
        const username = document.getElementById('login-username').value;
        const password = document.getElementById('login-password').value;
        
        if (this.authService) {
            const result = this.authService.login(username, password);
            if (result.success) {
                this.currentUser = result.user;
                this.updateUserDisplay(username);
                this.hideLoginModal();
                this.loadUserData();
                this.showToast('繝ｭ繧ｰ繧､繝ｳ縺励∪縺励◆', 'success');
            } else {
                this.showToast(result.message, 'error');
            }
        } else {
            // 繝｢繝・け繝ｭ繧ｰ繧､繝ｳ
            this.currentUser = { username: username };
            sessionStorage.setItem('currentUser', JSON.stringify(this.currentUser));
            this.updateUserDisplay(username);
            this.hideLoginModal();
            this.showToast('繝ｭ繧ｰ繧､繝ｳ縺励∪縺励◆', 'success');
        }
    }
    
    // 逋ｻ骭ｲ蜃ｦ逅・    handleRegister() {
        const username = document.getElementById('register-username').value;
        const email = document.getElementById('register-email').value;
        const password = document.getElementById('register-password').value;
        const passwordConfirm = document.getElementById('register-password-confirm').value;
        
        if (password !== passwordConfirm) {
            this.showToast('繝代せ繝ｯ繝ｼ繝峨′荳閾ｴ縺励∪縺帙ｓ', 'error');
            return;
        }
        
        if (this.authService) {
            const result = this.authService.register(username, password, email);
            if (result.success) {
                this.showToast('逋ｻ骭ｲ縺悟ｮ御ｺ・＠縺ｾ縺励◆縲ゅΟ繧ｰ繧､繝ｳ縺励※縺上□縺輔＞縲・, 'success');
                this.switchTab('login');
            } else {
                this.showToast(result.message, 'error');
            }
        } else {
            // 繝｢繝・け逋ｻ骭ｲ
            this.showToast('逋ｻ骭ｲ縺悟ｮ御ｺ・＠縺ｾ縺励◆', 'success');
            this.switchTab('login');
        }
    }
    
    // 繧ｲ繧ｹ繝医い繧ｯ繧ｻ繧ｹ
    handleGuestAccess() {
        this.isGuest = true;
        sessionStorage.setItem('isGuest', 'true');
        this.updateUserDisplay('繧ｲ繧ｹ繝医Θ繝ｼ繧ｶ繝ｼ', true);
        this.hideLoginModal();
        this.showToast('繧ｲ繧ｹ繝医→縺励※繝ｭ繧ｰ繧､繝ｳ縺励∪縺励◆', 'info');
    }
    
    // 繝ｭ繧ｰ繧｢繧ｦ繝・    handleLogout() {
        this.currentUser = null;
        this.isGuest = false;
        sessionStorage.removeItem('currentUser');
        sessionStorage.removeItem('isGuest');
        this.showLoginModal();
        this.showToast('繝ｭ繧ｰ繧｢繧ｦ繝医＠縺ｾ縺励◆', 'info');
    }
    
    // 隧ｦ蜷医ョ繝ｼ繧ｿ騾∽ｿ｡
    handleMatchSubmit() {
        const matchData = {
            result: document.getElementById('match-result').value,
            character: document.getElementById('character-select').value,
            // 繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ繝ｻ繝ｩ繧ｦ繝ｳ繝臥ｵ先棡謖・ｨ吶・縺ｿ
            playerCharacter: document.getElementById('player-character').value,
            opponentCharacter: document.getElementById('opponent-character').value,
            roundsWon: parseInt(document.getElementById('rounds-won').value || 0),
            roundsLost: parseInt(document.getElementById('rounds-lost').value || 0),
            duration: parseFloat(document.getElementById('match-duration').value)
        };

        // 1) 蛻・梵邨先棡縺ｮ陦ｨ遉ｺ
        this.analyzeMatch(matchData);

        // 2) 隧ｦ蜷医ｒ菫晏ｭ倥＠縲√ム繝・す繝･繝懊・繝臥ｵｱ險医ｒ譖ｴ譁ｰ・磯｣蜍包ｼ・        this.storeMatchAndRefresh(matchData);
        document.getElementById('match-form').reset();
        this.showToast('蛻・梵繧貞ｮ溯｡後＠縺ｦ縺・∪縺・..', 'info');
    }

    // 繧ｯ繧､繝・け隧ｦ蜷亥・蜉帙・繧､繝吶Φ繝医Μ繧ｹ繝翫・繧定ｨｭ螳・    setupQuickMatchListeners() {
        // 閾ｪ蛻・・繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ驕ｸ謚・        const characterOptions = document.querySelectorAll('#player-character-grid .char-option');
        characterOptions.forEach(option => {
            option.addEventListener('click', () => {
                this.selectCharacter(option);
            });
        });

        // 逶ｸ謇九く繝｣繝ｩ繧ｯ繧ｿ繝ｼ驕ｸ謚・        const opponentOptions = document.querySelectorAll('#opponent-character-grid .char-option');
        opponentOptions.forEach(option => {
            option.addEventListener('click', () => {
                this.selectOpponent(option);
            });
        });

        // 繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ讀懃ｴ｢讖溯・
        this.setupCharacterFiltering();

        // 繧ｹ繧ｳ繧｢驕ｸ謚・        const scoreOptions = document.querySelectorAll('.score-option');
        scoreOptions.forEach(option => {
            option.addEventListener('click', () => {
                this.selectScore(option);
            });
        });

        // 豎ｺ逹譁ｹ豕暮∈謚・        const decisionOptions = document.querySelectorAll('.decision-option');
        decisionOptions.forEach(option => {
            option.addEventListener('click', () => {
                this.selectDecision(option);
            });
        });

        // 繝ｪ繧ｻ繝・ヨ繝懊ち繝ｳ
        const resetBtn = document.getElementById('reset-quick-form');
        if (resetBtn) {
            resetBtn.addEventListener('click', () => {
                this.resetQuickForm();
            });
        }

        // 豌励▼縺阪ち繧ｰ讖溯・
        this.setupInsightTagsListeners();

        // 隧ｳ邏ｰ蜈･蜉帙・謚倥ｊ縺溘◆縺ｿ
        window.toggleDetailedInput = () => {
            const detailedCard = document.getElementById('detailed-match-card');
            detailedCard.classList.toggle('collapsed');
        };
    }

    // 繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ讀懃ｴ｢繝輔ぅ繝ｫ繧ｿ繝ｪ繝ｳ繧ｰ讖溯・縺ｮ險ｭ螳・    setupCharacterFiltering() {
        // 繝励Ξ繧､繝､繝ｼ繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ讀懃ｴ｢
        const playerSearchInput = document.getElementById('player-character-search');
        if (playerSearchInput) {
            playerSearchInput.addEventListener('input', (e) => {
                this.filterCharacters(e.target.value.toLowerCase(), '#player-character-grid');
            });
        }

        // 逶ｸ謇九く繝｣繝ｩ繧ｯ繧ｿ繝ｼ讀懃ｴ｢
        const opponentSearchInput = document.getElementById('opponent-character-search');
        if (opponentSearchInput) {
            opponentSearchInput.addEventListener('input', (e) => {
                this.filterCharacters(e.target.value.toLowerCase(), '#opponent-character-grid');
            });
        }
    }

    // 繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ繝輔ぅ繝ｫ繧ｿ繝ｪ繝ｳ繧ｰ蜃ｦ逅・    filterCharacters(searchTerm, gridSelector) {
        const grid = document.querySelector(gridSelector);
        if (!grid) return;

        const characters = grid.querySelectorAll('.char-option');
        let visibleCount = 0;

        characters.forEach(character => {
            const characterName = character.dataset.char.toLowerCase();
            const characterDisplayName = character.querySelector('.char-name').textContent.toLowerCase();

            // 繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ蜷搾ｼ郁恭隱橸ｼ峨∪縺溘・陦ｨ遉ｺ蜷搾ｼ域律譛ｬ隱橸ｼ峨〒讀懃ｴ｢
            const matches = characterName.includes(searchTerm) ||
                           characterDisplayName.includes(searchTerm);

            if (matches || searchTerm === '') {
                character.style.display = 'flex';
                visibleCount++;
            } else {
                character.style.display = 'none';
            }
        });

        // 邨先棡縺瑚ｦ九▽縺九ｉ縺ｪ縺・ｴ蜷医・繝｡繝・そ繝ｼ繧ｸ陦ｨ遉ｺ・医が繝励す繝ｧ繝ｳ・・        this.updateFilterMessage(gridSelector, visibleCount, searchTerm);
    }

    // 繝輔ぅ繝ｫ繧ｿ繝ｪ繝ｳ繧ｰ邨先棡繝｡繝・そ繝ｼ繧ｸ縺ｮ譖ｴ譁ｰ
    updateFilterMessage(gridSelector, visibleCount, searchTerm) {
        const grid = document.querySelector(gridSelector);
        if (!grid) return;

        // 譌｢蟄倥・繝｡繝・そ繝ｼ繧ｸ繧貞炎髯､
        const existingMessage = grid.querySelector('.filter-message');
        if (existingMessage) {
            existingMessage.remove();
        }

        // 讀懃ｴ｢邨先棡縺・莉ｶ縺ｧ讀懃ｴ｢隱槭′縺ゅｋ蝣ｴ蜷医↓繝｡繝・そ繝ｼ繧ｸ繧定｡ｨ遉ｺ
        if (visibleCount === 0 && searchTerm !== '') {
            const message = document.createElement('div');
            message.className = 'filter-message';
            message.innerHTML = `
                <div class="no-results-message">
                    <span class="no-results-icon">剥</span>
                    <p>"${searchTerm}" 縺ｫ荳閾ｴ縺吶ｋ繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ</p>
                </div>
            `;
            grid.appendChild(message);
        }
    }

    // 閾ｪ蛻・・繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ驕ｸ謚槫・逅・    selectCharacter(option) {
        // 莉悶・驕ｸ謚槭ｒ隗｣髯､・郁・蛻・・繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ繧ｰ繝ｪ繝・ラ縺ｮ縺ｿ・・        document.querySelectorAll('#player-character-grid .char-option').forEach(opt => {
            opt.classList.remove('selected');
        });

        // 譁ｰ縺励＞驕ｸ謚槭ｒ繧｢繧ｯ繝・ぅ繝悶↓縺吶ｋ
        option.classList.add('selected');

        // hidden input縺ｫ蛟､繧定ｨｭ螳・        document.getElementById('selected-character').value = option.dataset.char;

        this.updateSubmitButton();
    }

    // 逶ｸ謇九く繝｣繝ｩ繧ｯ繧ｿ繝ｼ驕ｸ謚槫・逅・    selectOpponent(option) {
        // 莉悶・驕ｸ謚槭ｒ隗｣髯､・育嶌謇九く繝｣繝ｩ繧ｯ繧ｿ繝ｼ繧ｰ繝ｪ繝・ラ縺ｮ縺ｿ・・        document.querySelectorAll('#opponent-character-grid .char-option').forEach(opt => {
            opt.classList.remove('selected');
        });

        // 譁ｰ縺励＞驕ｸ謚槭ｒ繧｢繧ｯ繝・ぅ繝悶↓縺吶ｋ
        option.classList.add('selected');

        // hidden input縺ｫ蛟､繧定ｨｭ螳・        document.getElementById('selected-opponent').value = option.dataset.char;

        this.updateSubmitButton();
    }

    // 繧ｹ繧ｳ繧｢驕ｸ謚槫・逅・    selectScore(option) {
        // 莉悶・驕ｸ謚槭ｒ隗｣髯､
        document.querySelectorAll('.score-option').forEach(opt => {
            opt.classList.remove('selected');
        });

        // 譁ｰ縺励＞驕ｸ謚槭ｒ繧｢繧ｯ繝・ぅ繝悶↓縺吶ｋ
        option.classList.add('selected');

        // hidden input縺ｫ蛟､繧定ｨｭ螳・        const score = option.dataset.score;
        const result = option.dataset.result || 'loss'; // data-result螻樊ｧ縺九ｉ蜿門ｾ・        document.getElementById('selected-score').value = score;
        document.getElementById('selected-result').value = result; // 邨先棡繧ゆｿ晏ｭ・
        this.updateSubmitButton();
    }

    // 豎ｺ逹譁ｹ豕暮∈謚槫・逅・    selectDecision(option) {
        // 莉悶・驕ｸ謚槭ｒ隗｣髯､
        document.querySelectorAll('.decision-option').forEach(opt => {
            opt.classList.remove('selected');
        });

        // 譁ｰ縺励＞驕ｸ謚槭ｒ繧｢繧ｯ繝・ぅ繝悶↓縺吶ｋ
        option.classList.add('selected');

        // hidden input縺ｫ蛟､繧定ｨｭ螳・        document.getElementById('selected-decision').value = option.dataset.decision;

        this.updateSubmitButton();
    }

    // 騾∽ｿ｡繝懊ち繝ｳ縺ｮ迥ｶ諷九ｒ譖ｴ譁ｰ
    updateSubmitButton() {
        const submitBtn = document.querySelector('.quick-submit-btn');
        const character = document.getElementById('selected-character').value;
        const opponent = document.getElementById('selected-opponent').value;
        const score = document.getElementById('selected-score').value;
        const decision = document.getElementById('selected-decision').value;

        const isComplete = character && opponent && score && decision;
        submitBtn.disabled = !isComplete;
    }

    // 繧ｯ繧､繝・け繝輔か繝ｼ繝繧偵Μ繧ｻ繝・ヨ
    // 豌励▼縺阪ち繧ｰ讖溯・縺ｮ繧､繝吶Φ繝医Μ繧ｹ繝翫・險ｭ螳・    setupInsightTagsListeners() {
        // 諢滓Φ蜈･蜉帙・繝・く繧ｹ繝医き繧ｦ繝ｳ繧ｿ繝ｼ
        const feelingsInput = document.getElementById('match-feelings');
        const charCountElement = document.getElementById('feelings-char-count');
        const generateTagsBtn = document.getElementById('generate-tags-btn');

        if (feelingsInput && charCountElement && generateTagsBtn) {
            feelingsInput.addEventListener('input', (e) => {
                const length = e.target.value.length;
                charCountElement.textContent = length;

                // 10譁・ｭ嶺ｻ･荳翫〒逕滓・繝懊ち繝ｳ譛牙柑蛹・                generateTagsBtn.disabled = length < 10;
                console.log(`蜈･蜉帶枚蟄玲焚: ${length}, 繝懊ち繝ｳ迥ｶ諷・ ${generateTagsBtn.disabled ? '辟｡蜉ｹ' : '譛牙柑'}`);
            });
        } else {
            console.warn('諢滓Φ蜈･蜉帙・蠢・ｦ√↑隕∫ｴ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ:', {
                feelingsInput: !!feelingsInput,
                charCountElement: !!charCountElement,
                generateTagsBtn: !!generateTagsBtn
            });
        }

        // 繧ｿ繧ｰ逕滓・繝懊ち繝ｳ・磯㍾隍・亟豁｢縺ｮ縺溘ａ縲｛nclick縺ｧ險ｭ螳夲ｼ・        if (generateTagsBtn) {
            // onclick縺ｯ蟶ｸ縺ｫ1縺､縺縺代↑縺ｮ縺ｧ驥崎､・＠縺ｪ縺・            generateTagsBtn.onclick = () => {
                console.log('繧ｿ繧ｰ逕滓・繝懊ち繝ｳ縺後け繝ｪ繝・け縺輔ｌ縺ｾ縺励◆');
                this.generateInsightTags();
            };
        } else {
            console.warn('generate-tags-btn隕∫ｴ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ');
        }

        // 繧ｿ繧ｰ蜀咲函謌舌・繧ｿ繝ｳ
        const regenerateTagsBtn = document.getElementById('regenerate-tags-btn');
        if (regenerateTagsBtn) {
            regenerateTagsBtn.onclick = () => {
                console.log('繧ｿ繧ｰ蜀咲函謌舌・繧ｿ繝ｳ縺後け繝ｪ繝・け縺輔ｌ縺ｾ縺励◆');
                this.generateInsightTags();
            };
        }

        // 繧ｿ繧ｰ謗｡逕ｨ繝懊ち繝ｳ
        const acceptTagsBtn = document.getElementById('accept-tags-btn');
        if (acceptTagsBtn) {
            acceptTagsBtn.addEventListener('click', () => {
                this.acceptGeneratedTags();
            });
        }

        // 繧ｿ繧ｰ繧ｯ繝ｪ繧｢繝懊ち繝ｳ
        const clearTagsBtn = document.getElementById('clear-tags-btn');
        if (clearTagsBtn) {
            clearTagsBtn.addEventListener('click', () => {
                this.clearGeneratedTags();
            });
        }

        // 繧ｿ繧ｰ邱ｨ髮・・繧ｿ繝ｳ
        const editTagsBtn = document.getElementById('edit-tags-btn');
        if (editTagsBtn) {
            editTagsBtn.addEventListener('click', () => {
                this.editFinalTags();
            });
        }
    }

    // 豌励▼縺阪ち繧ｰ逕滓・
    async generateInsightTags() {
        // 螟夐㍾螳溯｡後ｒ髦ｲ豁｢
        if (this._isGeneratingTags) {
            console.warn('笞・・繧ｿ繧ｰ逕滓・縺ｯ譌｢縺ｫ螳溯｡御ｸｭ縺ｧ縺・);
            return;
        }
        
        const feelingsInput = document.getElementById('match-feelings');
        // 繧ｯ繝ｭ繝ｼ繝ｳ縺ｧ鄂ｮ縺肴鋤縺医◆蠕後ｂ豁｣縺励￥蜿門ｾ励〒縺阪ｋ繧医≧縺ｫ縲∵ｯ主屓DOM縺九ｉ蜿門ｾ・        const generateBtn = document.getElementById('generate-tags-btn');
        const analysisSource = document.querySelector('input[name="analysis-source"]:checked');

        if (!feelingsInput || !feelingsInput.value.trim()) {
            this.showToast('笶・諢滓Φ繧貞・蜉帙＠縺ｦ縺上□縺輔＞', 'error');
            return;
        }
        if (!this.geminiService) {
            this.showToast('笶・AI繧ｵ繝ｼ繝薙せ縺悟・譛溷喧縺輔ｌ縺ｦ縺・∪縺帙ｓ', 'error');
            return;
        }
        if (!analysisSource) {
            this.showToast('笶・諠・ｱ繧ｽ繝ｼ繧ｹ繧帝∈謚槭＠縺ｦ縺上□縺輔＞', 'error');
            return;
        }

        let fileContent = null;
        let analysisMode = 'browsing';

        try {
            this._isGeneratingTags = true; // 繝輔Λ繧ｰ繧堤ｫ九※繧・            if (generateBtn) {
                generateBtn.disabled = true;
                generateBtn.textContent = '､・蛻・梵荳ｭ...';
            }

            if (analysisSource.value === 'file') {
                analysisMode = 'file';
                const selectedCheckboxes = document.querySelectorAll('input[name="source-file"]:checked');

                if (selectedCheckboxes.length === 0) {
                    throw new Error('蛻・梵縺ｫ菴ｿ逕ｨ縺吶ｋ繝輔ぃ繧､繝ｫ繧・縺､莉･荳企∈謚槭＠縺ｦ縺上□縺輔＞縲・);
                }

                const fileContents = [];
                let totalSize = 0;
                selectedCheckboxes.forEach(checkbox => {
                    const filename = checkbox.value;
                    const content = localStorage.getItem(`datasource-${filename}`);
                    if (content) {
                        fileContents.push(`--- Content from ${filename} ---\n${content}`);
                        totalSize += content.length;
                    }
                });

                if (fileContents.length === 0) {
                    throw new Error('驕ｸ謚槭＆繧後◆繝輔ぃ繧､繝ｫ縺ｮ隱ｭ縺ｿ霎ｼ縺ｿ縺ｫ螟ｱ謨励＠縺ｾ縺励◆縲・);
                }

                // 繝輔ぃ繧､繝ｫ繧ｵ繧､繧ｺ隴ｦ蜻奇ｼ・000譁・ｭ怜宛髯舌ｒ繝ｦ繝ｼ繧ｶ繝ｼ縺ｫ騾夂衍・・                if (totalSize > 6000) {
                    this.showToast(`笞・・驕ｸ謚槭＆繧後◆繝輔ぃ繧､繝ｫ縺ｯ${totalSize}譁・ｭ励〒縺吶・I縺ｮ蛻・梵縺ｫ縺ｯ譛蛻昴・6,000譁・ｭ励・縺ｿ縺御ｽｿ逕ｨ縺輔ｌ縺ｾ縺吶Ａ, 'warning');
                }

                fileContent = fileContents.join('\n\n');
            }

            // Gemini繧ｵ繝ｼ繝薙せ繧剃ｽｿ逕ｨ縺励※繧ｿ繧ｰ逕滓・
            const result = await this.geminiService.generateInsightTags(
                feelingsInput.value.trim(),
                analysisMode,
                fileContent
            );

            // 謗ｨ謨ｲ邨先棡縺後≠繧後・陦ｨ遉ｺ
            if (result.refinedContent) {
                this.displayRefinedContent(result.refinedContent);
            }

            // 繧ｰ繝ｩ繧ｦ繝ｳ繝・ぅ繝ｳ繧ｰ繧ｽ繝ｼ繧ｹ諠・ｱ縺後≠繧後・陦ｨ遉ｺ
            if (result.groundingSources) {
                this.displayGroundingSources(result.groundingSources);
            }

            // 逕滓・縺輔ｌ縺溘ち繧ｰ繧定｡ｨ遉ｺ
            this.displayGeneratedTags(result.tags);

            // 繧ｳ繝ｳ繝・リ繧定｡ｨ遉ｺ
            const generatedTagsContainer = document.getElementById('generated-tags-container');
            if (generatedTagsContainer) {
                generatedTagsContainer.style.display = 'block';
            }

            // 繝輔か繝ｼ繝ｫ繝舌ャ繧ｯ繝｢繝ｼ繝峨°繧ｰ繝ｩ繧ｦ繝ｳ繝・ぅ繝ｳ繧ｰ謌仙粥縺九↓蠢懊§縺ｦ繝｡繝・そ繝ｼ繧ｸ繧定｡ｨ遉ｺ
            if (result.fallbackMode) {
                this.showToast('笨・謗ｨ謨ｲ繝ｻAI蛻・梵繧貞ｮ御ｺ・＠縺ｾ縺励◆・磯壼ｸｸ繝｢繝ｼ繝会ｼ・, 'success');
            } else if (result.groundingSources && result.groundingSources.totalSources > 0) {
                this.showToast(`笨・謗ｨ謨ｲ繝ｻ蛻・梵螳御ｺ・ｼ亥盾閠・ュ蝣ｱ${result.groundingSources.totalSources}莉ｶ・荏, 'success');
            } else {
                this.showToast('笨・謗ｨ謨ｲ繝ｻAI蛻・梵繧貞ｮ御ｺ・＠縺ｾ縺励◆', 'success');
            }

        } catch (error) {
            console.error('繧ｿ繧ｰ逕滓・繧ｨ繝ｩ繝ｼ:', error);
            this.showToast('笶・繧ｿ繧ｰ逕滓・縺ｫ螟ｱ謨励＠縺ｾ縺励◆: ' + error.message, 'error');
        } finally {
            this._isGeneratingTags = false; // 繝輔Λ繧ｰ繧定ｧ｣髯､
            // 繝懊ち繝ｳ繧貞・蠎ｦ蜿門ｾ励＠縺ｦ迥ｶ諷九ｒ譖ｴ譁ｰ
            const finalBtn = document.getElementById('generate-tags-btn');
            if (finalBtn) {
                finalBtn.disabled = false;
                finalBtn.textContent = '､・AI縺ｧ繧ｿ繧ｰ逕滓・';
            }
        }
    }

    // 謗ｨ謨ｲ邨先棡繧定｡ｨ遉ｺ
    displayRefinedContent(refinedContent) {
        // 謗ｨ謨ｲ邨先棡繧定｡ｨ遉ｺ縺吶ｋ隕∫ｴ繧貞虚逧・↓菴懈・
        let refinedDisplay = document.getElementById('refined-content-display');
        if (!refinedDisplay) {
            refinedDisplay = document.createElement('div');
            refinedDisplay.id = 'refined-content-display';
            refinedDisplay.className = 'refined-content-display';

            // generated-tags-container縺ｮ蜑阪↓謖ｿ蜈･
            const generatedContainer = document.getElementById('generated-tags-container');
            generatedContainer.parentNode.insertBefore(refinedDisplay, generatedContainer);
        }

        refinedDisplay.innerHTML = `
            <div class="refined-header">
                <h5>剥 AI蛻・梵邨先棡</h5>
                <button type="button" class="btn-text" onclick="this.parentElement.parentElement.style.display='none'">
                    笨・髢峨§繧・                </button>
            </div>
            <div class="refined-content">
                <div class="refined-section">
                    <strong>讒矩蛹悶＆繧後◆蜀・ｮｹ:</strong>
                    <p>${refinedContent.structuredContent}</p>
                </div>
                ${refinedContent.extractedElements && refinedContent.extractedElements.length > 0 ? `
                <div class="refined-section">
                    <strong>謚ｽ蜃ｺ縺輔ｌ縺溯ｦ∫ｴ:</strong>
                    <ul>
                        ${refinedContent.extractedElements.map(element => `<li>${element}</li>`).join('')}
                    </ul>
                </div>
                ` : ''}
                ${refinedContent.keyPoints && refinedContent.keyPoints.length > 0 ? `
                <div class="refined-section">
                    <strong>驥崎ｦ√・繧､繝ｳ繝・</strong>
                    <ul>
                        ${refinedContent.keyPoints.map(point => `<li>${point}</li>`).join('')}
                    </ul>
                </div>
                ` : ''}
                ${refinedContent.metaInsights && refinedContent.metaInsights.length > 0 ? `
                <div class="refined-section">
                    <strong>倹 譛譁ｰ繝｡繧ｿ諠・ｱ:</strong>
                    <ul>
                        ${refinedContent.metaInsights.map(insight => `<li>${insight}</li>`).join('')}
                    </ul>
                </div>
                ` : ''}
            </div>
        `;

        refinedDisplay.style.display = 'block';
    }

    // 讀懃ｴ｢繧ｽ繝ｼ繧ｹ諠・ｱ繧定｡ｨ遉ｺ
    displayGroundingSources(groundingSources) {
        // 讀懃ｴ｢繧ｽ繝ｼ繧ｹ陦ｨ遉ｺ隕∫ｴ繧貞虚逧・↓菴懈・
        let sourcesDisplay = document.getElementById('grounding-sources-display');
        if (!sourcesDisplay) {
            sourcesDisplay = document.createElement('div');
            sourcesDisplay.id = 'grounding-sources-display';
            sourcesDisplay.className = 'grounding-sources-display';

            // refined-content-display縺ｮ蠕後↓謖ｿ蜈･
            const refinedDisplay = document.getElementById('refined-content-display');
            if (refinedDisplay) {
                refinedDisplay.parentNode.insertBefore(sourcesDisplay, refinedDisplay.nextSibling);
            } else {
                const generatedContainer = document.getElementById('generated-tags-container');
                generatedContainer.parentNode.insertBefore(sourcesDisplay, generatedContainer);
            }
        }

        sourcesDisplay.innerHTML = `
            <div class="sources-header">
                <h5>答 蜿り・↓縺励◆諠・ｱ貅・(${groundingSources.totalSources}莉ｶ)</h5>
                <button type="button" class="btn-text" onclick="this.parentElement.parentElement.style.display='none'">
                    笨・髢峨§繧・                </button>
            </div>
            <div class="sources-content">
                ${groundingSources.sources.map(source => `
                    <div class="source-item">
                        <div class="source-title">
                            <a href="${source.url}" target="_blank" rel="noopener">
                                ${source.title}
                            </a>
                        </div>
                        ${source.snippet ? `<div class="source-snippet">${source.snippet}</div>` : ''}
                    </div>
                `).join('')}
            </div>
        `;

        sourcesDisplay.style.display = 'block';
    }

    // 逕滓・縺輔ｌ縺溘ち繧ｰ繧定｡ｨ遉ｺ
    displayGeneratedTags(tags) {
        const tagsList = document.getElementById('generated-tags-list');
        if (!tagsList) return;

        tagsList.innerHTML = '';

        tags.forEach(tag => {
            const tagElement = document.createElement('span');
            tagElement.className = 'insight-tag generated-tag';
            tagElement.textContent = tag;
            tagsList.appendChild(tagElement);
        });
    }

    // 逕滓・縺輔ｌ縺溘ち繧ｰ繧呈治逕ｨ
    acceptGeneratedTags() {
        const generatedTags = document.querySelectorAll('#generated-tags-list .generated-tag');
        const tags = Array.from(generatedTags).map(tag => tag.textContent);

        // 譛邨ゅち繧ｰ縺ｨ縺励※險ｭ螳・        this.setFinalTags(tags);

        // 繧ｳ繝ｳ繝・リ繧貞・繧頑崛縺・        document.getElementById('generated-tags-container').style.display = 'none';
        document.getElementById('final-tags-container').style.display = 'block';

        // hidden繝輔ぅ繝ｼ繝ｫ繝峨↓菫晏ｭ・        document.getElementById('selected-tags').value = tags.join(',');
        document.getElementById('match-feelings-hidden').value = document.getElementById('match-feelings').value;
    }

    // 逕滓・縺輔ｌ縺溘ち繧ｰ繧偵け繝ｪ繧｢
    clearGeneratedTags() {
        document.getElementById('generated-tags-container').style.display = 'none';
        document.getElementById('generated-tags-list').innerHTML = '';
    }

    // 譛邨ゅち繧ｰ繧定ｨｭ螳・    setFinalTags(tags) {
        const finalTagsList = document.getElementById('final-tags-list');
        if (!finalTagsList) return;

        finalTagsList.innerHTML = '';

        tags.forEach(tag => {
            const tagElement = document.createElement('span');
            tagElement.className = 'insight-tag final-tag';
            tagElement.textContent = tag;
            finalTagsList.appendChild(tagElement);
        });
    }

    // 譛邨ゅち繧ｰ繧堤ｷｨ髮・    editFinalTags() {
        // 譛邨ゅち繧ｰ繧ｳ繝ｳ繝・リ繧帝撼陦ｨ遉ｺ縺ｫ縺励※逕滓・縺輔ｌ縺溘ち繧ｰ繧ｳ繝ｳ繝・リ繧貞・陦ｨ遉ｺ
        document.getElementById('final-tags-container').style.display = 'none';
        document.getElementById('generated-tags-container').style.display = 'block';

        // hidden繝輔ぅ繝ｼ繝ｫ繝峨ｒ繧ｯ繝ｪ繧｢
        document.getElementById('selected-tags').value = '';
    }

    resetQuickForm() {
        // 驕ｸ謚樒憾諷九ｒ繝ｪ繧ｻ繝・ヨ
        document.querySelectorAll('.char-option, .score-option, .decision-option').forEach(opt => {
            opt.classList.remove('selected');
        });

        // hidden input繧偵Μ繧ｻ繝・ヨ
        document.getElementById('selected-character').value = '';
        document.getElementById('selected-opponent').value = '';
        document.getElementById('selected-score').value = '';
        document.getElementById('selected-decision').value = '';
        document.getElementById('selected-tags').value = '';
        document.getElementById('match-feelings-hidden').value = '';

        // 豌励▼縺阪ち繧ｰ髢｢騾｣繧ゅΜ繧ｻ繝・ヨ
        const feelingsInput = document.getElementById('match-feelings');
        if (feelingsInput) {
            feelingsInput.value = '';
            document.getElementById('feelings-char-count').textContent = '0';
        }

        document.getElementById('generated-tags-container').style.display = 'none';
        document.getElementById('final-tags-container').style.display = 'none';
        document.getElementById('generate-tags-btn').disabled = true;

        this.updateSubmitButton();
    }

    // === 縺ｾ縺ｨ繧√※蜈･蜉帶ｩ溯・・医せ繧ｯ繝ｪ繝ｼ繝ｳ繧ｷ繝ｧ繝・ヨ繧｢繝・・繝ｭ繝ｼ繝会ｼ・===

    // 縺ｾ縺ｨ繧√※蜈･蜉帙・繧､繝吶Φ繝医Μ繧ｹ繝翫・繧定ｨｭ螳・    setupBatchInputListeners() {
        const selectBtn = document.getElementById('select-screenshot-btn');
        const fileInput = document.getElementById('batch-screenshot-input');
        const clearFileBtn = document.getElementById('clear-file-btn');
        const saveBatchBtn = document.getElementById('save-batch-data-btn');
        const cancelBatchBtn = document.getElementById('cancel-batch-btn');

        // 繧ｹ繧ｯ繝ｪ繝ｼ繝ｳ繧ｷ繝ｧ繝・ヨ驕ｸ謚槭・繧ｿ繝ｳ
        if (selectBtn && fileInput) {
            selectBtn.addEventListener('click', () => {
                fileInput.click();
            });

            fileInput.addEventListener('change', async (e) => {
                const file = e.target.files[0];
                if (file) {
                    await this.handleScreenshotUpload(file);
                }
            });
        }

        // 繝輔ぃ繧､繝ｫ繧ｯ繝ｪ繧｢繝懊ち繝ｳ
        if (clearFileBtn) {
            clearFileBtn.addEventListener('click', () => {
                this.clearBatchInput();
            });
        }

        // 繝・・繧ｿ菫晏ｭ倥・繧ｿ繝ｳ
        if (saveBatchBtn) {
            saveBatchBtn.addEventListener('click', () => {
                this.saveBatchMatchData();
            });
        }

        // 繧ｭ繝｣繝ｳ繧ｻ繝ｫ繝懊ち繝ｳ
        if (cancelBatchBtn) {
            cancelBatchBtn.addEventListener('click', () => {
                this.clearBatchInput();
            });
        }
    }

    // 繧ｹ繧ｯ繝ｪ繝ｼ繝ｳ繧ｷ繝ｧ繝・ヨ繧｢繝・・繝ｭ繝ｼ繝牙・逅・    async handleScreenshotUpload(file) {
        console.log('萄 繧ｹ繧ｯ繝ｪ繝ｼ繝ｳ繧ｷ繝ｧ繝・ヨ繧｢繝・・繝ｭ繝ｼ繝・', file.name);

        // 繝輔ぃ繧､繝ｫ諠・ｱ繧定｡ｨ遉ｺ
        const fileInfo = document.getElementById('selected-file-info');
        const fileName = document.getElementById('file-name');
        if (fileInfo && fileName) {
            fileName.textContent = file.name;
            fileInfo.style.display = 'flex';
        }

        // 繝ｭ繝ｼ繝・ぅ繝ｳ繧ｰ陦ｨ遉ｺ
        const loadingEl = document.getElementById('batch-loading');
        const previewSection = document.getElementById('batch-preview-section');
        if (loadingEl) loadingEl.style.display = 'block';
        if (previewSection) previewSection.style.display = 'none';

        try {
            // Gemini API縺ｧ逕ｻ蜒上ｒ蛻・梵
            const result = await window.geminiService.analyzeMatchImage(file);
            
            console.log('笨・逕ｻ蜒丞・譫千ｵ先棡:', result);

            // 謚ｽ蜃ｺ繝・・繧ｿ繧剃ｿ晏ｭ假ｼ・ataType繧ょ性繧√ｋ・・            this.batchMatchData = result.matches;
            this.batchDataType = result.dataType || 'unknown';

            // 繝励Ξ繝薙Η繝ｼ繧定｡ｨ遉ｺ
            this.displayBatchDataPreview(result.matches, this.batchDataType);

            // 繝ｭ繝ｼ繝・ぅ繝ｳ繧ｰ繧帝撼陦ｨ遉ｺ縲√・繝ｬ繝薙Η繝ｼ繧定｡ｨ遉ｺ
            if (loadingEl) loadingEl.style.display = 'none';
            if (previewSection) previewSection.style.display = 'block';

            this.showToast('繝・・繧ｿ繧呈ｭ｣蟶ｸ縺ｫ謚ｽ蜃ｺ縺励∪縺励◆・・, 'success');

        } catch (error) {
            console.error('笶・逕ｻ蜒丞・譫舌お繝ｩ繝ｼ:', error);
            
            if (loadingEl) loadingEl.style.display = 'none';
            
            this.showToast('逕ｻ蜒上・蛻・梵縺ｫ螟ｱ謨励＠縺ｾ縺励◆: ' + error.message, 'error');
            this.clearBatchInput();
        }
    }

    // 繝舌ャ繝√ョ繝ｼ繧ｿ繝励Ξ繝薙Η繝ｼ繧定｡ｨ遉ｺ
    displayBatchDataPreview(matches, dataType = 'unknown') {
        const previewContainer = document.getElementById('batch-data-preview');
        if (!previewContainer) return;

        previewContainer.innerHTML = '';

        if (!matches || matches.length === 0) {
            previewContainer.innerHTML = '<p class="no-data">繝・・繧ｿ縺梧歓蜃ｺ縺ｧ縺阪∪縺帙ｓ縺ｧ縺励◆</p>';
            return;
        }

        // 繝・・繧ｿ繧ｿ繧､繝励・繝倥ャ繝繝ｼ繧定ｿｽ蜉
        const dataTypeHeader = document.createElement('div');
        dataTypeHeader.className = 'data-type-header';
        const dataTypeLabel = dataType === 'player_characters' ? '投 菴ｿ逕ｨ繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ蛻･謌千ｸｾ' 
                             : dataType === 'opponent_characters' ? '識 蟇ｾ謌ｦ逶ｸ謇句挨謌千ｸｾ' 
                             : '笶・蠖｢蠑丈ｸ肴・';
        const dataTypeClass = dataType === 'player_characters' ? 'player-data' 
                            : dataType === 'opponent_characters' ? 'opponent-data' 
                            : 'unknown-data';
        dataTypeHeader.innerHTML = `
            <div class="data-type-badge ${dataTypeClass}">
                <span class="badge-icon">${dataType === 'player_characters' ? '投' : dataType === 'opponent_characters' ? '識' : '笶・}</span>
                <span class="badge-text">${dataTypeLabel}</span>
            </div>
        `;
        previewContainer.appendChild(dataTypeHeader);

        // ALL繧帝勁螟悶＠縺ｦ繝輔ぅ繝ｫ繧ｿ繝ｪ繝ｳ繧ｰ
        const filteredMatches = matches.filter(match => {
            const charName = match.character.toUpperCase();
            return charName !== 'ALL' && match.totalMatches > 0;
        });

        if (filteredMatches.length === 0) {
            previewContainer.innerHTML += '<p class="no-data">菫晏ｭ伜庄閭ｽ縺ｪ繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ繝・・繧ｿ縺後≠繧翫∪縺帙ｓ縺ｧ縺励◆</p>';
            return;
        }

        const table = document.createElement('table');
        table.className = 'batch-data-table';
        
        // 繝倥ャ繝繝ｼ
        const thead = document.createElement('thead');
        thead.innerHTML = `
            <tr>
                <th>繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ</th>
                <th>隧ｦ蜷域焚</th>
                <th>蜍晉紫</th>
                <th>蜍晏茜謨ｰ</th>
            </tr>
        `;
        table.appendChild(thead);

        // 繝・・繧ｿ陦鯉ｼ・LL繧帝勁螟厄ｼ・        const tbody = document.createElement('tbody');
        filteredMatches.forEach(match => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td><strong>${match.character}</strong></td>
                <td>${match.totalMatches}隧ｦ蜷・/td>
                <td>${match.winRate.toFixed(2)}%</td>
                <td>${match.wins}蜍・/td>
            `;
            tbody.appendChild(row);
        });
        table.appendChild(tbody);

        previewContainer.appendChild(table);

        // 繧ｵ繝槭Μ繝ｼ諠・ｱ・・LL縺ｮ繝・・繧ｿ繧剃ｽｿ逕ｨ縺励※豁｣遒ｺ縺ｪ邱剰ｩｦ蜷域焚繧定｡ｨ遉ｺ・・        const summary = document.createElement('div');
        summary.className = 'batch-summary';
        
        // ALL繝・・繧ｿ縺後≠繧後・縺昴ｌ繧堤ｷ剰ｩｦ蜷域焚縺ｨ縺励※菴ｿ逕ｨ縲√↑縺代ｌ縺ｰ蜷・く繝｣繝ｩ縺ｮ蜷郁ｨ・        const allData = matches.find(m => m.character.toUpperCase() === 'ALL');
        const totalMatches = allData ? allData.totalMatches : filteredMatches.reduce((sum, m) => sum + m.totalMatches, 0);
        const totalWins = allData ? allData.wins : filteredMatches.reduce((sum, m) => sum + m.wins, 0);
        const avgWinRate = totalMatches > 0 ? (totalWins / totalMatches * 100).toFixed(2) : 0;
        
        summary.innerHTML = `
            <div class="summary-item">
                <span class="summary-label">繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ謨ｰ:</span>
                <span class="summary-value">${filteredMatches.length}</span>
            </div>
            <div class="summary-item">
                <span class="summary-label">邱剰ｩｦ蜷域焚:</span>
                <span class="summary-value">${totalMatches}隧ｦ蜷・/span>
            </div>
            <div class="summary-item">
                <span class="summary-label">邱丞粋蜍晉紫:</span>
                <span class="summary-value">${avgWinRate}%</span>
            </div>
        `;
        previewContainer.appendChild(summary);

        // 蜈・・繝・・繧ｿ縺ｫALL縺悟性縺ｾ繧後※縺・◆蝣ｴ蜷医・豕ｨ諢上Γ繝・そ繝ｼ繧ｸ
        if (allData) {
            const note = document.createElement('p');
            note.className = 'batch-note';
            note.innerHTML = `庁 邱剰ｩｦ蜷域焚 ${totalMatches}隧ｦ蜷茨ｼ亥享邇・${avgWinRate}%・峨・縲窟LL縲阪°繧牙叙蠕励＆繧後∪縺励◆縲ょ句挨繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ繝・・繧ｿ縺ｮ縺ｿ菫晏ｭ倥＆繧後∪縺吶Ａ;
            previewContainer.appendChild(note);
        }
    }

    // 繝舌ャ繝√・繝・メ繝・・繧ｿ繧剃ｿ晏ｭ・    saveBatchMatchData() {
        if (!this.batchMatchData || this.batchMatchData.length === 0) {
            this.showToast('菫晏ｭ倥☆繧九ョ繝ｼ繧ｿ縺後≠繧翫∪縺帙ｓ', 'error');
            return;
        }

        try {
            // 譌｢蟄倥・繧ｮ繝｣繝ｩ繝ｪ繝ｼ繝・・繧ｿ繧貞叙蠕・            const galleryData = JSON.parse(localStorage.getItem('sf6_gallery') || '[]');
            
            // 迴ｾ蝨ｨ縺ｮ譌･譎・            const timestamp = new Date().toISOString();
            
            // ALL縺ｨ隧ｦ蜷域焚0繧帝勁螟悶＠縺ｦ繝輔ぅ繝ｫ繧ｿ繝ｪ繝ｳ繧ｰ
            const validMatches = this.batchMatchData.filter(match => {
                const charName = match.character.toUpperCase();
                return charName !== 'ALL' && match.totalMatches > 0;
            });

            if (validMatches.length === 0) {
                this.showToast('菫晏ｭ伜庄閭ｽ縺ｪ繝・・繧ｿ縺後≠繧翫∪縺帙ｓ縺ｧ縺励◆', 'warning');
                return;
            }

            let savedCount = 0;
            
            // 蜷・く繝｣繝ｩ繧ｯ繧ｿ繝ｼ縺ｮ繝・・繧ｿ繧偵ぐ繝｣繝ｩ繝ｪ繝ｼ縺ｫ霑ｽ蜉
            validMatches.forEach(match => {

                // 蜍晏茜縺ｨ謨怜圏縺ｫ蛻・￠縺ｦ隧ｦ蜷医ョ繝ｼ繧ｿ繧剃ｽ懈・
                const wins = match.wins;
                const losses = match.totalMatches - match.wins;

                // 蜍晏茜隧ｦ蜷医ｒ霑ｽ蜉
                for (let i = 0; i < wins; i++) {
                    const matchEntry = {
                        id: `batch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                        timestamp: timestamp,
                        date: new Date().toLocaleDateString('ja-JP'),
                        playerCharacter: match.character,
                        character: match.character,
                        opponentCharacter: 'Unknown', // 蟇ｾ謌ｦ逶ｸ謇九・荳肴・
                        opponent: 'Unknown',
                        result: 'WIN',
                        score: '3-0', // 繧ｹ繧ｳ繧｢縺ｯ荳肴・縺ｮ縺溘ａ繝・ヵ繧ｩ繝ｫ繝・                        roundsWon: 3,
                        roundsLost: 0,
                        decision: 'unknown',
                        source: 'batch_screenshot',
                        insightTags: ['#荳諡ｬ蜈･蜉・],
                        feelings: '繧ｹ繧ｯ繝ｪ繝ｼ繝ｳ繧ｷ繝ｧ繝・ヨ縺九ｉ荳諡ｬ蜈･蜉帙＆繧後◆繝・・繧ｿ'
                    };
                    galleryData.push(matchEntry);
                    savedCount++;
                }

                // 謨怜圏隧ｦ蜷医ｒ霑ｽ蜉
                for (let i = 0; i < losses; i++) {
                    const matchEntry = {
                        id: `batch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                        timestamp: timestamp,
                        date: new Date().toLocaleDateString('ja-JP'),
                        playerCharacter: match.character,
                        character: match.character,
                        opponentCharacter: 'Unknown',
                        opponent: 'Unknown',
                        result: 'LOSS',
                        score: '0-3',
                        roundsWon: 0,
                        roundsLost: 3,
                        decision: 'unknown',
                        source: 'batch_screenshot',
                        insightTags: ['#荳諡ｬ蜈･蜉・],
                        feelings: '繧ｹ繧ｯ繝ｪ繝ｼ繝ｳ繧ｷ繝ｧ繝・ヨ縺九ｉ荳諡ｬ蜈･蜉帙＆繧後◆繝・・繧ｿ'
                    };
                    galleryData.push(matchEntry);
                    savedCount++;
                }
            });

            // 繝ｭ繝ｼ繧ｫ繝ｫ繧ｹ繝医Ξ繝ｼ繧ｸ縺ｫ菫晏ｭ・            localStorage.setItem('sf6_gallery', JSON.stringify(galleryData));

            // 繝繝・す繝･繝懊・繝峨ｒ譖ｴ譁ｰ
            this.loadDashboard();
            
            // 繧ｮ繝｣繝ｩ繝ｪ繝ｼ繧よ峩譁ｰ・育樟蝨ｨ繧ｮ繝｣繝ｩ繝ｪ繝ｼ繝壹・繧ｸ縺ｫ縺・ｋ蝣ｴ蜷茨ｼ・            const currentPage = document.querySelector('.page.active');
            if (currentPage && currentPage.id === 'gallery') {
                this.loadGallery();
            }

            // 騾｣蜍晁ｨ倬鹸繧偵Μ繧ｻ繝・ヨ
            this.resetWinStreak();

            // 謌仙粥繝｡繝・そ繝ｼ繧ｸ・亥ｮ滄圀縺ｫ菫晏ｭ倥＆繧後◆隧ｦ蜷域焚縺ｨ繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ謨ｰ繧定｡ｨ遉ｺ・・            const characterCount = validMatches.length;
            this.showToast(
                `笨・${characterCount}繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ縲∝粋險・{savedCount}隧ｦ蜷医・繝・・繧ｿ繧剃ｿ晏ｭ倥＠縺ｾ縺励◆・―n騾｣蜍晁ｨ倬鹸縺ｯ繝ｪ繧ｻ繝・ヨ縺輔ｌ縺ｾ縺励◆縲Ａ,
                'success'
            );

            // 蜈･蜉帙ｒ繧ｯ繝ｪ繧｢
            this.clearBatchInput();

        } catch (error) {
            console.error('笶・繝舌ャ繝√ョ繝ｼ繧ｿ菫晏ｭ倥お繝ｩ繝ｼ:', error);
            this.showToast('繝・・繧ｿ縺ｮ菫晏ｭ倥↓螟ｱ謨励＠縺ｾ縺励◆: ' + error.message, 'error');
        }
    }

    // 繝舌ャ繝∝・蜉帙ｒ繧ｯ繝ｪ繧｢
    clearBatchInput() {
        // 繝輔ぃ繧､繝ｫ蜈･蜉帙ｒ繝ｪ繧ｻ繝・ヨ
        const fileInput = document.getElementById('batch-screenshot-input');
        if (fileInput) {
            fileInput.value = '';
        }

        // 繝輔ぃ繧､繝ｫ諠・ｱ繧帝撼陦ｨ遉ｺ
        const fileInfo = document.getElementById('selected-file-info');
        if (fileInfo) {
            fileInfo.style.display = 'none';
        }

        // 繝励Ξ繝薙Η繝ｼ繧帝撼陦ｨ遉ｺ
        const previewSection = document.getElementById('batch-preview-section');
        if (previewSection) {
            previewSection.style.display = 'none';
        }

        // 繝ｭ繝ｼ繝・ぅ繝ｳ繧ｰ繧帝撼陦ｨ遉ｺ
        const loadingEl = document.getElementById('batch-loading');
        if (loadingEl) {
            loadingEl.style.display = 'none';
        }

        // 繝・・繧ｿ繧偵け繝ｪ繧｢
        this.batchMatchData = null;
    }

    // 繧ｯ繧､繝・け隧ｦ蜷亥・蜉帙・騾∽ｿ｡蜃ｦ逅・    handleQuickMatchSubmit() {
        const character = document.getElementById('selected-character').value;
        const opponent = document.getElementById('selected-opponent').value;
        const score = document.getElementById('selected-score').value;
        const decision = document.getElementById('selected-decision').value;

        // 豌励▼縺阪ち繧ｰ繝・・繧ｿ繧貞叙蠕・        const insightTags = document.getElementById('selected-tags').value;
        const feelings = document.getElementById('match-feelings-hidden').value;

        // 繧ｹ繧ｳ繧｢縺ｨ邨先棡繧貞叙蠕暦ｼ・ata-result螻樊ｧ縺九ｉ・・        const selectedScoreOption = document.querySelector(`.score-option[data-score="${score}"]`);
        const result = selectedScoreOption ? selectedScoreOption.dataset.result : 'loss';
        const [roundsWon, roundsLost] = score.split('-').map(num => parseInt(num));

        const matchData = {
            result: result.toUpperCase(),
            character: character,
            playerCharacter: character,
            opponentCharacter: opponent,
            roundsWon: roundsWon,
            roundsLost: roundsLost,
            duration: 3, // 繝・ヵ繧ｩ繝ｫ繝・蛻・            decision: decision, // 豎ｺ逹譁ｹ豕輔ｒ霑ｽ蜉
            insightTags: insightTags ? insightTags.split(',').filter(tag => tag.trim()) : [], // 豌励▼縺阪ち繧ｰ驟榊・
            feelings: feelings || '', // 繝励Ξ繧､繝､繝ｼ縺ｮ諢滓Φ
            timestamp: Date.now()
        };

        // 蛻・梵邨先棡縺ｮ陦ｨ遉ｺ
        this.analyzeMatch(matchData);

        // 隧ｦ蜷医ｒ菫晏ｭ倥＠縲√ム繝・す繝･繝懊・繝臥ｵｱ險医ｒ譖ｴ譁ｰ
        this.storeMatchAndRefresh(matchData);

        // 騾｣蜍晁ｨ倬鹸繧呈峩譁ｰ
        this.updateWinStreak(matchData.result);

        // 繝輔か繝ｼ繝繧偵Μ繧ｻ繝・ヨ
        this.resetQuickForm();

        this.showToast('･・隧ｦ蜷医′險倬鹸縺輔ｌ縺ｾ縺励◆・・, 'success');
    }

    // 蛻・梵繝壹・繧ｸ縺ｮ蜈･蜉帙ｒ繝ｭ繝ｼ繧ｫ繝ｫ縺ｫ菫晏ｭ倥＠縲√ム繝・す繝･繝懊・繝峨ｒ譖ｴ譁ｰ
    storeMatchAndRefresh(matchData) {
        try {
            // 菫晏ｭ倥ヵ繧ｩ繝ｼ繝槭ャ繝医∈謨ｴ蠖｢・医く繝｣繝ｩ繧ｯ繧ｿ繝ｼ繝ｻ繝ｩ繧ｦ繝ｳ繝画ュ蝣ｱ縺ｮ縺ｿ・・            const newMatch = {
                id: Date.now(),
                result: matchData.result || 'WIN',
                character: matchData.character || 'Unknown',
                // 繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ繝ｻ繝ｩ繧ｦ繝ｳ繝臥ｵ先棡謖・ｨ・                playerCharacter: matchData.playerCharacter || 'Unknown',
                opponentCharacter: matchData.opponentCharacter || 'Unknown',
                roundsWon: matchData.roundsWon || 0,
                roundsLost: matchData.roundsLost || 0,
                rounds: `${matchData.roundsWon || 0}-${matchData.roundsLost || 0}`,
                duration: matchData.duration || 1,
                date: new Date().toISOString().split('T')[0],
                gameMode: 'Ranked'
            };

            // 逶ｴ霑題ｩｦ蜷医∈霑ｽ蜉・域怙螟ｧ50莉ｶ・・            const matches = JSON.parse(localStorage.getItem('recentMatches') || '[]');
            matches.unshift(newMatch);
            if (matches.length > 50) matches.length = 50;
            localStorage.setItem('recentMatches', JSON.stringify(matches));
            
            // sf6_gallery縺ｫ繧ゆｿ晏ｭ假ｼ育ｵｱ荳繧ｹ繝医Ξ繝ｼ繧ｸ・・            const galleryData = JSON.parse(localStorage.getItem('sf6_gallery') || '[]');
            galleryData.unshift(newMatch);
            localStorage.setItem('sf6_gallery', JSON.stringify(galleryData));

            // 蝓ｺ譛ｬ邨ｱ險医・險育ｮ暦ｼ亥享邇・・縺ｿ・・            const totalMatches = matches.length;
            const wins = matches.filter(m => (m.result || '').toUpperCase() === 'WIN').length;
            const winRate = totalMatches ? +(((wins / totalMatches) * 100).toFixed(1)) : 0;

            const updatedStats = {
                winRate,
                gamesPlayed: totalMatches
            };

            if (this.playerStatsManager) {
                this.playerStatsManager.savePlayerStats(updatedStats);
                // UI繧貞叉譎よ峩譁ｰ
                this.playerStatsManager.loadStatsToUI();
                this.playerStatsManager.loadRecentMatches();
            } else {
                localStorage.setItem('playerStats', JSON.stringify(updatedStats));
                this.loadRecentMatches();
                // 謇句虚縺ｧUI縺ｸ蜿肴丐
                const winRateEl = document.getElementById('win-rate');
                const gamesPlayedEl = document.getElementById('games-played');
                if (winRateEl) winRateEl.textContent = `${winRate}%`;
                if (gamesPlayedEl) gamesPlayedEl.textContent = `${totalMatches}`;
            }

            // 繧ｰ繝ｩ繝輔ｒ譖ｴ譁ｰ
            this.renderWinRateTrendChart();
            this.renderCharacterUsageChart();
        } catch (e) {
            console.warn('Failed to store match and refresh stats:', e);
        }
    }
    
    // API險ｭ螳壻ｿ晏ｭ・    handleApiSave() {
        const provider = document.getElementById('api-provider').value;
        const apiKey = document.getElementById('api-key').value;
        const model = document.getElementById('api-model').value;
        
        if (this.aiService) {
            this.aiService.saveConfiguration(provider, apiKey, model);
        } else {
            localStorage.setItem('ai_provider', provider);
            localStorage.setItem('ai_api_key', apiKey);
            localStorage.setItem('ai_model', model);
        }
        
        this.updateApiStatus(true);
        this.showToast('API險ｭ螳壹ｒ菫晏ｭ倥＠縺ｾ縺励◆', 'success');
    }
    
    // API謗･邯壹ユ繧ｹ繝・    async testApiConnection() {
        this.showLoading();
        
        setTimeout(() => {
            this.hideLoading();
            if (Math.random() > 0.5) {
                this.showToast('API謗･邯壽・蜉・, 'success');
            } else {
                this.showToast('API謗･邯壼､ｱ謨・ 繧ｭ繝ｼ繧堤｢ｺ隱阪＠縺ｦ縺上□縺輔＞', 'error');
            }
        }, 1000);
    }
    
    // API險ｭ螳壹け繝ｪ繧｢
    clearApiSettings() {
        if (this.aiService) {
            this.aiService.clearConfiguration();
        } else {
            localStorage.removeItem('ai_provider');
            localStorage.removeItem('ai_api_key');
            localStorage.removeItem('ai_model');
        }
        
        document.getElementById('api-key').value = '';
        this.updateApiStatus(false);
        this.showToast('API險ｭ螳壹ｒ繧ｯ繝ｪ繧｢縺励∪縺励◆', 'info');
    }
    
    // API迥ｶ諷区峩譁ｰ
    updateApiStatus(isConfigured) {
        const statusIndicator = document.querySelector('.status-indicator');
        const statusText = document.querySelector('.status-text');
        
        if (statusIndicator && statusText) {
            if (isConfigured) {
                statusIndicator.classList.remove('offline');
                statusIndicator.classList.add('online');
                statusText.textContent = 'API險ｭ螳壽ｸ医∩';
            } else {
                statusIndicator.classList.remove('online');
                statusIndicator.classList.add('offline');
                statusText.textContent = 'API譛ｪ險ｭ螳・;
            }
        }
    }
    
    // 繝√Ε繝ｼ繝亥・譛溷喧
    initCharts() {
        // 繝繝・す繝･繝懊・繝峨・繝ｼ繧ｸ縺ｫ驕ｷ遘ｻ縺励◆譎ゅ↓繧ｰ繝ｩ繝輔ｒ謠冗判
        this.renderWinRateTrendChart();
        this.renderCharacterUsageChart();
    }

    // 蜍晉紫繝医Ξ繝ｳ繝峨げ繝ｩ繝輔・謠冗判
    renderWinRateTrendChart() {
        const canvas = document.getElementById('performance-chart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');

        // 譌｢蟄倥・繝√Ε繝ｼ繝医ｒ遐ｴ譽・        if (this.winRateTrendChart) {
            this.winRateTrendChart.destroy();
        }

        // 荳｡譁ｹ縺ｮ繧ｹ繝医Ξ繝ｼ繧ｸ縺九ｉ繝・・繧ｿ繧貞叙蠕励＠縺ｦ繝槭・繧ｸ
        const sf6Gallery = JSON.parse(localStorage.getItem('sf6_gallery') || '[]');
        const recentMatches = JSON.parse(localStorage.getItem('recentMatches') || '[]');
        
        // 驥崎､・ｒ謗帝勁縺励※繝槭・繧ｸ
        const matchesMap = new Map();
        [...sf6Gallery, ...recentMatches].forEach(match => {
            if (match.id) {
                matchesMap.set(match.id, match);
            }
        });
        
        const matches = Array.from(matchesMap.values())
            .sort((a, b) => (b.id || 0) - (a.id || 0)); // 譁ｰ縺励＞鬆・
        if (matches.length === 0) {
            // 繝・・繧ｿ縺後↑縺・ｴ蜷医・遨ｺ縺ｮ繧ｰ繝ｩ繝輔ｒ陦ｨ遉ｺ
            ctx.font = '20px sans-serif';
            ctx.fillStyle = '#e94560';
            ctx.textAlign = 'center';
            ctx.fillText('統 險倬鹸縺励ｈ縺・ｼ・, canvas.width / 2, canvas.height / 2);
            return;
        }

        // 1. 逶ｴ霑・0隧ｦ蜷医＃縺ｨ縺ｮ蜍晉紫謗ｨ遘ｻ繧定ｨ育ｮ・        const batchSize = 10;
        const batches = [];
        for (let i = 0; i < matches.length; i += batchSize) {
            const batch = matches.slice(i, i + batchSize);
            const wins = batch.filter(m => (m.result || '').toUpperCase() === 'WIN').length;
            const winRate = (wins / batch.length * 100).toFixed(1);
            // 譛蛻昴・繝舌ャ繝√・縲檎峩霑・0隧ｦ蜷医阪√◎繧御ｻ･髯阪・隧ｦ蜷育ｯ・峇繧定｡ｨ遉ｺ
            const label = i === 0 ? '逶ｴ霑・0隧ｦ蜷・ : `隧ｦ蜷・{i + 1}-${Math.min(i + batchSize, matches.length)}`;
            batches.push({
                label: label,
                winRate: parseFloat(winRate)
            });
        }

        // 2. 蟇ｾ謌ｦ繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ縺斐→縺ｮ邏ｯ險亥享邇・ｒ險育ｮ・        const opponentStats = {};
        matches.forEach(match => {
            const opponent = match.opponentCharacter || 'Unknown';
            if (!opponentStats[opponent]) {
                opponentStats[opponent] = { wins: 0, total: 0 };
            }
            opponentStats[opponent].total++;
            if ((match.result || '').toUpperCase() === 'WIN') {
                opponentStats[opponent].wins++;
            }
        });

        // 譛繧ょ享邇・′菴弱＞繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ繧呈歓蜃ｺ・亥ｯｾ謌ｦ蝗樊焚縺悟､壹＞譁ｹ繧貞━蜈茨ｼ・        let opponentWinRates = [];
        
        if (Object.keys(opponentStats).length > 0) {
            const winRateData = Object.entries(opponentStats)
                .map(([opponent, stats]) => ({
                    opponent,
                    winRate: parseFloat((stats.wins / stats.total * 100).toFixed(1)),
                    total: stats.total
                }));
            
            // 譛菴主享邇・ｒ迚ｹ螳・            const minWinRate = Math.min(...winRateData.map(d => d.winRate));
            
            // 譛菴主享邇・・繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ繧呈歓蜃ｺ
            const lowestWinRateChars = winRateData.filter(d => d.winRate === minWinRate);
            
            // 蟇ｾ謌ｦ蝗樊焚縺梧怙繧ょ､壹＞繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ繧帝∈謚・            const selectedChar = lowestWinRateChars.sort((a, b) => b.total - a.total)[0];
            
            opponentWinRates = [selectedChar];
        }

        // 蟇ｾ謌ｦ繝・・繧ｿ縺後↑縺・ｴ蜷医・繝繝溘・繝ｩ繝吶Ν
        const opponentLabels = opponentWinRates.length > 0 
            ? opponentWinRates.map(o => `vs ${o.opponent}`)
            : ['統 險倬鹸縺励ｈ縺・ｼ・];
        
        const opponentData = opponentWinRates.length > 0
            ? opponentWinRates.map(o => parseFloat(o.winRate))
            : [0];

        // 繧ｰ繝ｩ繝輔・謠冗判
        this.winRateTrendChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: [
                    ...batches.map(b => b.label),
                    ...opponentLabels
                ],
                datasets: [{
                    label: '蜍晉紫 (%)',
                    data: [
                        ...batches.map(b => b.winRate),
                        ...opponentData
                    ],
                    backgroundColor: [
                        ...batches.map(() => 'rgba(54, 162, 235, 0.6)'),
                        ...opponentWinRates.length > 0 
                            ? opponentWinRates.map(() => 'rgba(255, 99, 71, 0.6)') 
                            : ['rgba(128, 128, 128, 0.3)']
                    ],
                    borderColor: [
                        ...batches.map(() => 'rgba(54, 162, 235, 1)'),
                        ...opponentWinRates.length > 0 
                            ? opponentWinRates.map(() => 'rgba(255, 99, 71, 1)') 
                            : ['rgba(128, 128, 128, 0.5)']
                    ],
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: true,
                aspectRatio: 1.5,
                layout: {
                    padding: {
                        bottom: 20
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    title: {
                        display: true,
                        text: '逶ｴ霑・0隧ｦ蜷医・蜍晉紫 & 譛繧ょ享邇・′菴弱＞蟇ｾ謌ｦ繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ',
                        color: getComputedStyle(document.documentElement).getPropertyValue('--text-primary') || '#fff',
                        font: {
                            size: 14,
                            weight: '600'
                        },
                        padding: {
                            bottom: 15
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        padding: 12,
                        titleFont: {
                            size: 14,
                            weight: '600'
                        },
                        bodyFont: {
                            size: 13
                        },
                        callbacks: {
                            title: function(context) {
                                const label = context[0].label;
                                if (label === '逶ｴ霑・0隧ｦ蜷・) {
                                    // 縲檎峩霑・0隧ｦ蜷医阪・縺昴・縺ｾ縺ｾ陦ｨ遉ｺ
                                    return label;
                                } else if (label.startsWith('#')) {
                                    return '隧ｦ蜷・ + label.substring(1);
                                } else if (label === '統 險倬鹸縺励ｈ縺・ｼ・) {
                                    return '蟇ｾ謌ｦ繝・・繧ｿ縺ｪ縺・;
                                }
                                return label;
                            },
                            label: function(context) {
                                const label = context.label;
                                if (label === '統 險倬鹸縺励ｈ縺・ｼ・) {
                                    return '蟇ｾ謌ｦ繝・・繧ｿ繧定ｨ倬鹸縺励※縺上□縺輔＞';
                                }
                                return `蜍晉紫: ${context.parsed.y}%`;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100,
                        ticks: {
                            callback: function(value) {
                                return value + '%';
                            },
                            color: getComputedStyle(document.documentElement).getPropertyValue('--text-secondary') || '#aaa'
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        }
                    },
                    x: {
                        ticks: {
                            color: getComputedStyle(document.documentElement).getPropertyValue('--text-secondary') || '#aaa',
                            maxRotation: 90,
                            minRotation: 45,
                            autoSkip: false,
                            font: {
                                size: 11
                            },
                            callback: function(value, index, values) {
                                const label = this.getLabelForValue(value);
                                // 繝ｩ繝吶Ν繧堤洒邵ｮ陦ｨ遉ｺ
                                if (label === '逶ｴ霑・0隧ｦ蜷・) {
                                    // 縲檎峩霑・0隧ｦ蜷医阪・縺昴・縺ｾ縺ｾ陦ｨ遉ｺ
                                    return label;
                                } else if (label.startsWith('隧ｦ蜷・)) {
                                    // 縲瑚ｩｦ蜷・1-20縲阪ｒ縲・11-20縲阪↓遏ｭ邵ｮ
                                    return label.replace('隧ｦ蜷・, '#');
                                } else if (label.startsWith('vs ')) {
                                    // 縲計s Luke縲阪ｒ縲鍬uke縲阪↓遏ｭ邵ｮ
                                    return label.replace('vs ', '');
                                }
                                return label;
                            }
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        }
                    }
                }
            }
        });
    }

    // 繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ菴ｿ逕ｨ邇・げ繝ｩ繝輔・謠冗判
    renderCharacterUsageChart() {
        const canvas = document.getElementById('sf6-metrics-chart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');

        // 譌｢蟄倥・繝√Ε繝ｼ繝医ｒ遐ｴ譽・        if (this.characterUsageChart) {
            this.characterUsageChart.destroy();
        }

        // 荳｡譁ｹ縺ｮ繧ｹ繝医Ξ繝ｼ繧ｸ縺九ｉ繝・・繧ｿ繧貞叙蠕励＠縺ｦ繝槭・繧ｸ
        const sf6Gallery = JSON.parse(localStorage.getItem('sf6_gallery') || '[]');
        const recentMatches = JSON.parse(localStorage.getItem('recentMatches') || '[]');
        
        // 驥崎､・ｒ謗帝勁縺励※繝槭・繧ｸ
        const matchesMap = new Map();
        [...sf6Gallery, ...recentMatches].forEach(match => {
            if (match.id) {
                matchesMap.set(match.id, match);
            }
        });
        
        const matches = Array.from(matchesMap.values());

        if (matches.length === 0) {
            // 繝・・繧ｿ縺後↑縺・ｴ蜷医・遨ｺ縺ｮ繧ｰ繝ｩ繝輔ｒ陦ｨ遉ｺ
            ctx.font = '16px sans-serif';
            ctx.fillStyle = '#888';
            ctx.textAlign = 'center';
            ctx.fillText('隧ｦ蜷医ョ繝ｼ繧ｿ縺後∪縺縺ゅｊ縺ｾ縺帙ｓ', canvas.width / 2, canvas.height / 2);
            return;
        }

        // 繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ菴ｿ逕ｨ邇・ｒ險育ｮ・        const characterUsage = {};
        matches.forEach(match => {
            const character = match.playerCharacter || match.character || 'Unknown';
            if (!characterUsage[character]) {
                characterUsage[character] = 0;
            }
            characterUsage[character]++;
        });

        // 菴ｿ逕ｨ邇・ｒ險育ｮ励＠縺ｦ繧ｽ繝ｼ繝・        const characterData = Object.entries(characterUsage)
            .map(([character, count]) => ({
                character,
                count,
                percentage: ((count / matches.length) * 100).toFixed(1)
            }))
            .sort((a, b) => b.count - a.count);

        // 迴ｾ蝨ｨ縺ｮ繝・・繝槭ｒ蜿門ｾ暦ｼ医Λ繧､繝医Δ繝ｼ繝峨°繝繝ｼ繧ｯ繝｢繝ｼ繝峨°・・        const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';
        const isDarkMode = currentTheme === 'dark';
        
        // 繝・・繝槭↓蠢懊§縺溯牡險ｭ螳夲ｼ医ｈ繧頑・遒ｺ縺ｪ繧ｳ繝ｳ繝医Λ繧ｹ繝茨ｼ・        const textColor = isDarkMode ? '#ffffff' : '#000000';
        const backgroundColor = isDarkMode ? 'rgba(0, 0, 0, 0.8)' : 'rgba(255, 255, 255, 0.95)';

        console.log('繧ｰ繝ｩ繝墓緒逕ｻ - 繝・・繝・', currentTheme, '譁・ｭ苓牡:', textColor);

        // 繧ｰ繝ｩ繝輔・謠冗判
        this.characterUsageChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: characterData.map(c => c.character),
                datasets: [{
                    label: '菴ｿ逕ｨ蝗樊焚',
                    data: characterData.map(c => c.count),
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.7)',
                        'rgba(54, 162, 235, 0.7)',
                        'rgba(255, 206, 86, 0.7)',
                        'rgba(75, 192, 192, 0.7)',
                        'rgba(153, 102, 255, 0.7)',
                        'rgba(255, 159, 64, 0.7)',
                        'rgba(201, 203, 207, 0.7)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)',
                        'rgba(201, 203, 207, 1)'
                    ],
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: true,
                plugins: {
                    legend: {
                        display: true,
                        position: 'right',
                        labels: {
                            color: textColor,  // 譏守､ｺ逧・↑繝・・繝槫ｯｾ蠢懊・濶ｲ
                            font: {
                                size: 13,
                                weight: '500'
                            },
                            padding: 10,
                            usePointStyle: true,
                            pointStyle: 'circle',
                            generateLabels: function(chart) {
                                const data = chart.data;
                                if (data.labels.length && data.datasets.length) {
                                    return data.labels.map((label, i) => {
                                        const value = data.datasets[0].data[i];
                                        const percentage = ((value / matches.length) * 100).toFixed(1);
                                        return {
                                            text: `${label}: ${percentage}% (${value}蝗・`,
                                            fillStyle: data.datasets[0].backgroundColor[i],
                                            strokeStyle: data.datasets[0].borderColor[i],
                                            lineWidth: 2,
                                            hidden: !chart.getDataVisibility(i),
                                            index: i,
                                            fontColor: textColor  // 霑ｽ蜉縺ｮ濶ｲ謖・ｮ・                                        };
                                    });
                                }
                                return [];
                            }
                        }
                    },
                    title: {
                        display: false  // HTML繧ｿ繧､繝医Ν繧剃ｽｿ逕ｨ
                    },
                    tooltip: {
                        enabled: true,
                        backgroundColor: 'rgba(0, 0, 0, 0.9)',
                        titleColor: '#ffffff',
                        bodyColor: '#ffffff',
                        borderColor: 'rgba(255, 255, 255, 0.3)',
                        borderWidth: 1,
                        padding: 12,
                        displayColors: true,
                        callbacks: {
                            label: function(context) {
                                const label = context.label || '';
                                const value = context.parsed;
                                const percentage = ((value / matches.length) * 100).toFixed(1);
                                return `${label}: ${value}蝗・(${percentage}%)`;
                            }
                        }
                    }
                }
            }
        });
        
        console.log('繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ菴ｿ逕ｨ邇・げ繝ｩ繝墓緒逕ｻ螳御ｺ・);
    }

    // 蜍晉紫隧ｳ邏ｰ繝｢繝ｼ繝繝ｫ繧定｡ｨ遉ｺ
    showWinRateDetailModal() {
        const modal = document.getElementById('winrate-detail-modal');
        if (!modal) return;

        modal.classList.remove('hidden');
        this.loadWinRateDetailData();
    }

    // 蜍晉紫隧ｳ邏ｰ繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
    closeWinRateDetailModal() {
        const modal = document.getElementById('winrate-detail-modal');
        if (modal) {
            modal.classList.add('hidden');
        }
    }

    // 蜍晉紫隧ｳ邏ｰ繝・・繧ｿ繧定ｪｭ縺ｿ霎ｼ繧
    loadWinRateDetailData() {
        // 荳｡譁ｹ縺ｮ繧ｹ繝医Ξ繝ｼ繧ｸ縺九ｉ繝・・繧ｿ繧貞叙蠕励＠縺ｦ繝槭・繧ｸ
        const sf6Gallery = JSON.parse(localStorage.getItem('sf6_gallery') || '[]');
        const recentMatches = JSON.parse(localStorage.getItem('recentMatches') || '[]');
        
        // 驥崎､・ｒ謗帝勁縺励※繝槭・繧ｸ
        const matchesMap = new Map();
        [...sf6Gallery, ...recentMatches].forEach(match => {
            if (match.id) {
                matchesMap.set(match.id, match);
            }
        });
        
        const matches = Array.from(matchesMap.values());

        if (matches.length === 0) {
            document.getElementById('opponent-stats-list').innerHTML = '<p class="no-data">隧ｦ蜷医ョ繝ｼ繧ｿ縺後≠繧翫∪縺帙ｓ</p>';
            return;
        }

        // 蟇ｾ謌ｦ繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ縺斐→縺ｮ邨ｱ險医ｒ險育ｮ・        const opponentStats = {};
        matches.forEach(match => {
            const opponent = match.opponentCharacter || 'Unknown';
            if (!opponentStats[opponent]) {
                opponentStats[opponent] = { wins: 0, losses: 0, total: 0 };
            }
            opponentStats[opponent].total++;
            if ((match.result || '').toUpperCase() === 'WIN') {
                opponentStats[opponent].wins++;
            } else {
                opponentStats[opponent].losses++;
            }
        });

        // 邨ｱ險医ョ繝ｼ繧ｿ繧帝・蛻励↓螟画鋤
        this.opponentStatsData = Object.entries(opponentStats).map(([opponent, stats]) => ({
            opponent,
            wins: stats.wins,
            losses: stats.losses,
            total: stats.total,
            winRate: stats.total > 0 ? (stats.wins / stats.total * 100).toFixed(1) : 0
        }));

        // 繧ｵ繝槭Μ繝ｼ諠・ｱ繧呈峩譁ｰ
        const totalMatches = matches.length;
        const uniqueOpponents = this.opponentStatsData.length;
        const totalWins = matches.filter(m => (m.result || '').toUpperCase() === 'WIN').length;
        const overallWinRate = totalMatches > 0 ? (totalWins / totalMatches * 100).toFixed(1) : 0;

        document.getElementById('detail-total-matches').textContent = totalMatches;
        document.getElementById('detail-unique-opponents').textContent = uniqueOpponents;
        document.getElementById('detail-overall-winrate').textContent = overallWinRate + '%';

        // 蛻晄悄陦ｨ遉ｺ
        this.renderOpponentStatsList();

        // 繧ｽ繝ｼ繝医・繝輔ぅ繝ｫ繧ｿ繝ｼ縺ｮ繧､繝吶Φ繝医Μ繧ｹ繝翫・
        this.setupDetailControls();
    }

    // 隧ｳ邏ｰ繧ｳ繝ｳ繝医Ο繝ｼ繝ｫ縺ｮ繧､繝吶Φ繝医Μ繧ｹ繝翫・繧定ｨｭ螳・    setupDetailControls() {
        const sortSelect = document.getElementById('sort-by');
        const minMatchesInput = document.getElementById('min-matches');

        if (sortSelect && !sortSelect.hasAttribute('data-listener-added')) {
            sortSelect.addEventListener('change', () => this.renderOpponentStatsList());
            sortSelect.setAttribute('data-listener-added', 'true');
        }

        if (minMatchesInput && !minMatchesInput.hasAttribute('data-listener-added')) {
            minMatchesInput.addEventListener('input', () => this.renderOpponentStatsList());
            minMatchesInput.setAttribute('data-listener-added', 'true');
        }
    }

    // 蟇ｾ謌ｦ繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ蛻･邨ｱ險医Μ繧ｹ繝医ｒ謠冗判
    renderOpponentStatsList() {
        const container = document.getElementById('opponent-stats-list');
        if (!container || !this.opponentStatsData) return;

        // 繝輔ぅ繝ｫ繧ｿ繝ｼ譚｡莉ｶ繧貞叙蠕・        const minMatches = parseInt(document.getElementById('min-matches').value) || 0;
        const sortBy = document.getElementById('sort-by').value;

        // 繝輔ぅ繝ｫ繧ｿ繝ｼ驕ｩ逕ｨ
        let filteredData = this.opponentStatsData.filter(stat => stat.total >= minMatches);

        // 繧ｽ繝ｼ繝磯←逕ｨ
        switch (sortBy) {
            case 'matches-desc':
                filteredData.sort((a, b) => b.total - a.total);
                break;
            case 'matches-asc':
                filteredData.sort((a, b) => a.total - b.total);
                break;
            case 'winrate-desc':
                filteredData.sort((a, b) => parseFloat(b.winRate) - parseFloat(a.winRate));
                break;
            case 'winrate-asc':
                filteredData.sort((a, b) => parseFloat(a.winRate) - parseFloat(b.winRate));
                break;
            case 'name-asc':
                filteredData.sort((a, b) => a.opponent.localeCompare(b.opponent));
                break;
        }

        // 繝ｪ繧ｹ繝医ｒ謠冗判
        if (filteredData.length === 0) {
            container.innerHTML = '<p class="no-data">譚｡莉ｶ縺ｫ荳閾ｴ縺吶ｋ繝・・繧ｿ縺後≠繧翫∪縺帙ｓ</p>';
            return;
        }

        container.innerHTML = filteredData.map(stat => {
            const winRateValue = parseFloat(stat.winRate);
            const winRateClass = winRateValue >= 60 ? 'high' : winRateValue >= 40 ? 'medium' : 'low';
            
            return `
                <div class="opponent-stat-item">
                    <div class="opponent-header">
                        <span class="opponent-name">${stat.opponent}</span>
                        <span class="opponent-winrate ${winRateClass}">${stat.winRate}%</span>
                    </div>
                    <div class="opponent-details">
                        <span class="stat-detail">隧ｦ蜷域焚: ${stat.total}</span>
                        <span class="stat-detail wins">${stat.wins}蜍・/span>
                        <span class="stat-detail losses">${stat.losses}謨・/span>
                    </div>
                    <div class="winrate-bar">
                        <div class="winrate-fill ${winRateClass}" style="width: ${stat.winRate}%"></div>
                    </div>
                </div>
            `;
        }).join('');
    }

    // 蜍晉紫繝・・繧ｿ繧偵お繧ｯ繧ｹ繝昴・繝・    exportWinRateData() {
        if (!this.opponentStatsData || this.opponentStatsData.length === 0) {
            this.showToast('繧ｨ繧ｯ繧ｹ繝昴・繝医☆繧九ョ繝ｼ繧ｿ縺後≠繧翫∪縺帙ｓ', 'warning');
            return;
        }

        // CSV蠖｢蠑上〒繧ｨ繧ｯ繧ｹ繝昴・繝・        let csv = '繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ,隧ｦ蜷域焚,蜍晏茜謨ｰ,謨怜圏謨ｰ,蜍晉紫(%)\n';
        this.opponentStatsData.forEach(stat => {
            csv += `${stat.opponent},${stat.total},${stat.wins},${stat.losses},${stat.winRate}\n`;
        });

        // 繝繧ｦ繝ｳ繝ｭ繝ｼ繝・        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', `蟇ｾ謌ｦ繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ蛻･蜍晉紫_${new Date().toISOString().split('T')[0]}.csv`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        this.showToast('繝・・繧ｿ繧偵お繧ｯ繧ｹ繝昴・繝医＠縺ｾ縺励◆', 'success');
    }
    
    // 繝医・繧ｹ繝郁｡ｨ遉ｺ
    showToast(message, type = 'info') {
        const container = document.getElementById('toast-container');
        if (!container) return;
        
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.textContent = message;
        
        container.appendChild(toast);
        
        setTimeout(() => {
            toast.classList.add('show');
        }, 100);
        
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => {
                if (container.contains(toast)) {
                    container.removeChild(toast);
                }
            }, 300);
        }, 3000);
    }
    
    // 繝ｭ繝ｼ繝・ぅ繝ｳ繧ｰ陦ｨ遉ｺ・井ｻｻ諢上Γ繝・そ繝ｼ繧ｸ蟇ｾ蠢懶ｼ・    showLoading(message = '繝ｭ繝ｼ繝我ｸｭ...') {
        // 繝・く繧ｹ繝医ｒ譖ｴ譁ｰ・磯㍾隍⑩D縺ｫ蟇ｾ蠢懊＠縺ｦ蜈ｨ縺ｦ譖ｴ譁ｰ・・        try {
            const msgNodes = document.querySelectorAll('#loading .loading-content p');
            if (msgNodes && msgNodes.length > 0) {
                msgNodes.forEach(p => p.textContent = message);
            }
        } catch (e) {
            console.debug('loading message update skipped:', e);
        }

        const loading = document.getElementById('loading');
        if (loading) {
            loading.classList.remove('hidden');
        }
    }
    
    hideLoading() {
        const loading = document.getElementById('loading');
        if (loading) {
            loading.classList.add('hidden');
        }
    }
    
    // 蜷・・繝ｼ繧ｸ縺ｮ繝ｭ繝ｼ繝牙・逅・    loadDashboard() {
        // 譁ｰ縺励＞邨ｱ險医す繧ｹ繝・Β繧剃ｽｿ逕ｨ
        if (this.playerStatsManager) {
            this.playerStatsManager.loadRecentMatches();
        } else {
            this.loadRecentMatches();
        }
        // 譁ｰ縺励＞邨ｱ險医す繧ｹ繝・Β繧剃ｽｿ逕ｨ
        if (this.playerStatsManager) {
            this.playerStatsManager.loadStatsToUI();
        }

        // 繝繝・す繝･繝懊・繝臥岼讓吶ｒ隱ｭ縺ｿ霎ｼ縺ｿ
        this.loadDashboardGoals();

        // 繧ｰ繝ｩ繝輔ｒ謠冗判
        this.renderWinRateTrendChart();
        this.renderCharacterUsageChart();
    }
    
    loadAnalysis() {
        const sourceRadios = document.querySelectorAll('input[name="analysis-source"]');
        const fileRadio = document.getElementById('source-file-radio');
        const fileSelectorContainer = document.getElementById('source-file-selector-container');
        const fileListContainer = document.getElementById('source-file-list');

        const files = this.getLocalDataSources();

        if (files.length > 0) {
            fileRadio.disabled = false;

            // "Select All" checkbox
            const selectAllHtml = `
                <div class="checkbox-item">
                    <input type="checkbox" id="select-all-files">
                    <label for="select-all-files">縺吶∋縺ｦ縺ｮ繝輔ぃ繧､繝ｫ繧帝∈謚・/label>
                </div>
            `;

            // File checkboxes
            const filesHtml = files.map(f => `
                <div class="checkbox-item">
                    <input type="checkbox" id="file-${f}" value="${f}" name="source-file">
                    <label for="file-${f}">${f}</label>
                </div>
            `).join('');

            fileListContainer.innerHTML = selectAllHtml + filesHtml;

            // Add event listener for "Select All"
            const selectAllCheckbox = document.getElementById('select-all-files');
            selectAllCheckbox.addEventListener('change', (e) => {
                const checkboxes = document.querySelectorAll('input[name="source-file"]');
                checkboxes.forEach(checkbox => {
                    checkbox.checked = e.target.checked;
                });
            });

        } else {
            fileRadio.disabled = true;
            fileListContainer.innerHTML = '<p>繧｢繝・・繝ｭ繝ｼ繝峨＆繧後◆繝輔ぃ繧､繝ｫ縺ｯ縺ゅｊ縺ｾ縺帙ｓ</p>';
        }

        // Add event listeners for radio buttons
        sourceRadios.forEach(radio => {
            radio.addEventListener('change', () => {
                if (radio.value === 'file' && !fileRadio.disabled) {
                    fileSelectorContainer.style.display = 'block';
                } else {
                    fileSelectorContainer.style.display = 'none';
                }
            });
        });
    }
    
    loadGoals() {
        this.loadGoalsList();
    }

    loadGallery() {
        this.loadGalleryMatches();
        this.loadOpponentFilter();
        this.setupGallerySelectionMode();
    }
    
    loadSettings() {
        this.loadGameCategories();
        this.loadApiSettings();
    }
    
    // 繝・・繧ｿ繝ｭ繝ｼ繝牙・逅・    loadUserData() {
        // 繝ｦ繝ｼ繧ｶ繝ｼ繝・・繧ｿ縺ｮ繝ｭ繝ｼ繝・        if (!this.isGuest && this.currentUser) {
            // 菫晏ｭ倥＆繧後◆繝・・繧ｿ繧偵Ο繝ｼ繝・        }
    }
    
    loadRecentMatches() {
        const container = document.getElementById('recent-matches');
        if (!container) return;
        
        // 荳｡譁ｹ縺ｮ繧ｹ繝医Ξ繝ｼ繧ｸ縺九ｉ繝・・繧ｿ繧貞叙蠕励＠縺ｦ繝槭・繧ｸ
        const sf6Gallery = JSON.parse(localStorage.getItem('sf6_gallery') || '[]');
        const recentMatches = JSON.parse(localStorage.getItem('recentMatches') || '[]');
        
        // 驥崎､・ｒ謗帝勁縺励※繝槭・繧ｸ
        const matchesMap = new Map();
        [...sf6Gallery, ...recentMatches].forEach(match => {
            if (match.id) {
                matchesMap.set(match.id, match);
            }
        });
        
        const matches = Array.from(matchesMap.values())
            .sort((a, b) => (b.id || 0) - (a.id || 0)) // 譁ｰ縺励＞鬆・            .slice(0, 10); // 譛譁ｰ10莉ｶ縺ｮ縺ｿ陦ｨ遉ｺ
        
        if (matches.length === 0) {
            container.innerHTML = '<p class="no-data">隧ｦ蜷郁ｨ倬鹸縺後∪縺縺ゅｊ縺ｾ縺帙ｓ</p>';
            return;
        }
        
        container.innerHTML = matches.map(match => `
            <div class="match-item ${match.result.toLowerCase()}">
                <span class="match-result">${match.result}</span>
                <span class="match-character">繧ｭ繝｣繝ｩ: ${match.character}</span>
                <span class="match-rounds">繝ｩ繧ｦ繝ｳ繝・ ${match.rounds}</span>
            </div>
        `).join('');
    }
    
    loadAiRecommendations() {
        // 縺薙・髢｢謨ｰ縺ｯ蜑企勁縺輔ｌ縺ｾ縺励◆ - AI繧ｳ繝ｼ繝√Φ繧ｰ讖溯・縺ｯ辟｡蜉ｹ蛹悶＆繧後※縺・∪縺・        console.log('圷 loadAiRecommendations called but AI coaching feature has been removed');
    }
    
    refreshAiRecommendations() {
        // 縺薙・髢｢謨ｰ縺ｯ蜑企勁縺輔ｌ縺ｾ縺励◆ - AI繧ｳ繝ｼ繝√Φ繧ｰ讖溯・縺ｯ辟｡蜉ｹ蛹悶＆繧後※縺・∪縺・        console.log('圷 refreshAiRecommendations called but AI coaching feature has been removed');
    }
    
    loadGoalsList() {
        const container = document.getElementById('goals-list');
        if (!container) return;

        const goals = JSON.parse(localStorage.getItem('goals') || '[]');

        if (goals.length === 0) {
            container.innerHTML = '<p class="no-data">逶ｮ讓吶′縺ｾ縺險ｭ螳壹＆繧後※縺・∪縺帙ｓ</p>';
            return;
        }

        container.innerHTML = goals.map(goal => {
            const calculatedProgress = this.calculateProgressByDays(goal);
            return `
            <div class="goal-item">
                <div class="goal-header">
                    <h4>${goal.title}</h4>
                    <span class="goal-deadline">${goal.deadline}</span>
                </div>
                <p class="goal-description">${goal.description}</p>
                <div class="goal-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${calculatedProgress}%"></div>
                    </div>
                    <span class="progress-text">${calculatedProgress}% (譌･謨ｰ繝吶・繧ｹ)</span>
                </div>
                <div class="goal-actions">
                    <button class="btn-danger btn-sm" onclick="app.deleteGoal(${goal.id})">蜑企勁</button>
                </div>
            </div>
        `;
        }).join('');
    }
    
    addGoal(goalData) {
        const goals = JSON.parse(localStorage.getItem('goals') || '[]');
        goals.push(goalData);
        localStorage.setItem('goals', JSON.stringify(goals));
        this.loadGoalsList();
    }


    // 繝・ヰ繝・げ逕ｨ: 迚ｹ螳壹・逶ｮ讓吶・騾ｲ謐励ｒ蠑ｷ蛻ｶ逧・↓譖ｴ譁ｰ縺吶ｋ髢｢謨ｰ
    forceUpdateGoalByTitle(title, progress) {
        try {
            const goals = JSON.parse(localStorage.getItem('goals') || '[]');
            const goalIndex = goals.findIndex(goal => goal.title === title);

            if (goalIndex !== -1) {
                goals[goalIndex].progress = progress;
                localStorage.setItem('goals', JSON.stringify(goals));
                this.loadDashboardGoals();
                console.log(`識 Force updated "${title}" to ${progress}%`);
                return true;
            }
            return false;
        } catch (error) {
            console.error('Force update failed:', error);
            return false;
        }
    }


    deleteGoal(goalId) {
        try {
            const goals = JSON.parse(localStorage.getItem('goals') || '[]');
            const filteredGoals = goals.filter(goal => goal.id !== goalId);

            localStorage.setItem('goals', JSON.stringify(filteredGoals));

            // 繝ｪ繧ｹ繝医ｒ譖ｴ譁ｰ
            this.loadGoalsList();

            // 迴ｾ蝨ｨ縺ｮ繝壹・繧ｸ縺後ム繝・す繝･繝懊・繝峨・蝣ｴ蜷医・縺ｿ譖ｴ譁ｰ
            if (this.currentPage === 'dashboard') {
                this.loadDashboardGoals();
            }

            this.showToast('逶ｮ讓吶ｒ蜑企勁縺励∪縺励◆', 'success');
        } catch (error) {
            console.error('Failed to delete goal:', error);
            this.showToast('逶ｮ讓吶・蜑企勁縺ｫ螟ｱ謨励＠縺ｾ縺励◆', 'error');
        }
    }

    analyzeMatch(matchData) {
        // 繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ繝ｻ繝ｩ繧ｦ繝ｳ繝画ュ蝣ｱ縺ｮ縺ｿ菫晄戟
        const playerCharacter = matchData.playerCharacter || 'Unknown';
        const opponentCharacter = matchData.opponentCharacter || 'Unknown';
        const roundsWon = matchData.roundsWon || 0;
        const roundsLost = matchData.roundsLost || 0;

        const resultsContainer = document.getElementById('analysis-results');
        if (resultsContainer) {
            resultsContainer.innerHTML = `
                <div class="card">
                    <h3>隧ｦ蜷亥・譫千ｵ先棡</h3>
                    <div class="analysis-stats">
                        <div class="stat-section">
                            <h4>隧ｦ蜷域ュ蝣ｱ</h4>
                            <div class="stat-row">
                                <div class="stat-box">
                                    <span class="stat-label">菴ｿ逕ｨ繧ｭ繝｣繝ｩ</span>
                                    <span class="stat-value">${playerCharacter}</span>
                                </div>
                                <div class="stat-box">
                                    <span class="stat-label">逶ｸ謇九く繝｣繝ｩ</span>
                                    <span class="stat-value">${opponentCharacter}</span>
                                </div>
                                <div class="stat-box">
                                    <span class="stat-label">繝ｩ繧ｦ繝ｳ繝牙享蛻ｩ</span>
                                    <span class="stat-value">${roundsWon}/${roundsWon + roundsLost}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="analysis-feedback">
                        <h4>繝代ヵ繧ｩ繝ｼ繝槭Φ繧ｹ隧穂ｾ｡</h4>
                        <p>隧ｦ蜷医ョ繝ｼ繧ｿ縺瑚ｨ倬鹸縺輔ｌ縺ｾ縺励◆縲ゅく繝｣繝ｩ繧ｯ繧ｿ繝ｼ蟇ｾ謌ｦ繝・・繧ｿ繧定塘遨堺ｸｭ...</p>
                    </div>
                </div>
            `;
            resultsContainer.classList.remove('hidden');
        }
    }
    
    loadGameCategories() {
        const container = document.getElementById('game-categories');
        if (!container || typeof ESPORTS_GAMES === 'undefined') return;
        
        let html = '';
        for (const [categoryKey, category] of Object.entries(ESPORTS_GAMES)) {
            html += `<div class="game-category-section">
                <h4 class="category-title">${category.name}</h4>
                <div class="games-grid">`;
            
            category.games.forEach(game => {
                html += `
                    <div class="game-option" 
                         data-game-id="${game.id}" 
                         data-game-name="${game.name}" 
                         data-game-icon="${game.icon}" 
                         data-category="${category.name}"
                         role="button"
                         tabindex="0">
                        <span class="game-option-icon">${game.icon}</span>
                        <span class="game-option-name">${game.name}</span>
                    </div>`;
            });
            
            html += '</div></div>';
        }
        
        container.innerHTML = html;
        
        // 繧ｲ繝ｼ繝驕ｸ謚槭き繝ｼ繝峨・繧ｯ繝ｪ繝・け繧､繝吶Φ繝医ｒ險ｭ螳・        this.setupGameCards();
    }
    
    showGameSelector() {
        const selector = document.getElementById('game-selector');
        if (selector) {
            selector.classList.remove('hidden');
        }
    }
    
    hideGameSelector() {
        const selector = document.getElementById('game-selector');
        if (selector) {
            selector.classList.add('hidden');
        }
    }
    
    confirmGameSelection() {
        const selected = document.querySelector('.game-card.selected');
        if (selected) {
            const gameId = selected.dataset.gameId;
            const gameName = selected.querySelector('.game-name').textContent;
            const gameIcon = selected.querySelector('.game-icon').textContent;
            
            const currentGameName = document.getElementById('current-game-name');
            const currentGameIcon = document.getElementById('current-game-icon');
            const playerGame = document.getElementById('player-game');
            
            if (currentGameName) currentGameName.textContent = gameName;
            if (currentGameIcon) currentGameIcon.textContent = gameIcon;
            if (playerGame) playerGame.textContent = gameName;
            
            localStorage.setItem('selectedGame', gameId);
            this.hideGameSelector();
            this.showToast(`繧ｲ繝ｼ繝繧・{gameName}縺ｫ螟画峩縺励∪縺励◆`, 'success');
        }
    }
    
    loadApiSettings() {
        const provider = localStorage.getItem('ai_provider');
        const model = localStorage.getItem('ai_model');
        const hasKey = localStorage.getItem('ai_api_key');
        
        if (provider) {
            const providerSelect = document.getElementById('api-provider');
            if (providerSelect) providerSelect.value = provider;
        }
        if (model) {
            const modelSelect = document.getElementById('api-model');
            if (modelSelect) modelSelect.value = model;
        }
        
        this.updateApiStatus(!!hasKey);
    }

    // === 繝√Ε繝・ヨ讖溯・ ===
    initChat() {
        console.log('Initializing chat...');
        
        // API險ｭ螳夐未騾｣
        this.setupChatApiSettings();
        
        // 繝√Ε繝・ヨ蜈･蜉幃未騾｣
        this.setupChatInput();
        
        // 繝｡繝・そ繝ｼ繧ｸ螻･豁ｴ繧貞ｾｩ蜈・        this.loadChatHistory();
    }
    
    setupChatApiSettings() {
        // API繧ｭ繝ｼ險ｭ螳・        const saveKeyBtn = document.getElementById('save-gemini-key');
        const testConnectionBtn = document.getElementById('test-gemini-connection');
        const toggleKeyBtn = document.getElementById('toggle-gemini-key');
        const apiKeyInput = document.getElementById('gemini-api-key');
        
        if (saveKeyBtn) {
            saveKeyBtn.addEventListener('click', () => this.saveGeminiApiKey());
        }
        
        if (testConnectionBtn) {
            testConnectionBtn.addEventListener('click', () => this.testGeminiConnection());
        }
        
        if (toggleKeyBtn && apiKeyInput) {
            toggleKeyBtn.addEventListener('click', () => {
                const isPassword = apiKeyInput.type === 'password';
                apiKeyInput.type = isPassword ? 'text' : 'password';
                toggleKeyBtn.textContent = isPassword ? '刪' : '早・・;
            });
        }
        
        // 譌｢蟄倥・API繧ｭ繝ｼ繧定ｪｭ縺ｿ霎ｼ縺ｿ
        if (apiKeyInput && this.geminiService) {
            apiKeyInput.value = this.geminiService.getApiKey();
        }
    }
    
    setupChatInput() {
        const chatInput = document.getElementById('chat-input');
        const sendBtn = document.getElementById('send-message');
        const clearBtn = document.getElementById('clear-chat');
        
        if (chatInput) {
            // 閾ｪ蜍輔Μ繧ｵ繧､繧ｺ
            chatInput.addEventListener('input', () => {
                chatInput.style.height = 'auto';
                chatInput.style.height = Math.min(chatInput.scrollHeight, 120) + 'px';
                
                // 騾∽ｿ｡繝懊ち繝ｳ縺ｮ譛牙柑/辟｡蜉ｹ
                if (sendBtn) {
                    sendBtn.disabled = !chatInput.value.trim();
                }
            });
            
            // Enter 繧ｭ繝ｼ縺ｧ騾∽ｿ｡
            chatInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    this.sendChatMessage();
                }
            });
        }
        
        if (sendBtn) {
            sendBtn.addEventListener('click', () => this.sendChatMessage());
        }
        
        if (clearBtn) {
            clearBtn.addEventListener('click', () => this.clearChat());
        }
    }
    
    async saveGeminiApiKey() {
        const apiKeyInput = document.getElementById('gemini-api-key');
        if (!apiKeyInput) return;
        
        const apiKey = apiKeyInput.value.trim();
        if (!apiKey) {
            this.showToast('API繧ｭ繝ｼ繧貞・蜉帙＠縺ｦ縺上□縺輔＞', 'warning');
            return;
        }
        
        try {
            // 邨ｱ荳API繝槭ロ繝ｼ繧ｸ繝｣繝ｼ繧剃ｽｿ逕ｨ
            if (window.unifiedApiManager) {
                await window.unifiedApiManager.setAPIKey(apiKey);
                // 莉悶・蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨ｂ蜷梧悄
                this.syncAPIKeyInputs();
                this.showToast('API繧ｭ繝ｼ繧剃ｿ晏ｭ倥＠縺ｾ縺励◆', 'success');
            } else if (this.geminiService) {
                // 繝輔か繝ｼ繝ｫ繝舌ャ繧ｯ
                this.geminiService.setApiKey(apiKey);
                this.showToast('Gemini API繧ｭ繝ｼ繧剃ｿ晏ｭ倥＠縺ｾ縺励◆', 'success');
            } else {
                this.showToast('API繧ｵ繝ｼ繝薙せ縺悟・譛溷喧縺輔ｌ縺ｦ縺・∪縺帙ｓ', 'error');
            }
        } catch (error) {
            this.showToast(`API繧ｭ繝ｼ菫晏ｭ倥↓螟ｱ謨励＠縺ｾ縺励◆: ${error.message}`, 'error');
        }
    }
    
    async testGeminiConnection() {
        if (!window.unifiedApiManager || !window.unifiedApiManager.isConfigured()) {
            this.showToast('Gemini API繧ｭ繝ｼ縺瑚ｨｭ螳壹＆繧後※縺・∪縺帙ｓ', 'error');
            return;
        }
        
        const testBtn = document.getElementById('test-gemini-connection');
        if (testBtn) {
            testBtn.disabled = true;
            testBtn.textContent = '繝・せ繝井ｸｭ...';
        }
        
        try {
            await window.unifiedApiManager.validateAPIKey();
            this.showToast('謗･邯壹ユ繧ｹ繝医↓謌仙粥縺励∪縺励◆', 'success');
        } catch (error) {
            this.showToast(`謗･邯壹ユ繧ｹ繝医↓螟ｱ謨・ ${error.message}`, 'error');
        } finally {
            if (testBtn) {
                testBtn.disabled = false;
                testBtn.textContent = '謗･邯壹ユ繧ｹ繝・;
            }
        }
    }
    
    async sendChatMessage() {
        const chatInput = document.getElementById('chat-input');
        const sendBtn = document.getElementById('send-message');
        
        if (!chatInput) return;
        
        // API縺瑚ｨｭ螳壹＆繧後※縺・ｋ縺狗｢ｺ隱・        if (!window.unifiedApiManager || !window.unifiedApiManager.isConfigured()) {
            this.showToast('Gemini API繧ｭ繝ｼ縺瑚ｨｭ螳壹＆繧後※縺・∪縺帙ｓ', 'warning');
            return;
        }
        
        const message = chatInput.value.trim();
        if (!message) return;
        
        // UI繧堤┌蜉ｹ蛹・        chatInput.disabled = true;
        if (sendBtn) sendBtn.disabled = true;
        
        try {
            // 繝ｦ繝ｼ繧ｶ繝ｼ繝｡繝・そ繝ｼ繧ｸ繧定｡ｨ遉ｺ
            this.addChatMessage(message, 'user');
            
            // 蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨ｒ繧ｯ繝ｪ繧｢
            chatInput.value = '';
            chatInput.style.height = 'auto';
            
            // 繧ｿ繧､繝斐Φ繧ｰ繧､繝ｳ繧ｸ繧ｱ繝ｼ繧ｿ繝ｼ陦ｨ遉ｺ
            this.showTypingIndicator();
            
            // API縺ｫ騾∽ｿ｡
            const response = await this.geminiService.sendChatMessage(message);
            
            // 繧ｿ繧､繝斐Φ繧ｰ繧､繝ｳ繧ｸ繧ｱ繝ｼ繧ｿ繝ｼ髱櫁｡ｨ遉ｺ
            this.hideTypingIndicator();
            
            // AI縺ｮ蠢懃ｭ斐ｒ陦ｨ遉ｺ
            this.addChatMessage(response.response, 'ai');
            
            // 螻･豁ｴ繧剃ｿ晏ｭ・            this.saveChatHistory();
            
        } catch (error) {
            this.hideTypingIndicator();
            this.showToast(`繝｡繝・そ繝ｼ繧ｸ騾∽ｿ｡繧ｨ繝ｩ繝ｼ: ${error.message}`, 'error');
        } finally {
            // UI繧貞・譛牙柑蛹・            chatInput.disabled = false;
            if (sendBtn) sendBtn.disabled = false;
        }
    }
    
    addChatMessage(text, type) {
        const messagesContainer = document.getElementById('chat-messages');
        if (!messagesContainer) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `chat-message ${type}-message`;
        
        const avatar = document.createElement('div');
        avatar.className = 'message-avatar';
        avatar.textContent = type === 'user' ? '側' : '､・;
        
        const content = document.createElement('div');
        content.className = 'message-content';
        
        const messageText = document.createElement('div');
        messageText.className = 'message-text';
        messageText.textContent = text;
        
        const timestamp = document.createElement('div');
        timestamp.className = 'message-time';
        timestamp.textContent = new Date().toLocaleTimeString('ja-JP', {
            hour: '2-digit',
            minute: '2-digit'
        });
        
        content.appendChild(messageText);
        content.appendChild(timestamp);
        messageDiv.appendChild(avatar);
        messageDiv.appendChild(content);
        
        messagesContainer.appendChild(messageDiv);
        
        // 繧ｹ繧ｯ繝ｭ繝ｼ繝ｫ
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        
        // 繝｡繝・そ繝ｼ繧ｸ繧帝・蛻励↓霑ｽ蜉
        this.chatMessages.push({
            text: text,
            type: type,
            timestamp: new Date().toISOString()
        });
    }
    
    showTypingIndicator() {
        const messagesContainer = document.getElementById('chat-messages');
        if (!messagesContainer) return;
        
        const indicator = document.createElement('div');
        indicator.className = 'chat-message ai-message typing-indicator';
        indicator.id = 'typing-indicator';
        
        indicator.innerHTML = `
            <div class="message-avatar">､・/div>
            <div class="message-content">
                <div class="message-text">
                    <span>AI 縺悟・蜉帑ｸｭ</span>
                    <div class="typing-dots">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                </div>
            </div>
        `;
        
        messagesContainer.appendChild(indicator);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    
    hideTypingIndicator() {
        const indicator = document.getElementById('typing-indicator');
        if (indicator) {
            indicator.remove();
        }
    }
    
    clearChat() {
        const messagesContainer = document.getElementById('chat-messages');
        if (!messagesContainer) return;
        
        // 譛蛻昴・AI繝｡繝・そ繝ｼ繧ｸ莉･螟悶ｒ蜑企勁
        const messages = messagesContainer.querySelectorAll('.chat-message');
        messages.forEach((msg, index) => {
            if (index > 0) msg.remove();
        });
        
        // 繝・・繧ｿ繧偵け繝ｪ繧｢
        this.chatMessages = [];
        if (this.geminiService) {
            this.geminiService.clearChatHistory();
        }
        
        this.saveChatHistory();
        this.showToast('繝√Ε繝・ヨ螻･豁ｴ繧偵け繝ｪ繧｢縺励∪縺励◆', 'success');
    }
    
    saveChatHistory() {
        localStorage.setItem('chat-history', JSON.stringify(this.chatMessages));
    }
    
    loadChatHistory() {
        try {
            const history = localStorage.getItem('chat-history');
            if (history) {
                this.chatMessages = JSON.parse(history);
                // UI縺ｯ蠕ｩ蜈・＠縺ｪ縺・ｼ域眠縺励＞繧ｻ繝・す繝ｧ繝ｳ縺ｨ縺励※髢句ｧ具ｼ・            }
        } catch (error) {
            console.warn('Failed to load chat history:', error);
            this.chatMessages = [];
        }
    }


    // === 繧ｲ繝ｼ繝驕ｸ謚槭→繝繝・す繝･繝懊・繝画ｩ溯・ ===
    initGameSelection() {
        console.log('Initializing game selection...');
        
        // 繧ｲ繝ｼ繝驕ｸ謚櫁ｪ伜ｰ弱・繧ｿ繝ｳ
        const gotoGameSelectionBtn = document.getElementById('goto-game-selection');
        if (gotoGameSelectionBtn) {
            gotoGameSelectionBtn.addEventListener('click', () => {
                this.goToGameSelection();
            });
        }
        
        // 繧ｲ繝ｼ繝繧ｫ繝ｼ繝峨・繧ｯ繝ｪ繝・け繧､繝吶Φ繝医ｒ險ｭ螳・        this.setupGameActionButtons();
        
        // 蛻晄悄迥ｶ諷九・繝√ぉ繝・け
        this.checkGameSelection();
    }
    
    setupGameCardEvents() {
        // 繧ｲ繝ｼ繝繧ｫ繝ｼ繝峨・蛻晏屓險ｭ螳・        this.setupGameCards();
        
        // 繧ｲ繝ｼ繝繧ｫ繝ｼ繝峨′蜍慕噪逕滓・縺輔ｌ繧句ｴ蜷医・縺溘ａ縺ｮ蜀崎ｩｦ陦梧ｩ滓ｧ・        setTimeout(() => this.setupGameCards(), 500);
        setTimeout(() => this.setupGameCards(), 1500);
        
        // 遒ｺ隱阪・繧ｭ繝｣繝ｳ繧ｻ繝ｫ繝懊ち繝ｳ縺ｮ險ｭ螳・        this.setupGameActionButtons();
    }
    
    setupGameCards() {
        const gameCards = document.querySelectorAll('.game-option');
        console.log(`Found ${gameCards.length} game cards`);
        
        gameCards.forEach((card) => {
            // 繧ｯ繝ｪ繝・け繧､繝吶Φ繝医Μ繧ｹ繝翫・霑ｽ蜉
            card.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('Game card clicked:', card.dataset.gameName);
                this.selectGame(card);
            });
            
            // 繧ｭ繝ｼ繝懊・繝峨い繧ｯ繧ｻ繧ｷ繝薙Μ繝・ぅ
            card.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    this.selectGame(card);
                }
            });
            
            // 繝槭え繧ｹ繧ｪ繝ｼ繝舌・蜉ｹ譫・            card.addEventListener('mouseenter', () => {
                if (!card.classList.contains('selected')) {
                    card.style.transform = 'scale(1.02)';
                }
            });
            
            card.addEventListener('mouseleave', () => {
                if (!card.classList.contains('selected')) {
                    card.style.transform = 'scale(1)';
                }
            });
            
            // 繧ｯ繝ｪ繝・け蜿ｯ閭ｽ縺ｧ縺ゅｋ縺薙→繧呈・遉ｺ縺吶ｋ繧ｹ繧ｿ繧､繝ｫ
            card.style.cursor = 'pointer';
        });
        
        // 迴ｾ蝨ｨ驕ｸ謚槭＆繧後※縺・ｋ繧ｲ繝ｼ繝縺後≠繧後・陦ｨ遉ｺ
        this.restoreGameSelection();
    }
    
    setupGameActionButtons() {
        const confirmBtn = document.getElementById('confirm-game-btn');
        const cancelBtn = document.getElementById('cancel-game-btn');
        
        if (confirmBtn) {
            confirmBtn.addEventListener('click', () => this.confirmGameSelection());
        }
        if (cancelBtn) {
            cancelBtn.addEventListener('click', () => this.hideGameSelector());
        }
    }
    
    generateGameId(gameName) {
        // 譌･譛ｬ隱槭ご繝ｼ繝蜷阪ｒ闍ｱ隱曵D縺ｫ螟画鋤
        const gameIdMap = {
            'League of Legends': 'lol',
            'Valorant': 'valorant',
            'Overwatch 2': 'overwatch2',
            'Counter-Strike 2': 'cs2',
            'Apex Legends': 'apex',
            'Fortnite': 'fortnite',
            'Call of Duty': 'cod',
            'Rainbow Six Siege': 'r6',
            'Rocket League': 'rocketleague',
            'FIFA 24': 'fifa24',
            'NBA 2K24': 'nba2k24',
            'Gran Turismo 7': 'gt7'
        };
        
        return gameIdMap[gameName] || gameName.toLowerCase().replace(/\s+/g, '_');
    }
    
    restoreGameSelection() {
        const selectedGameId = localStorage.getItem('selectedGame');
        if (selectedGameId) {
            const selectedCard = document.querySelector(`.game-option[data-game-id="${selectedGameId}"]`);
            if (selectedCard) {
                selectedCard.classList.add('selected');
            }
        }
    }
    
    goToGameSelection() {
        // 險ｭ螳壹ち繝悶↓遘ｻ蜍・        this.showPage('settings');
        
        // 繝翫ン繧ｲ繝ｼ繧ｷ繝ｧ繝ｳ縺ｮ繧｢繧ｯ繝・ぅ繝也憾諷九ｒ譖ｴ譁ｰ
        const navBtns = document.querySelectorAll('.nav-btn');
        navBtns.forEach(btn => {
            btn.classList.remove('active');
            if (btn.dataset.page === 'settings') {
                btn.classList.add('active');
            }
        });
        
        // 繧ｲ繝ｼ繝驕ｸ謚槭お繝ｪ繧｢縺ｾ縺ｧ繧ｹ繧ｯ繝ｭ繝ｼ繝ｫ
        setTimeout(() => {
            const gameSelection = document.getElementById('current-game-display');
            if (gameSelection) {
                gameSelection.scrollIntoView({ 
                    behavior: 'smooth', 
                    block: 'center' 
                });
            }
            
            // 繧ｲ繝ｼ繝驕ｸ謚槭ｒ髢九￥
            this.showGameSelector();
            
            // 繝上う繝ｩ繧､繝医い繝九Γ繝ｼ繧ｷ繝ｧ繝ｳ
            const gameSelector = document.getElementById('game-selector');
            if (gameSelector) {
                gameSelector.classList.add('highlight');
                setTimeout(() => {
                    gameSelector.classList.remove('highlight');
                }, 1500);
            }
        }, 300);
    }
    
    checkGameSelection() {
        const selectedGame = localStorage.getItem('selectedGame');
        const selectedGameData = localStorage.getItem('selectedGameData');

        if (selectedGame && selectedGameData) {
            // 繧ｲ繝ｼ繝縺碁∈謚樊ｸ医∩
            this.updateUIWithGameData(JSON.parse(selectedGameData));
        } else {
            // Street Fighter 6蟆ら畑縺ｪ縺ｮ縺ｧ縲√ご繝ｼ繝繝・・繧ｿ繧定・蜍戊ｨｭ螳・            const sf6GameData = {
                id: 'sf6',
                name: 'Street Fighter 6',
                icon: '相',
                category: '譬ｼ髣倥ご繝ｼ繝'
            };

            localStorage.setItem('selectedGame', sf6GameData.id);
            localStorage.setItem('selectedGameData', JSON.stringify(sf6GameData));
            this.updateUIWithGameData(sf6GameData);
        }
    }
    
    selectGame(gameCard) {
        // 莉悶・繧ｫ繝ｼ繝峨・驕ｸ謚槭ｒ隗｣髯､
        const allCards = document.querySelectorAll('.game-option');
        allCards.forEach(card => card.classList.remove('selected'));
        
        // 驕ｸ謚槭＠縺溘き繝ｼ繝峨ｒ繝上う繝ｩ繧､繝・        gameCard.classList.add('selected');
    }
    
    confirmGameSelection() {
        const selectedCard = document.querySelector('.game-option.selected');
        if (!selectedCard) {
            this.showToast('繧ｲ繝ｼ繝繧帝∈謚槭＠縺ｦ縺上□縺輔＞', 'warning');
            return;
        }
        
        // 繧ｲ繝ｼ繝諠・ｱ繧貞叙蠕・        const gameId = selectedCard.dataset.gameId;
        const gameName = selectedCard.dataset.gameName || selectedCard.querySelector('.game-option-name').textContent;
        const gameIcon = selectedCard.dataset.gameIcon || selectedCard.querySelector('.game-option-icon').textContent;
        const categoryName = selectedCard.dataset.category || selectedCard.closest('.game-category-section')?.querySelector('.category-title')?.textContent || '縺昴・莉・;
        
        const gameData = {
            id: gameId,
            name: gameName,
            icon: gameIcon,
            category: categoryName
        };
        
        // LocalStorage縺ｫ菫晏ｭ・        localStorage.setItem('selectedGame', gameId);
        localStorage.setItem('selectedGameData', JSON.stringify(gameData));
        
        // UI繧呈峩譁ｰ
        this.updateUIWithGameData(gameData);
        this.hideGameSelector();
        this.hideGameSelectionGuidance();
        
        this.showToast(`${gameName} 繧帝∈謚槭＠縺ｾ縺励◆`, 'success');

        // 繧ｳ繝ｼ繝√Φ繧ｰ繧呈峩譁ｰ
        this.refreshDailyCoaching();

        // 繝繝・す繝･繝懊・繝峨↓謌ｻ繧・        setTimeout(() => {
            this.showPage('dashboard');
            const navBtns = document.querySelectorAll('.nav-btn');
            navBtns.forEach(btn => {
                btn.classList.remove('active');
                if (btn.dataset.page === 'dashboard') {
                    btn.classList.add('active');
                }
            });
        }, 1000);
    }
    
    updateUIWithGameData(gameData) {
        // 繝繝・す繝･繝懊・繝画峩譁ｰ
        const playerGame = document.getElementById('player-game');
        const currentGameName = document.getElementById('current-game-name');
        const currentGameIcon = document.getElementById('current-game-icon');
        const currentGameCategory = document.getElementById('current-game-category');
        
        if (playerGame) playerGame.textContent = gameData.name;
        if (currentGameName) currentGameName.textContent = gameData.name;
        if (currentGameIcon) currentGameIcon.textContent = gameData.icon;
        if (currentGameCategory) currentGameCategory.textContent = gameData.category;
        
        // 繧ｵ繝ｳ繝励Ν繝・・繧ｿ繧定｡ｨ遉ｺ
        this.loadSampleGameData(gameData);
    }
    
    loadSampleGameData(gameData) {
        // 繝励Ξ繧､繝､繝ｼ蜷阪ｒ繧ｫ繧ｹ繧ｿ繝槭う繧ｺ
        const playerName = document.getElementById('player-name');
        if (playerName) {
            playerName.textContent = `${gameData.name} 繝励Ξ繧､繝､繝ｼ`;
        }

        // 繝ｩ繝ｳ繧ｯ繧定ｨｭ螳夲ｼ亥崋螳壹・萓九ゅ％縺薙・繝ｩ繝ｳ繝繝縺ｧ縺ｯ縺ｪ縺・◆繧∝ｾ捺擂騾壹ｊ・・        const playerRank = document.getElementById('player-rank');
        if (playerRank) {
            const ranks = {
                'League of Legends': 'Gold II',
                'Valorant': 'Diamond I',
                'Overwatch 2': 'Platinum III',
                'Counter-Strike 2': 'Global Elite',
                'Apex Legends': 'Diamond IV'
            };
            playerRank.textContent = ranks[gameData.name] || 'Platinum II';
        }

        // 1) 縺ｾ縺壹・菫晏ｭ俶ｸ医∩縺ｮ邨ｱ險医′縺ゅｌ縺ｰ縺昴ｌ繧剃ｽｿ逕ｨ・亥ｮ牙ｮ夊｡ｨ遉ｺ・・        let stableStats = null;
        if (this.playerStatsManager && this.playerStatsManager.hasValidStats()) {
            stableStats = this.playerStatsManager.getPlayerStats();
        }

        // 2) 菫晏ｭ俶ｸ医∩縺ｮ邨ｱ險医′縺ｪ縺・ｴ蜷医・菴輔ｂ縺励↑縺・ｼ亥・譛溽憾諷九・縲・縲阪・縺ｾ縺ｾ・・
        // 3) UI 縺ｸ蜿肴丐・亥ｭ伜惠縺励↑縺代ｌ縺ｰ繝上う繝輔Φ縺ｮ縺ｾ縺ｾ・・        if (stableStats) {
            const mapping = {
                'win-rate': `${Number(stableStats.winRate).toFixed(0)}%`,
                'avg-drive-rush-attempts': `${Number(stableStats.avgDriveRushAttempts || 0).toFixed(1)}`,
                'drive-impact-success-rate': `${Number(stableStats.driveImpactSuccessRate || 0).toFixed(1)}%`,
                'burnout-frequency': `${Number(stableStats.burnoutFrequency || 0).toFixed(1)}`,
                'anti-air-success-rate': `${Number(stableStats.antiAirSuccessRate || 0).toFixed(1)}%`,
                'throw-tech-rate': `${Number(stableStats.throwTechRate || 0).toFixed(1)}%`,
                'games-played': `${parseInt(stableStats.gamesPlayed, 10)}`
            };
            Object.entries(mapping).forEach(([id, value]) => {
                const el = document.getElementById(id);
                if (el) el.textContent = value;
            });
            // 繝√Ε繝ｼ繝亥・譛溷喧・井ｿ晏ｭ倥＠縺ｦ縺・ｋ蝣ｴ蜷医・縺ｿ・・            if (this.playerStatsManager) {
                this.playerStatsManager.loadStatsToUI();
            }
        }
    }
    
    generateRandomStat(min, max, suffix = '', decimals = 0) {
        const value = Math.random() * (max - min) + min;
        return decimals > 0 ? value.toFixed(decimals) + suffix : Math.floor(value) + suffix;
    }
    
    clearGameData() {
        const playerGame = document.getElementById('player-game');
        const currentGameName = document.getElementById('current-game-name');
        
        if (playerGame) playerGame.textContent = '繧ｲ繝ｼ繝譛ｪ驕ｸ謚・;
        if (currentGameName) currentGameName.textContent = '繧ｲ繝ｼ繝繧帝∈謚槭＠縺ｦ縺上□縺輔＞';
        
        // 邨ｱ險医ｒ縲・縲阪↓謌ｻ縺・        ['win-rate', 'avg-drive-rush-attempts', 'drive-impact-success-rate', 'burnout-frequency', 'anti-air-success-rate', 'throw-tech-rate', 'games-played'].forEach(id => {
            const element = document.getElementById(id);
            if (element) element.textContent = '-';
        });
    }
    
    showGameSelectionGuidance() {
        const guidance = document.getElementById('game-selection-guidance');
        if (guidance) {
            guidance.classList.remove('hidden');
        }
    }
    
    hideGameSelectionGuidance() {
        const guidance = document.getElementById('game-selection-guidance');
        if (guidance) {
            guidance.classList.add('hidden');
        }
    }

    // 繧ｹ繧ｭ繝ｫ繝ｬ繝吶Ν驕ｸ謚樣未騾｣縺ｮ繝｡繧ｽ繝・ラ
    showSkillSelector() {
        const selector = document.getElementById('skill-selector');
        if (selector) {
            selector.classList.remove('hidden');
            // 繧ｹ繧ｭ繝ｫ繝ｬ繝吶Ν繧ｪ繝励す繝ｧ繝ｳ縺ｮ繧ｯ繝ｪ繝・け繧､繝吶Φ繝医ｒ險ｭ螳・            this.setupSkillOptions();
        }
    }

    hideSkillSelector() {
        const selector = document.getElementById('skill-selector');
        if (selector) {
            selector.classList.add('hidden');
            // 驕ｸ謚樒憾諷九ｒ繧ｯ繝ｪ繧｢
            const skillOptions = document.querySelectorAll('.skill-option');
            skillOptions.forEach(option => option.classList.remove('selected'));
        }
    }

    setupSkillOptions() {
        const skillOptions = document.querySelectorAll('.skill-option');
        skillOptions.forEach(option => {
            option.addEventListener('click', () => {
                this.selectSkillLevel(option);
            });
        });
    }

    selectSkillLevel(skillOption) {
        // 莉悶・繧ｪ繝励す繝ｧ繝ｳ縺ｮ驕ｸ謚槭ｒ隗｣髯､
        const allOptions = document.querySelectorAll('.skill-option');
        allOptions.forEach(option => option.classList.remove('selected'));

        // 驕ｸ謚槭＠縺溘が繝励す繝ｧ繝ｳ繧偵ワ繧､繝ｩ繧､繝・        skillOption.classList.add('selected');
    }

    confirmSkillSelection() {
        const selectedOption = document.querySelector('.skill-option.selected');
        if (!selectedOption) {
            this.showToast('繧ｹ繧ｭ繝ｫ繝ｬ繝吶Ν繧帝∈謚槭＠縺ｦ縺上□縺輔＞', 'warning');
            return;
        }

        const skillLevel = selectedOption.dataset.skill;
        const skillInfo = this.getSkillLevelInfo(skillLevel);

        // LocalStorage縺ｫ菫晏ｭ・        localStorage.setItem('playerSkillLevel', skillLevel);
        localStorage.setItem('playerSkillLevelData', JSON.stringify(skillInfo));

        // UI繧呈峩譁ｰ
        this.updateSkillLevelUI(skillInfo);
        this.hideSkillSelector();

        this.showToast(`繧ｹ繧ｭ繝ｫ繝ｬ繝吶Ν繧・{skillInfo.name}縺ｫ險ｭ螳壹＠縺ｾ縺励◆`, 'success');

        // 繧ｳ繝ｼ繝√Φ繧ｰ繧呈峩譁ｰ
        this.refreshDailyCoaching();
    }

    getSkillLevelInfo(skillLevel) {
        const skillLevels = {
            beginner: {
                name: '蛻晏ｿ・・,
                description: '蝓ｺ譛ｬ逧・↑繧ｲ繝ｼ繝繝｡繧ｫ繝九け繧ｹ繧貞ｭｦ鄙剃ｸｭ',
                icon: '験'
            },
            intermediate: {
                name: '荳ｭ邏夊・,
                description: '繧ｲ繝ｼ繝縺ｮ蝓ｺ譛ｬ縺ｯ逅・ｧ｣縺励∽ｸ企＃繧堤岼謖・＠縺ｦ縺・ｋ',
                icon: '投'
            },
            advanced: {
                name: '荳顔ｴ夊・,
                description: '鬮伜ｺｦ縺ｪ謌ｦ逡･縺ｨ謚陦薙ｒ霄ｫ縺ｫ縺､縺代※縺・ｋ',
                icon: '醇'
            }
        };
        return skillLevels[skillLevel] || skillLevels.intermediate;
    }

    updateSkillLevelUI(skillInfo) {
        const currentSkillLevel = document.getElementById('current-skill-level');
        const currentSkillDescription = document.getElementById('current-skill-description');
        const currentSkillIcon = document.getElementById('current-skill-icon');

        if (currentSkillLevel) currentSkillLevel.textContent = skillInfo.name;
        if (currentSkillDescription) currentSkillDescription.textContent = skillInfo.description;
        if (currentSkillIcon) currentSkillIcon.textContent = skillInfo.icon;
    }

    initializeSkillLevel() {
        // 菫晏ｭ俶ｸ医∩縺ｮ繧ｹ繧ｭ繝ｫ繝ｬ繝吶Ν縺後≠繧後・蠕ｩ蜈・        const savedSkillLevel = localStorage.getItem('playerSkillLevel');
        const savedSkillData = localStorage.getItem('playerSkillLevelData');

        if (savedSkillLevel && savedSkillData) {
            const skillInfo = JSON.parse(savedSkillData);
            this.updateSkillLevelUI(skillInfo);
        } else {
            // 繝・ヵ繧ｩ繝ｫ繝医〒荳ｭ邏夊・ｒ險ｭ螳・            const defaultSkill = this.getSkillLevelInfo('intermediate');
            this.updateSkillLevelUI(defaultSkill);
            localStorage.setItem('playerSkillLevel', 'intermediate');
            localStorage.setItem('playerSkillLevelData', JSON.stringify(defaultSkill));
        }
    }

    // 譌･譖ｿ繧上ｊ繧ｳ繝ｼ繝√Φ繧ｰ讖溯・縺ｮ蛻晄悄蛹・    initDailyCoaching() {
        // CoachingService繧貞・譛溷喧
        if (typeof CoachingService !== 'undefined') {
            this.coachingService = new CoachingService();
        } else {
            console.warn('CoachingService not found');
            return;
        }

        // 譌･譖ｿ繧上ｊ繧ｳ繝ｼ繝√Φ繧ｰ繧定｡ｨ遉ｺ
        this.loadDailyCoaching();

        // 騾ｲ謐礼ｵｱ險医ｒ譖ｴ譁ｰ
        this.updateCoachingProgress();
    }

    async loadDailyCoaching() {
        if (!this.coachingService) return;

        try {
            // 繝ｦ繝ｼ繧ｶ繝ｼ繝励Ο繝輔ぃ繧､繝ｫ繧貞叙蠕・            const userProfile = this.getUserProfile();

            if (!userProfile.gameGenre || !userProfile.skillLevel) {
                // 繝励Ο繝輔ぃ繧､繝ｫ縺瑚ｨｭ螳壹＆繧後※縺・↑縺・ｴ蜷医・繝励Ξ繝ｼ繧ｹ繝帙Ν繝繝ｼ繧定｡ｨ遉ｺ
                this.showCoachingPlaceholder();
                return;
            }

            // 繝ｭ繝ｼ繝・ぅ繝ｳ繧ｰ迥ｶ諷九ｒ陦ｨ遉ｺ
            this.showCoachingLoading();

            // 譛ｬ譌･縺ｮ繧ｳ繝ｼ繝√Φ繧ｰ繧｢繝峨ヰ繧､繧ｹ繧貞叙蠕暦ｼ磯撼蜷梧悄・・            const dailyAdvice = await this.coachingService.getDailyCoaching(userProfile);

            if (dailyAdvice) {
                this.displayCoachingAdvice(dailyAdvice);

                // 繧ｽ繝ｼ繧ｹ陦ｨ遉ｺ・医ョ繝舌ャ繧ｰ逕ｨ・・                if (dailyAdvice.source === 'gemini') {
                    console.log('CoachingService: Using AI-generated advice');
                } else if (dailyAdvice.source === 'cached_fallback') {
                    this.showToast('繝ｬ繝ｼ繝亥宛髯舌・縺溘ａ縲∵怙霑代・繧｢繝峨ヰ繧､繧ｹ繧定｡ｨ遉ｺ縺励※縺・∪縺・, 'info');
                } else if (dailyAdvice.source === 'fallback') {
                    console.log('CoachingService: Using fallback static advice');
                }
            } else {
                this.showCoachingPlaceholder();
            }
        } catch (error) {
            console.error('Failed to load daily coaching:', error);
            this.showCoachingError(error);
        }
    }

    getUserProfile() {
        // 繧ｲ繝ｼ繝諠・ｱ繧貞叙蠕・        const selectedGame = localStorage.getItem('selectedGame');
        const gameData = localStorage.getItem('selectedGameData');

        // 繧ｹ繧ｭ繝ｫ繝ｬ繝吶Ν諠・ｱ繧貞叙蠕・        const skillLevel = localStorage.getItem('playerSkillLevel');

        // 逶ｮ讓呎ュ蝣ｱ繧貞叙蠕・        const currentGoals = this.getCurrentGoalsFromStorage();
        const weeklyGoals = this.getWeeklyGoalsFromStorage();

        let gameGenre = null;

        if (selectedGame && gameData) {
            const game = JSON.parse(gameData);
            // 繧ｲ繝ｼ繝繧ｫ繝・ざ繝ｪ繧偵ず繝｣繝ｳ繝ｫ縺ｫ繝槭ャ繝斐Φ繧ｰ
            const categoryToGenre = {
                'FPS': 'fps',
                'MOBA': 'moba',
                '譬ｼ髣倥ご繝ｼ繝': 'fighting',
                '繧ｹ繝医Λ繝・ず繝ｼ': 'strategy'
            };
            gameGenre = categoryToGenre[game.category] || 'universal';
        }

        return {
            gameGenre,
            skillLevel: skillLevel || 'intermediate',
            currentGoals: currentGoals || [],
            weeklyGoals: weeklyGoals || []
        };
    }

    displayCoachingAdvice(advice) {
        // HTML繧ｨ繝ｬ繝｡繝ｳ繝医ｒ蜿門ｾ・        const headlineEl = document.getElementById('coaching-headline');
        const coreContentEl = document.getElementById('coaching-core-content');
        const practicalStepEl = document.getElementById('coaching-practical-step');
        const dateEl = document.getElementById('coaching-date');
        const goalConnectionEl = document.getElementById('coaching-goal-connection');
        const goalConnectionContainer = document.getElementById('coaching-goal-connection-container');

        // 繧ｳ繝ｳ繝・Φ繝・ｒ譖ｴ譁ｰ
        if (headlineEl) headlineEl.textContent = advice.headline;
        if (coreContentEl) coreContentEl.textContent = advice.coreContent;
        if (practicalStepEl) practicalStepEl.textContent = advice.practicalStep;
        if (dateEl) {
            const today = new Date();
            dateEl.textContent = `${today.getMonth() + 1}/${today.getDate()}`;
        }

        // 逶ｮ讓吶→縺ｮ髢｢騾｣諤ｧ繧定｡ｨ遉ｺ
        if (goalConnectionEl && goalConnectionContainer && advice.goalConnection) {
            goalConnectionEl.textContent = advice.goalConnection;
            goalConnectionContainer.style.display = 'block';
        } else if (goalConnectionContainer) {
            goalConnectionContainer.style.display = 'none';
        }

        // 莉頑律縺ｮ繧｢繝峨ヰ繧､繧ｹID繧剃ｿ晏ｭ假ｼ医ヵ繧｣繝ｼ繝峨ヰ繝・け逕ｨ・・        this.currentAdviceId = advice.id;

        // 繝輔ぅ繝ｼ繝峨ヰ繝・け繝懊ち繝ｳ縺ｮ迥ｶ諷九ｒ蠕ｩ蜈・        this.restoreFeedbackState();
    }

    showCoachingPlaceholder() {
        const headlineEl = document.getElementById('coaching-headline');
        const coreContentEl = document.getElementById('coaching-core-content');
        const practicalStepEl = document.getElementById('coaching-practical-step');

        if (headlineEl) headlineEl.textContent = '繧ｳ繝ｼ繝√Φ繧ｰ繧呈ｺ門ｙ荳ｭ...';
        if (coreContentEl) {
            coreContentEl.textContent = '繧ｲ繝ｼ繝繧帝∈謚槭＠縺ｦ繧ｹ繧ｭ繝ｫ繝ｬ繝吶Ν繧定ｨｭ螳壹☆繧九→縲√ヱ繝ｼ繧ｽ繝翫Λ繧､繧ｺ縺輔ｌ縺溘さ繝ｼ繝√Φ繧ｰ繧｢繝峨ヰ繧､繧ｹ縺瑚｡ｨ遉ｺ縺輔ｌ縺ｾ縺吶・;
        }
        if (practicalStepEl) {
            practicalStepEl.textContent = '險ｭ螳壹ｒ螳御ｺ・＠縺ｦ縲∽ｻ頑律縺ｮ繧｢繝峨ヰ繧､繧ｹ繧貞女縺大叙繧翫∪縺励ｇ縺・ｼ・;
        }

        this.currentAdviceId = null;
    }

    showCoachingLoading() {
        const headlineEl = document.getElementById('coaching-headline');
        const coreContentEl = document.getElementById('coaching-core-content');
        const practicalStepEl = document.getElementById('coaching-practical-step');

        if (headlineEl) headlineEl.textContent = 'AI縺御ｻ頑律縺ｮ繧｢繝峨ヰ繧､繧ｹ繧堤函謌蝉ｸｭ...';
        if (coreContentEl) {
            coreContentEl.textContent = '縺ゅ↑縺溘・繝励Ο繝輔ぅ繝ｼ繝ｫ縺ｨ繝輔ぅ繝ｼ繝峨ヰ繝・け螻･豁ｴ繧貞・譫舌＠縺ｦ縲∵怙驕ｩ縺ｪ繧ｳ繝ｼ繝√Φ繧ｰ繧｢繝峨ヰ繧､繧ｹ繧剃ｽ懈・縺励※縺・∪縺吶ょｰ代・♀蠕・■縺上□縺輔＞縲・;
        }
        if (practicalStepEl) {
            practicalStepEl.textContent = '竢ｳ 逕滓・荳ｭ...';
        }

        this.currentAdviceId = null;
    }

    showCoachingError(error) {
        const headlineEl = document.getElementById('coaching-headline');
        const coreContentEl = document.getElementById('coaching-core-content');
        const practicalStepEl = document.getElementById('coaching-practical-step');

        if (headlineEl) headlineEl.textContent = '繧ｳ繝ｼ繝√Φ繧ｰ蜿門ｾ嶺ｸｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆';
        if (coreContentEl) {
            if (error.message && error.message.includes('Rate limit')) {
                coreContentEl.textContent = 'API縺ｮ蛻ｩ逕ｨ蛻ｶ髯舌↓驕斐＠縺ｾ縺励◆縲ゅ＠縺ｰ繧峨￥譎る俣繧偵♀縺・※縺九ｉ蜀榊ｺｦ縺願ｩｦ縺励￥縺縺輔＞縲りｨｭ螳夂判髱｢縺九ｉ謇句虚縺ｧ繝ｪ繝輔Ξ繝・す繝･縺吶ｋ縺薙→繧ょ庄閭ｽ縺ｧ縺吶・;
            } else {
                coreContentEl.textContent = '繧｢繝峨ヰ繧､繧ｹ縺ｮ蜿門ｾ嶺ｸｭ縺ｫ蝠城｡後′逋ｺ逕溘＠縺ｾ縺励◆縲ゅロ繝・ヨ繝ｯ繝ｼ繧ｯ謗･邯壹→API險ｭ螳壹ｒ遒ｺ隱阪＠縺ｦ縺上□縺輔＞縲・;
            }
        }
        if (practicalStepEl) {
            practicalStepEl.textContent = '縺励・繧峨￥縺励※縺九ｉ繝壹・繧ｸ繧貞・隱ｭ縺ｿ霎ｼ縺ｿ縺励※縺ｿ縺ｦ縺上□縺輔＞縲・;
        }

        this.currentAdviceId = null;
    }

    // 蛻晄悄險ｭ螳壹Δ繝ｼ繝繝ｫ髢｢騾｣縺ｮ繝｡繧ｽ繝・ラ
    showInitialSetupModal() {
        const modal = document.getElementById('initial-setup-modal');
        if (modal) {
            modal.classList.remove('hidden');
            modal.style.display = 'flex';
            this.currentSetupStep = 1;

            // Street Fighter 6蝗ｺ螳壹↑縺ｮ縺ｧ縲√ご繝ｼ繝驕ｸ謚槭ｒ繧ｹ繧ｭ繝・・
            this.selectedGameData = {
                id: 'sf6',
                name: 'Street Fighter 6',
                icon: '相',
                category: '譬ｼ髣倥ご繝ｼ繝'
            };
            this.selectedSkillLevel = null;

            // 蛻晄悄險ｭ螳壹Μ繧ｹ繝翫・繧定ｨｭ螳・            this.setupInitialSetupListeners();

            // 繝懊ち繝ｳ縺ｮ蛻晄悄迥ｶ諷九ｒ遒ｺ隱・            this.debugButtonStates();
        }
    }

    closeInitialSetupModal() {
        const modal = document.getElementById('initial-setup-modal');
        if (modal) {
            modal.classList.add('hidden');
            modal.style.display = 'none';
        }
    }

    generateGameOptions() {
        console.log('generateGameOptions called');
        const gameGrid = document.getElementById('setup-game-grid');
        if (!gameGrid) {
            console.error('Game grid element not found');
            return;
        }
        if (!this.gameManager) {
            console.error('Game manager not initialized');
            return;
        }

        gameGrid.innerHTML = '';

        const gameCategories = this.gameManager.getGameCategories();
        console.log('Game categories:', gameCategories);

        let gameCount = 0;
        Object.keys(gameCategories).forEach(categoryId => {
            const category = gameCategories[categoryId];

            if (categoryId === 'other') return; // 繧ｫ繧ｹ繧ｿ繝繧ｲ繝ｼ繝縺ｯ髯､螟・
            category.games.forEach(game => {
                const gameCard = document.createElement('div');
                gameCard.className = 'game-option-card';
                gameCard.dataset.gameId = game.id;
                gameCard.dataset.gameName = game.name;
                gameCard.dataset.gameIcon = game.icon;
                gameCard.dataset.gameCategory = category.name;

                gameCard.innerHTML = `
                    <div class="game-icon">${game.icon}</div>
                    <div class="game-name">${game.name}</div>
                    <div class="game-category">${category.name}</div>
                `;

                gameCard.addEventListener('click', () => {
                    console.log('Game card clicked:', game.name);
                    this.selectSetupGame(gameCard);
                });

                gameGrid.appendChild(gameCard);
                gameCount++;
            });
        });

        console.log(`Generated ${gameCount} game cards`);
    }

    selectSetupGame(gameCard) {
        console.log('selectSetupGame called, gameCard:', gameCard);

        // 莉悶・繧ｫ繝ｼ繝峨・驕ｸ謚槭ｒ隗｣髯､
        const allCards = document.querySelectorAll('.game-option-card');
        allCards.forEach(card => card.classList.remove('selected'));

        // 驕ｸ謚槭＠縺溘き繝ｼ繝峨ｒ繝上う繝ｩ繧､繝・        gameCard.classList.add('selected');

        // 繧ｲ繝ｼ繝繝・・繧ｿ繧剃ｿ晏ｭ・        this.selectedGameData = {
            id: gameCard.dataset.gameId,
            name: gameCard.dataset.gameName,
            icon: gameCard.dataset.gameIcon,
            category: gameCard.dataset.gameCategory
        };

        console.log('Selected game data:', this.selectedGameData);

        // 谺｡縺ｸ繝懊ち繝ｳ繧呈怏蜉ｹ蛹・        const nextBtn = document.getElementById('setup-game-next');
        if (nextBtn) {
            nextBtn.disabled = false;
            console.log('Next button enabled');
        } else {
            console.error('Next button not found');
        }
    }

    selectSetupSkill(skillCard) {
        // 莉悶・繧ｫ繝ｼ繝峨・驕ｸ謚槭ｒ隗｣髯､
        const allCards = document.querySelectorAll('.skill-card');
        allCards.forEach(card => card.classList.remove('selected'));

        // 驕ｸ謚槭＠縺溘き繝ｼ繝峨ｒ繝上う繝ｩ繧､繝・        skillCard.classList.add('selected');

        // 繧ｹ繧ｭ繝ｫ繝ｬ繝吶Ν繧剃ｿ晏ｭ・        this.selectedSkillLevel = skillCard.dataset.skill;

        // 螳御ｺ・・繧ｿ繝ｳ繧呈怏蜉ｹ蛹・        const completeBtn = document.getElementById('setup-skill-complete');
        if (completeBtn) {
            completeBtn.disabled = false;
        }
    }

    nextToSkillSelection() {
        console.log('nextToSkillSelection called, selectedGameData:', this.selectedGameData);

        if (!this.selectedGameData) {
            console.error('No game selected, cannot proceed to skill selection');
            this.showToast('繧ｲ繝ｼ繝繧帝∈謚槭＠縺ｦ縺上□縺輔＞', 'warning');
            return;
        }

        // 繧ｹ繝・ャ繝・繧帝撼陦ｨ遉ｺ縲√せ繝・ャ繝・繧定｡ｨ遉ｺ
        document.getElementById('setup-step-1').classList.add('hidden');
        document.getElementById('setup-step-2').classList.remove('hidden');

        // 繝励Ο繧ｰ繝ｬ繧ｹ繝舌・繧呈峩譁ｰ
        this.updateSetupProgress(2);

        this.currentSetupStep = 2;
        console.log('Moved to step 2');
    }

    backToGameSelection() {
        // 繧ｹ繝・ャ繝・繧帝撼陦ｨ遉ｺ縲√せ繝・ャ繝・繧定｡ｨ遉ｺ
        document.getElementById('setup-step-2').classList.add('hidden');
        document.getElementById('setup-step-1').classList.remove('hidden');

        // 繝励Ο繧ｰ繝ｬ繧ｹ繝舌・繧呈峩譁ｰ
        this.updateSetupProgress(1);

        this.currentSetupStep = 1;
    }

    completeInitialSetup() {
        if (!this.selectedSkillLevel) return;

        // Street Fighter 6蝗ｺ螳壹↑縺ｮ縺ｧ縲√ご繝ｼ繝繝・・繧ｿ繧定・蜍戊ｨｭ螳・        this.selectedGameData = {
            id: 'sf6',
            name: 'Street Fighter 6',
            icon: '相',
            category: '譬ｼ髣倥ご繝ｼ繝'
        };

        // 險ｭ螳壹ｒ菫晏ｭ・        localStorage.setItem('selectedGame', this.selectedGameData.id);
        localStorage.setItem('selectedGameData', JSON.stringify(this.selectedGameData));
        localStorage.setItem('playerSkillLevel', this.selectedSkillLevel);

        const skillInfo = this.getSkillLevelInfo(this.selectedSkillLevel);
        localStorage.setItem('playerSkillLevelData', JSON.stringify(skillInfo));

        // 蛻晏屓險ｭ螳壼ｮ御ｺ・ヵ繝ｩ繧ｰ繧定ｨｭ螳・        localStorage.setItem('initialSetupCompleted', 'true');

        // 繧ｲ繝ｼ繝驕ｸ謚槭ぎ繧､繝繝ｳ繧ｹ繧帝撼陦ｨ遉ｺ縺ｫ
        this.hideGameSelectionGuidance();

        // 螳御ｺ・判髱｢繧定｡ｨ遉ｺ
        this.showSetupCompletion();
    }

    showSetupCompletion() {
        // 縺吶∋縺ｦ縺ｮ繧ｹ繝・ャ繝励ｒ髱櫁｡ｨ遉ｺ縺ｫ縺励※螳御ｺ・判髱｢繧定｡ｨ遉ｺ
        document.getElementById('setup-step-1').classList.add('hidden');
        document.getElementById('setup-step-complete').classList.remove('hidden');

        // 繝励Ο繧ｰ繝ｬ繧ｹ繝舌・繧貞ｮ御ｺ・憾諷九↓
        this.updateSetupProgress(3);

        // 繧ｵ繝槭Μ繝ｼ繧呈峩譁ｰ
        const summaryGame = document.getElementById('summary-game');
        const summarySkill = document.getElementById('summary-skill');

        if (summaryGame) summaryGame.textContent = this.selectedGameData.name;
        if (summarySkill) {
            const skillInfo = this.getSkillLevelInfo(this.selectedSkillLevel);
            summarySkill.textContent = skillInfo.name;
        }
    }

    updateSetupProgress(step) {
        const progressFill = document.getElementById('setup-progress-fill');
        const progressText = document.getElementById('setup-progress-text');

        if (progressFill && progressText) {
            switch (step) {
                case 1:
                    progressFill.style.width = '33%';
                    progressText.textContent = '繧ｹ繝・ャ繝・1 / 3';
                    break;
                case 2:
                    progressFill.style.width = '66%';
                    progressText.textContent = '繧ｹ繝・ャ繝・2 / 3';
                    break;
                case 3:
                    progressFill.style.width = '100%';
                    progressText.textContent = '螳御ｺ・;
                    break;
            }
        }
    }

    async startApp() {
        // 蛻晄悄險ｭ螳壹Δ繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        this.closeInitialSetupModal();

        // 螳御ｺ・Γ繝・そ繝ｼ繧ｸ繧定｡ｨ遉ｺ縺励√・繝ｼ繧ｸ繧偵Μ繝ｭ繝ｼ繝峨＠縺ｦ蛻晄悄蛹悶・繝ｭ繧ｻ繧ｹ繧貞・螳溯｡・        this.showToast('險ｭ螳壹ｒ菫晏ｭ倥＠縺ｾ縺励◆縲ゅい繝励Μ繧定ｵｷ蜍輔＠縺ｾ縺・..', 'success');
        setTimeout(() => {
            window.location.reload();
        }, 1000); // 1遘貞ｾ・▲縺ｦ縺九ｉ繝ｪ繝ｭ繝ｼ繝・    }

    setupInitialSetupListeners() {
        console.log('Setting up initial setup listeners...');

        // 譌｢蟄倥・繝ｪ繧ｹ繝翫・繧偵け繝ｪ繧｢・磯㍾隍・亟豁｢・・        this.clearInitialSetupListeners();

        // Street Fighter 6蟆ら畑縺ｪ縺ｮ縺ｧ縲√ご繝ｼ繝驕ｸ謚槭せ繝・ャ繝励・荳崎ｦ・
        // 繧ｹ繧ｭ繝ｫ螳御ｺ・・繧ｿ繝ｳ
        const skillCompleteBtn = document.getElementById('setup-skill-complete');
        if (skillCompleteBtn) {
            this.skillCompleteHandler = () => {
                this.completeInitialSetup();
            };
            skillCompleteBtn.addEventListener('click', this.skillCompleteHandler);
        }

        // 繧｢繝励Μ髢句ｧ九・繧ｿ繝ｳ
        const startAppBtn = document.getElementById('setup-start-app');
        if (startAppBtn) {
            this.startAppHandler = async () => {
                await this.startApp();
            };
            startAppBtn.addEventListener('click', this.startAppHandler);
        }

        // 繧ｹ繧ｭ繝ｫ繧ｫ繝ｼ繝峨・繧ｯ繝ｪ繝・け繧､繝吶Φ繝・        const skillCards = document.querySelectorAll('.skill-card');
        skillCards.forEach(card => {
            const skillHandler = () => {
                this.selectSetupSkill(card);
            };
            card.addEventListener('click', skillHandler);
            // 繝上Φ繝峨Λ繝ｼ繧剃ｿ晏ｭ假ｼ亥ｾ後〒繧ｯ繝ｪ繝ｼ繝ｳ繧｢繝・・逕ｨ・・            card._skillHandler = skillHandler;
        });
    }

    clearInitialSetupListeners() {
        // Street Fighter 6蟆ら畑縺ｪ縺ｮ縺ｧ縲√ご繝ｼ繝驕ｸ謚樣未騾｣縺ｮ繝ｪ繧ｹ繝翫・縺ｯ荳崎ｦ・
        // 繧ｹ繧ｭ繝ｫ螳御ｺ・・繧ｿ繝ｳ縺ｮ繝ｪ繧ｹ繝翫・繧貞炎髯､
        const skillCompleteBtn = document.getElementById('setup-skill-complete');
        if (skillCompleteBtn && this.skillCompleteHandler) {
            skillCompleteBtn.removeEventListener('click', this.skillCompleteHandler);
        }

        // 繧｢繝励Μ髢句ｧ九・繧ｿ繝ｳ縺ｮ繝ｪ繧ｹ繝翫・繧貞炎髯､
        const startAppBtn = document.getElementById('setup-start-app');
        if (startAppBtn && this.startAppHandler) {
            startAppBtn.removeEventListener('click', this.startAppHandler);
        }

        // 繧ｹ繧ｭ繝ｫ繧ｫ繝ｼ繝峨・繝ｪ繧ｹ繝翫・繧貞炎髯､
        const skillCards = document.querySelectorAll('.skill-card');
        skillCards.forEach(card => {
            if (card._skillHandler) {
                card.removeEventListener('click', card._skillHandler);
                delete card._skillHandler;
            }
        });
    }

    debugButtonStates() {
        console.log('=== Button States Debug ===');
        const gameNextBtn = document.getElementById('setup-game-next');
        if (gameNextBtn) {
            console.log('Game next button found');
            console.log('- disabled:', gameNextBtn.disabled);
            console.log('- textContent:', gameNextBtn.textContent);
            console.log('- classList:', gameNextBtn.classList.toString());
        } else {
            console.error('Game next button not found');
        }

        const skillBackBtn = document.getElementById('setup-skill-back');
        const skillCompleteBtn = document.getElementById('setup-skill-complete');
        console.log('Skill back button found:', !!skillBackBtn);
        console.log('Skill complete button found:', !!skillCompleteBtn);
        console.log('=== End Button Debug ===');
    }

    // 蛻晏屓險ｭ螳壹′蠢・ｦ√°繝√ぉ繝・け・・treet Fighter 6蟆ら畑・・    needsInitialSetup() {
        const setupCompleted = localStorage.getItem('initialSetupCompleted');
        console.log('Setup check - setupCompleted:', setupCompleted);

        // 譏守､ｺ逧・↓蛻晄悄險ｭ螳壼ｮ御ｺ・ヵ繝ｩ繧ｰ縺荊rue縺ｮ蝣ｴ蜷医・荳崎ｦ・        if (setupCompleted === 'true') {
            return false;
        }

        // Street Fighter 6蟆ら畑縺ｪ縺ｮ縺ｧ縲√せ繧ｭ繝ｫ繝ｬ繝吶Ν縺ｮ縺ｿ繧偵メ繧ｧ繝・け
        const hasSkill = localStorage.getItem('skillLevel') || localStorage.getItem('playerSkillLevel');

        console.log('Setup check - hasSkill:', hasSkill);

        // 繧ｹ繧ｭ繝ｫ繝ｬ繝吶Ν縺瑚ｨｭ螳壹＆繧後※縺・↑縺・ｴ蜷医・縺ｿ蛻晄悄險ｭ螳壹′蠢・ｦ・        return !hasSkill;
    }

    setupCoachingFeedbackListeners() {
        const feedbackButtons = document.querySelectorAll('.feedback-btn');

        feedbackButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                const feedbackType = button.dataset.feedback;
                this.handleCoachingFeedback(feedbackType, button);
            });
        });

        // 繧ｳ繝｡繝ｳ繝域ｩ溯・縺ｮ繝ｪ繧ｹ繝翫・
        this.setupCommentFeedbackListeners();
        
        // 螻･豁ｴ讖溯・縺ｮ繝ｪ繧ｹ繝翫・
        this.setupCoachingHistoryListeners();
    }
    
    // 螻･豁ｴ讖溯・縺ｮ繧､繝吶Φ繝医Μ繧ｹ繝翫・險ｭ螳・    setupCoachingHistoryListeners() {
        const historyButton = document.getElementById('history-button');
        const closeModalButton = document.getElementById('close-modal-button');
        const modalOverlay = document.getElementById('modal-overlay');
        const searchInput = document.getElementById('search-history-input');
        
        // 螻･豁ｴ繝懊ち繝ｳ繧ｯ繝ｪ繝・け
        if (historyButton) {
            historyButton.addEventListener('click', () => {
                this.showCoachingHistoryModal();
            });
        }
        
        // 髢峨§繧九・繧ｿ繝ｳ繧ｯ繝ｪ繝・け
        if (closeModalButton) {
            closeModalButton.addEventListener('click', () => {
                this.hideCoachingHistoryModal();
            });
        }
        
        // 繧ｪ繝ｼ繝舌・繝ｬ繧､繧ｯ繝ｪ繝・け
        if (modalOverlay) {
            modalOverlay.addEventListener('click', () => {
                this.hideCoachingHistoryModal();
            });
        }
        
        // 讀懃ｴ｢蜈･蜉・        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.filterCoachingHistory(e.target.value);
            });
        }
    }
    
    // 螻･豁ｴ繝｢繝ｼ繝繝ｫ繧定｡ｨ遉ｺ
    showCoachingHistoryModal() {
        const modal = document.getElementById('history-modal');
        const overlay = document.getElementById('modal-overlay');
        
        if (modal && overlay) {
            // 螻･豁ｴ繧定ｪｭ縺ｿ霎ｼ繧薙〒陦ｨ遉ｺ
            this.displayCoachingHistory();
            
            // 繝｢繝ｼ繝繝ｫ縺ｨ繧ｪ繝ｼ繝舌・繝ｬ繧､繧定｡ｨ遉ｺ
            modal.style.display = 'flex';
            overlay.style.display = 'block';
            
            // 繧｢繝九Γ繝ｼ繧ｷ繝ｧ繝ｳ逕ｨ縺ｫ蟆代＠驕・ｻｶ
            setTimeout(() => {
                modal.style.opacity = '1';
                overlay.style.opacity = '1';
            }, 10);
        }
    }
    
    // 螻･豁ｴ繝｢繝ｼ繝繝ｫ繧帝撼陦ｨ遉ｺ
    hideCoachingHistoryModal() {
        const modal = document.getElementById('history-modal');
        const overlay = document.getElementById('modal-overlay');
        const searchInput = document.getElementById('search-history-input');
        
        if (modal && overlay) {
            // 繝輔ぉ繝ｼ繝峨い繧ｦ繝・            modal.style.opacity = '0';
            overlay.style.opacity = '0';
            
            setTimeout(() => {
                modal.style.display = 'none';
                overlay.style.display = 'none';
                
                // 讀懃ｴ｢蜈･蜉帙ｒ繧ｯ繝ｪ繧｢
                if (searchInput) {
                    searchInput.value = '';
                }
            }, 300);
        }
    }
    
    // 螻･豁ｴ繧定｡ｨ遉ｺ
    displayCoachingHistory(keyword = '') {
        const container = document.getElementById('history-list-container');
        if (!container || !this.coachingService) return;
        
        // 螻･豁ｴ繧貞叙蠕暦ｼ域､懃ｴ｢繧ｭ繝ｼ繝ｯ繝ｼ繝峨′縺ゅｌ縺ｰ邨槭ｊ霎ｼ縺ｿ・・        const history = keyword 
            ? this.coachingService.searchHistory(keyword)
            : this.coachingService.getHistory();
        
        // 繧ｳ繝ｳ繝・リ繧偵け繝ｪ繧｢
        container.innerHTML = '';
        
        // 螻･豁ｴ縺後↑縺・ｴ蜷・        if (history.length === 0) {
            if (keyword) {
                container.innerHTML = `
                    <div class="no-results-message">
                        <div class="search-icon">剥</div>
                        <h4>"${keyword}" 縺ｫ荳閾ｴ縺吶ｋ螻･豁ｴ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ縺ｧ縺励◆</h4>
                        <p>蛻･縺ｮ繧ｭ繝ｼ繝ｯ繝ｼ繝峨〒讀懃ｴ｢縺励※縺ｿ縺ｦ縺上□縺輔＞</p>
                    </div>
                `;
            } else {
                container.innerHTML = `
                    <div class="no-history-message">
                        <h4>縺ｾ縺螻･豁ｴ縺後≠繧翫∪縺帙ｓ</h4>
                        <p>繧ｳ繝ｼ繝√Φ繧ｰ繧｢繝峨ヰ繧､繧ｹ縺檎函謌舌＆繧後ｋ縺ｨ縲√％縺薙↓螻･豁ｴ縺瑚｡ｨ遉ｺ縺輔ｌ縺ｾ縺・/p>
                    </div>
                `;
            }
            return;
        }
        
        // 螻･豁ｴ繧｢繧､繝・Β繧堤函謌・        history.forEach(item => {
            const itemEl = document.createElement('div');
            itemEl.className = 'history-item';
            
            // 譌･莉倥・繝輔か繝ｼ繝槭ャ繝・            const date = new Date(item.timestamp);
            const dateStr = date.toLocaleDateString('ja-JP', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            
            itemEl.innerHTML = `
                <div class="history-item-header">
                    <span class="history-item-date">${dateStr}</span>
                </div>
                <div class="history-item-headline">${item.headline}</div>
                <div class="history-item-content">${item.coreContent}</div>
                <div class="history-item-step">
                    <strong>螳溯ｷｵ繧ｹ繝・ャ繝・</strong> ${item.practicalStep}
                </div>
                ${item.goalConnection ? `
                <div class="history-item-goal">
                    <strong>識 逶ｮ讓吶→縺ｮ髢｢騾｣:</strong> ${item.goalConnection}
                </div>
                ` : ''}
            `;
            
            container.appendChild(itemEl);
        });
    }
    
    // 螻･豁ｴ繧堤ｵ槭ｊ霎ｼ縺ｿ
    filterCoachingHistory(keyword) {
        this.displayCoachingHistory(keyword);
    }

    setupCommentFeedbackListeners() {
        const commentTextarea = document.getElementById('feedback-comment');
        const submitBtn = document.getElementById('submit-feedback-btn');
        const cancelBtn = document.getElementById('cancel-feedback-btn');
        const charCountSpan = document.getElementById('comment-char-count');

        // 繝・く繧ｹ繝医お繝ｪ繧｢縺ｮ譁・ｭ玲焚繧ｫ繧ｦ繝ｳ繝・        if (commentTextarea && charCountSpan) {
            commentTextarea.addEventListener('input', (e) => {
                const count = e.target.value.length;
                charCountSpan.textContent = count;

                // 繝懊ち繝ｳ迥ｶ諷九・譖ｴ譁ｰ
                if (submitBtn) {
                    submitBtn.disabled = count === 0 || count > 500;
                }

                // 譁・ｭ玲焚隴ｦ蜻翫・濶ｲ螟画峩
                const counter = document.querySelector('.comment-counter');
                if (counter) {
                    counter.classList.remove('warning', 'error');
                    if (count > 450) {
                        counter.classList.add('warning');
                    }
                    if (count > 500) {
                        counter.classList.add('error');
                    }
                }
            });
        }

        // 繝輔ぅ繝ｼ繝峨ヰ繝・け騾∽ｿ｡繝懊ち繝ｳ
        if (submitBtn) {
            submitBtn.addEventListener('click', () => {
                this.submitFeedbackWithComment();
            });
        }

        // 繧ｭ繝｣繝ｳ繧ｻ繝ｫ繝懊ち繝ｳ
        if (cancelBtn) {
            cancelBtn.addEventListener('click', () => {
                this.cancelFeedbackComment();
            });
        }
    }

    handleCoachingFeedback(feedbackType, buttonEl) {
        if (!this.coachingService || !this.currentAdviceId) {
            this.showToast('繝輔ぅ繝ｼ繝峨ヰ繝・け繧帝∽ｿ｡縺ｧ縺阪∪縺帙ｓ縺ｧ縺励◆', 'error');
            return;
        }

        // 驕ｸ謚槭＆繧後◆繝輔ぅ繝ｼ繝峨ヰ繝・け繧ｿ繧､繝励ｒ菫晏ｭ・        this.selectedFeedbackType = feedbackType;
        this.selectedFeedbackButton = buttonEl;

        // 繝懊ち繝ｳ縺ｮ迥ｶ諷九ｒ譖ｴ譁ｰ
        this.updateFeedbackButtonState(buttonEl);

        // 繧ｳ繝｡繝ｳ繝医そ繧ｯ繧ｷ繝ｧ繝ｳ繧定｡ｨ遉ｺ
        this.showCommentSection();
    }

    showCommentSection() {
        const commentSection = document.getElementById('feedback-comment-section');
        const commentTextarea = document.getElementById('feedback-comment');

        if (commentSection) {
            commentSection.style.display = 'block';
            commentSection.classList.add('show');

            // 繝輔か繝ｼ繧ｫ繧ｹ繧偵ユ繧ｭ繧ｹ繝医お繝ｪ繧｢縺ｫ
            if (commentTextarea) {
                setTimeout(() => {
                    commentTextarea.focus();
                }, 200);
            }
        }
    }

    hideCommentSection() {
        const commentSection = document.getElementById('feedback-comment-section');
        if (commentSection) {
            commentSection.classList.remove('show');
            setTimeout(() => {
                commentSection.style.display = 'none';
            }, 300);
        }
    }

    submitFeedbackWithComment() {
        if (!this.coachingService || !this.currentAdviceId || !this.selectedFeedbackType) {
            this.showToast('繝輔ぅ繝ｼ繝峨ヰ繝・け繧帝∽ｿ｡縺ｧ縺阪∪縺帙ｓ縺ｧ縺励◆', 'error');
            return;
        }

        const commentTextarea = document.getElementById('feedback-comment');
        const comment = commentTextarea ? commentTextarea.value.trim() : '';

        // 繝輔ぅ繝ｼ繝峨ヰ繝・け繧定ｨ倬鹸・医さ繝｡繝ｳ繝井ｻ倥″・・        this.coachingService.recordFeedback(this.currentAdviceId, this.selectedFeedbackType, comment);

        // 騾ｲ謐礼ｵｱ險医ｒ譖ｴ譁ｰ
        setTimeout(() => {
            this.updateCoachingProgress();
        }, 150);

        // UI繧偵Μ繧ｻ繝・ヨ
        this.hideCommentSection();
        this.resetCommentForm();

        // 繝医・繧ｹ繝医Γ繝・そ繝ｼ繧ｸ繧定｡ｨ遉ｺ
        const feedbackMessages = {
            helpful: '繝輔ぅ繝ｼ繝峨ヰ繝・け縺ゅｊ縺後→縺・＃縺悶＞縺ｾ縺呻ｼ・,
            too_easy: '谺｡蝗槭・繧医ｊ謖第姶逧・↑繧｢繝峨ヰ繧､繧ｹ繧呈署萓帙＠縺ｾ縺・,
            too_hard: '谺｡蝗槭・繧医ｊ蝓ｺ譛ｬ逧・↑繧｢繝峨ヰ繧､繧ｹ繧呈署萓帙＠縺ｾ縺・
        };

        let message = feedbackMessages[this.selectedFeedbackType];
        if (comment.length > 0) {
            message += '\n繧ｳ繝｡繝ｳ繝医・譏取律縺ｮ繧ｳ繝ｼ繝√Φ繧ｰ縺ｫ蜿肴丐縺輔ｌ縺ｾ縺呻ｼ・;
        }

        this.showToast(message, 'success');

        // 螟画焚繧偵け繝ｪ繧｢
        this.selectedFeedbackType = null;
        this.selectedFeedbackButton = null;
    }

    cancelFeedbackComment() {
        // 繝輔ぅ繝ｼ繝峨ヰ繝・け繝懊ち繝ｳ縺ｮ驕ｸ謚樒憾諷九ｒ繝ｪ繧ｻ繝・ヨ
        if (this.selectedFeedbackButton) {
            this.resetFeedbackButtons();
        }

        // 繧ｳ繝｡繝ｳ繝医そ繧ｯ繧ｷ繝ｧ繝ｳ繧帝國縺・        this.hideCommentSection();
        this.resetCommentForm();

        // 螟画焚繧偵け繝ｪ繧｢
        this.selectedFeedbackType = null;
        this.selectedFeedbackButton = null;
    }

    resetCommentForm() {
        const commentTextarea = document.getElementById('feedback-comment');
        const charCountSpan = document.getElementById('comment-char-count');
        const submitBtn = document.getElementById('submit-feedback-btn');
        const counter = document.querySelector('.comment-counter');

        if (commentTextarea) {
            commentTextarea.value = '';
        }

        if (charCountSpan) {
            charCountSpan.textContent = '0';
        }

        if (submitBtn) {
            submitBtn.disabled = true;
        }

        if (counter) {
            counter.classList.remove('warning', 'error');
        }
    }

    updateFeedbackButtonState(selectedButton) {
        // 縺吶∋縺ｦ縺ｮ繝輔ぅ繝ｼ繝峨ヰ繝・け繝懊ち繝ｳ縺九ｉ驕ｸ謚樒憾諷九ｒ蜑企勁
        const allButtons = document.querySelectorAll('.feedback-btn');
        allButtons.forEach(btn => {
            btn.classList.remove('selected');
            this.updateFeedbackButtonText(btn, false); // 繝・く繧ｹ繝医ｂ繝ｪ繧ｻ繝・ヨ
        });

        // 驕ｸ謚槭＆繧後◆繝懊ち繝ｳ縺ｫ驕ｸ謚樒憾諷九ｒ霑ｽ蜉
        selectedButton.classList.add('selected');
        this.updateFeedbackButtonText(selectedButton, true); // 驕ｸ謚樒憾諷九・繝・く繧ｹ繝医↓螟画峩
    }

    resetFeedbackButtons() {
        const allButtons = document.querySelectorAll('.feedback-btn');
        allButtons.forEach(btn => {
            btn.classList.remove('selected');
            this.updateFeedbackButtonText(btn, false); // 繝・く繧ｹ繝医ｂ繝ｪ繧ｻ繝・ヨ
        });
    }

    // 莉頑律縺ｮ繝輔ぅ繝ｼ繝峨ヰ繝・け迥ｶ諷九ｒ蠕ｩ蜈・    restoreFeedbackState() {
        if (!this.coachingService) return;

        const feedbackStatus = this.coachingService.getTodaysFeedbackStatus();

        if (feedbackStatus.hasFeedback) {
            // 隧ｲ蠖薙☆繧九ヵ繧｣繝ｼ繝峨ヰ繝・け繝懊ち繝ｳ繧帝∈謚樒憾諷九↓縺吶ｋ
            const targetButton = document.querySelector(`.feedback-btn[data-feedback="${feedbackStatus.feedbackType}"]`);
            if (targetButton) {
                this.resetFeedbackButtons(); // 縺ｾ縺壼・縺ｦ繝ｪ繧ｻ繝・ヨ
                targetButton.classList.add('selected'); // 莉頑律縺ｮ繝輔ぅ繝ｼ繝峨ヰ繝・け繧帝∈謚樒憾諷九↓
                this.updateFeedbackButtonText(targetButton, true); // 驕ｸ謚樒憾諷九・繝・く繧ｹ繝医↓譖ｴ譁ｰ
            }
        } else {
            // 繝輔ぅ繝ｼ繝峨ヰ繝・け縺後↑縺・ｴ蜷医・蜈ｨ縺ｦ繝ｪ繧ｻ繝・ヨ
            this.resetFeedbackButtons();
        }
    }

    // 繝輔ぅ繝ｼ繝峨ヰ繝・け繝懊ち繝ｳ縺ｮ繝・く繧ｹ繝医ｒ譖ｴ譁ｰ
    updateFeedbackButtonText(button, isSelected) {
        const feedbackType = button.dataset.feedback;
        const originalTexts = {
            helpful: '総 蠖ｹ縺ｫ遶九▲縺・,
            too_easy: '・ 邁｡蜊倥☆縺弱◆',
            too_hard: '于 髮｣縺励☆縺弱◆'
        };
        const selectedTexts = {
            helpful: '笨・蠖ｹ縺ｫ遶九▲縺・,
            too_easy: '笨・邁｡蜊倥☆縺弱◆',
            too_hard: '笨・髮｣縺励☆縺弱◆'
        };

        if (isSelected) {
            button.textContent = selectedTexts[feedbackType] || button.textContent;
        } else {
            button.textContent = originalTexts[feedbackType] || button.textContent;
        }
    }

    updateCoachingProgress() {
        if (!this.coachingService) return;

        const stats = this.coachingService.getProgressStats();

        const continuousDaysEl = document.getElementById('continuous-days');
        const totalLessonsEl = document.getElementById('total-lessons');

        if (continuousDaysEl) continuousDaysEl.textContent = stats.continuousLearningDays;
        if (totalLessonsEl) totalLessonsEl.textContent = stats.totalLessons;
    }

    // 繧ｲ繝ｼ繝繧・せ繧ｭ繝ｫ繝ｬ繝吶Ν螟画峩譎ゅ↓繧ｳ繝ｼ繝√Φ繧ｰ繧呈峩譁ｰ
    async refreshDailyCoaching() {
        if (this.coachingService) {
            await this.loadDailyCoaching();
        }
    }

    // 繧｢繝励Μ蜈ｨ菴薙・蛻晄悄蛹厄ｼ医ョ繝ｼ繧ｿ豸亥悉・・    resetAppData() {
        // 遒ｺ隱阪ム繧､繧｢繝ｭ繧ｰ
        const ok = confirm('繧｢繝励Μ繧貞・譛溷喧縺励∪縺吶ゆｿ晏ｭ倥＆繧後◆隧ｦ蜷医・逶ｮ讓吶・API繧ｭ繝ｼ縺ｪ縺ｩ縺ｮ繝・・繧ｿ縺悟炎髯､縺輔ｌ縺ｾ縺吶ゅｈ繧阪＠縺・〒縺吶°・・);
        if (!ok) return;

        try {
            // localStorage 縺ｮ荳ｻ縺ｪ繧ｭ繝ｼ繧貞炎髯､
            const localKeys = [
                'playerStats',
                'recentMatches',
                'goals',
                'selectedGame',
                'selectedGameData',
                'theme',
                'theme-manual',
                'ai_provider',
                'ai_api_key',
                'ai_model',
                'gemini_unified_api_key',
                'api_key_timestamp',
                'gemini-api-key',
            ];
            localKeys.forEach(k => localStorage.removeItem(k));

            // sessionStorage 縺ｮ荳ｻ縺ｪ繧ｭ繝ｼ繧貞炎髯､
            const sessionKeys = ['currentUser', 'isGuest'];
            sessionKeys.forEach(k => sessionStorage.removeItem(k));

            // 蜀・Κ繧ｵ繝ｼ繝薙せ縺ｮ繧ｯ繝ｪ繝ｼ繝ｳ繧｢繝・・
            if (this.geminiService && typeof this.geminiService.clearApiKey === 'function') {
                try { this.geminiService.clearApiKey(); } catch (e) { console.debug(e); }
            }
            if (window.unifiedApiManager && typeof window.unifiedApiManager.clearAPIKey === 'function') {
                try { window.unifiedApiManager.clearAPIKey(); } catch (e) { console.debug(e); }
            }

            // UI 繝ｪ繧ｻ繝・ヨ
            this.clearGameData();
            const statsIds = ['win-rate', 'avg-drive-rush-attempts', 'drive-impact-success-rate', 'burnout-frequency', 'anti-air-success-rate', 'throw-tech-rate', 'games-played'];
            statsIds.forEach(id => { const el = document.getElementById(id); if (el) el.textContent = '-'; });
            const matchesContainer = document.getElementById('recent-matches');
            if (matchesContainer) matchesContainer.innerHTML = '<p class="no-data">隧ｦ蜷郁ｨ倬鹸縺後∪縺縺ゅｊ縺ｾ縺帙ｓ</p>';
            const goalsList = document.getElementById('goals-list');
            if (goalsList) goalsList.innerHTML = '<p class="no-data">逶ｮ讓吶′縺ｾ縺險ｭ螳壹＆繧後※縺・∪縺帙ｓ</p>';
            // 繧ｳ繝ｼ繝√Φ繧ｰ髢｢騾｣縺ｮ繧ｭ繝｣繝・す繝･繧貞炎髯､
            localStorage.removeItem('cached-coaching-advice');
            localStorage.removeItem('coaching-advice-update-time');

            // 繧ｹ繧ｭ繝ｫ繝ｬ繝吶Ν髢｢騾｣縺ｮ繝・・繧ｿ繧貞炎髯､
            localStorage.removeItem('playerSkillLevel');
            localStorage.removeItem('playerSkillLevelData');

            // 繧ｳ繝ｼ繝√Φ繧ｰ髢｢騾｣縺ｮ繝・・繧ｿ繧貞炎髯､
            localStorage.removeItem('coaching_user_progress');
            localStorage.removeItem('coaching_feedback_history');

            // 蛻晄悄險ｭ螳壹ヵ繝ｩ繧ｰ繧貞炎髯､
            localStorage.removeItem('initialSetupCompleted');

            // 繧ｳ繝ｼ繝√Φ繧ｰ繧ｭ繝｣繝・す繝･繧貞炎髯､
            const coachingKeys = Object.keys(localStorage).filter(key => key.startsWith('coaching_advice_'));
            coachingKeys.forEach(key => localStorage.removeItem(key));

            // 繧ｳ繝ｼ繝√Φ繧ｰAPI蛻ｶ髯舌ョ繝ｼ繧ｿ繧貞炎髯､
            localStorage.removeItem('coaching_cache_metadata');
            localStorage.removeItem('coaching_last_api_call');
            localStorage.removeItem('coaching_api_call_count');
            localStorage.removeItem('coaching_api_call_times');

            // 繝・・繝槭ｒ繝・ヵ繧ｩ繝ｫ繝医↓謌ｻ縺・            this.currentTheme = 'dark';
            this.applyTheme(this.currentTheme);

            this.showToast('繧｢繝励Μ繧貞・譛溷喧縺励∪縺励◆縲ゅ・繝ｼ繧ｸ繧貞・隱ｭ縺ｿ霎ｼ縺ｿ縺励∪縺吮ｦ', 'success');
            setTimeout(() => window.location.reload(), 600);
        } catch (e) {
            console.warn('Failed to reset app:', e);
            this.showToast('蛻晄悄蛹悶↓螟ｱ謨励＠縺ｾ縺励◆', 'error');
        }
    }

    // === 繝繝・す繝･繝懊・繝臥岼讓呵｡ｨ遉ｺ讖溯・ ===
    initDashboardGoals() {
        console.log('識 Initializing dashboard goals...');

        // 譌｢蟄倥・逶ｮ讓吶ョ繝ｼ繧ｿ繧偵メ繧ｧ繝・け繝ｻ菫ｮ豁｣
        this.checkAndFixGoalsData();

        // 繧､繝吶Φ繝医Μ繧ｹ繝翫・險ｭ螳・        const viewAllGoalsBtn = document.getElementById('view-all-goals');
        const addFirstGoalBtn = document.getElementById('add-first-goal');

        if (viewAllGoalsBtn) {
            viewAllGoalsBtn.addEventListener('click', () => {
                this.showPage('goals');
                this.updateNavigation('goals');
            });
        }

        if (addFirstGoalBtn) {
            addFirstGoalBtn.addEventListener('click', () => {
                this.showPage('goals');
                this.updateNavigation('goals');
            });
        }

        // 逶ｮ讓吶ョ繝ｼ繧ｿ繧定ｪｭ縺ｿ霎ｼ縺ｿ
        this.loadDashboardGoals();

        // LocalStorage縺ｮ螟画峩繧堤屮隕・        this.setupGoalsStorageListener();
    }

    // 逶ｮ讓吶ョ繝ｼ繧ｿ縺ｮ謨ｴ蜷域ｧ繧偵メ繧ｧ繝・け繝ｻ菫ｮ豁｣
    checkAndFixGoalsData() {
        try {
            const goalsData = localStorage.getItem('goals');
            if (!goalsData) return;

            const goals = JSON.parse(goalsData);
            let dataFixed = false;

            console.log('肌 Checking goals data integrity...');

            const fixedGoals = goals.map(goal => {
                // 騾ｲ謐怜､縺御ｸ肴ｭ｣縺ｪ蝣ｴ蜷医・菫ｮ豁｣
                if (typeof goal.progress !== 'number' || isNaN(goal.progress) || goal.progress < 0 || goal.progress > 100) {
                    console.log(`肌 Fixing invalid progress for goal "${goal.title}": ${goal.progress} 竊・0`);
                    goal.progress = 0;
                    dataFixed = true;
                }

                // ID縺悟ｭ伜惠縺励↑縺・ｴ蜷医・菫ｮ豁｣
                if (!goal.id) {
                    goal.id = Date.now() + Math.random();
                    dataFixed = true;
                }

                // createdAt縺悟ｭ伜惠縺励↑縺・ｴ蜷医∫樟蝨ｨ縺ｮ譌･莉倥°繧画耳螳壹＠縺ｦ險ｭ螳・                if (!goal.createdAt) {
                    const deadline = new Date(goal.deadline);
                    const now = new Date();

                    // 譛滄剞縺九ｉ驕｡縺｣縺ｦ驕ｩ蛻・↑菴懈・譌･繧呈耳螳・                    // 譛滄剞縺梧悴譚･縺ｮ蝣ｴ蜷茨ｼ壻ｻ頑律縺九ｉ2騾ｱ髢灘燕繧剃ｽ懈・譌･縺ｨ縺吶ｋ
                    // 譛滄剞縺碁℃蜴ｻ縺ｮ蝣ｴ蜷茨ｼ壽悄髯舌・1繝ｶ譛亥燕繧剃ｽ懈・譌･縺ｨ縺吶ｋ
                    let estimatedCreatedAt;
                    if (deadline > now) {
                        estimatedCreatedAt = new Date(now.getTime() - (14 * 24 * 60 * 60 * 1000)); // 2騾ｱ髢灘燕
                    } else {
                        estimatedCreatedAt = new Date(deadline.getTime() - (30 * 24 * 60 * 60 * 1000)); // 1繝ｶ譛亥燕
                    }

                    goal.createdAt = estimatedCreatedAt.toISOString();
                    console.log(`肌 Setting estimated createdAt for goal "${goal.title}": ${goal.createdAt.split('T')[0]}`);
                    dataFixed = true;
                }

                return goal;
            });

            if (dataFixed) {
                localStorage.setItem('goals', JSON.stringify(fixedGoals));
                console.log('識 Goals data has been fixed and saved');
            }
        } catch (error) {
            console.error('Error checking goals data:', error);
        }
    }
    
    loadDashboardGoals() {
        try {
            const goalsData = localStorage.getItem('goals');
            let goals = goalsData ? JSON.parse(goalsData) : [];

            console.log('識 Loading dashboard goals:', goals.length, 'goals found');

            // 繝・・繧ｿ縺ｮ繧ｯ繝ｪ繝ｼ繝ｳ繧｢繝・・縺ｯ蛻晄悄蛹匁凾縺ｮ縺ｿ螳溯｡鯉ｼ育┌髯舌Ν繝ｼ繝鈴亟豁｢・・            this.renderDashboardGoals(goals);
        } catch (error) {
            console.warn('Failed to load goals:', error);
            this.renderDashboardGoals([]);
        }
    }
    
    renderDashboardGoals(goals) {
        const goalsList = document.getElementById('dashboard-goals-list');
        if (!goalsList) {
            console.error('識 dashboard-goals-list element not found');
            return;
        }

        if (goals.length === 0) {
            // 逶ｮ讓吶↑縺・            goalsList.innerHTML = `
                <div class="no-goals-message">
                    <h4>逶ｮ讓吶′險ｭ螳壹＆繧後※縺・∪縺帙ｓ</h4>
                    <p>繝代ヵ繧ｩ繝ｼ繝槭Φ繧ｹ蜷台ｸ翫・縺溘ａ縺ｮ逶ｮ讓吶ｒ險ｭ螳壹＠縺ｾ縺励ｇ縺・/p>
                    <button class="add-goal-btn" id="add-first-goal">譛蛻昴・逶ｮ讓吶ｒ霑ｽ蜉</button>
                </div>
            `;

            // 繧､繝吶Φ繝医Μ繧ｹ繝翫・蜀崎ｨｭ螳・            const addFirstGoalBtn = document.getElementById('add-first-goal');
            if (addFirstGoalBtn) {
                addFirstGoalBtn.addEventListener('click', () => {
                    this.showPage('goals');
                    this.updateNavigation('goals');
                });
            }

            return;
        }

        // 逶ｮ讓吶ｒ繧ｽ繝ｼ繝茨ｼ域悄髯舌′霑代＞鬆・・ｲ謐励′菴弱＞鬆・ｼ・        const sortedGoals = goals.sort((a, b) => {
            const dateA = new Date(a.deadline);
            const dateB = new Date(b.deadline);
            const progressA = a.progress || 0;
            const progressB = b.progress || 0;

            // 譛滄剞縺瑚ｿ代＞鬆・            if (dateA !== dateB) {
                return dateA - dateB;
            }

            // 騾ｲ謐励′菴弱＞鬆・            return progressA - progressB;
        });

        // 譛螟ｧ3莉ｶ陦ｨ遉ｺ
        const displayGoals = sortedGoals.slice(0, 3);

        // HTML繧堤函謌舌＠縺ｦ謖ｿ蜈･
        const html = displayGoals.map(goal => this.renderGoalItem(goal)).join('');
        goalsList.innerHTML = html;
    }
    
    renderGoalItem(goal) {
        // 譌･謨ｰ繝吶・繧ｹ縺ｧ騾ｲ謐励ｒ險育ｮ・        const progress = this.calculateProgressByDays(goal);
        const deadline = new Date(goal.deadline).toLocaleDateString('ja-JP');
        const isUrgent = this.isDeadlineUrgent(goal.deadline);
        const urgentClass = isUrgent ? 'urgent' : '';

        // 繝・ヰ繝・げ譎ゅ・縺ｿ繝ｭ繧ｰ蜃ｺ蜉・        if (window.DEBUG_GOALS) {
            console.log(`識 Rendering "${goal.title}": ${progress}%`);
        }

        return `
            <div class="dashboard-goal-item ${urgentClass}">
                <div class="goal-item-header">
                    <h5 class="goal-item-title">${goal.title}</h5>
                    <span class="goal-item-deadline">縲・${deadline}</span>
                </div>
                <div class="goal-progress-container">
                    <div class="goal-progress-bar">
                        <div class="goal-progress-fill" style="width: ${progress}%;"></div>
                    </div>
                    <div class="goal-progress-text">${progress}%</div>
                </div>
            </div>
        `;
    }
    
    isDeadlineUrgent(deadline) {
        const now = new Date();
        const deadlineDate = new Date(deadline);
        const diffDays = (deadlineDate - now) / (1000 * 60 * 60 * 24);
        return diffDays <= 7; // 7譌･莉･蜀・・邱頑･
    }

    // 譌･謨ｰ繝吶・繧ｹ縺ｮ騾ｲ謐苓ｨ育ｮ・    calculateProgressByDays(goal) {
        try {
            const now = new Date();
            const createdAt = goal.createdAt ? new Date(goal.createdAt) : null;
            const deadline = new Date(goal.deadline);

            // 菴懈・譌･縺瑚ｨｭ螳壹＆繧後※縺・↑縺・ｴ蜷医・繝・ヵ繧ｩ繝ｫ繝亥､繧定ｿ斐☆
            if (!createdAt) {
                return 0;
            }

            // 譛滄剞縺碁℃蜴ｻ縺ｮ蝣ｴ蜷医・100%
            if (deadline <= now) {
                return 100;
            }

            // 菴懈・譌･縺梧悴譚･縺ｮ蝣ｴ蜷茨ｼ医ョ繝ｼ繧ｿ繧ｨ繝ｩ繝ｼ・峨・菴懈・譌･繧剃ｻ頑律縺ｫ菫ｮ豁｣
            if (createdAt > now) {
                console.warn(`笞・・Goal "${goal.title}" has future createdAt, fixing to today`);
                createdAt = now;
            }

            // 邱乗律謨ｰ縺ｨ邨碁℃譌･謨ｰ繧定ｨ育ｮ・            const totalDays = (deadline - createdAt) / (1000 * 60 * 60 * 24);
            const elapsedDays = (now - createdAt) / (1000 * 60 * 60 * 24);

            // 騾ｲ謐礼紫繧定ｨ育ｮ暦ｼ・-100%縺ｮ遽・峇縺ｫ蛻ｶ髯撰ｼ・            const progress = Math.max(0, Math.min(100, (elapsedDays / totalDays) * 100));

            // 繝・ヰ繝・げ譎ゅ・縺ｿ隧ｳ邏ｰ繝ｭ繧ｰ
            if (window.DEBUG_GOALS) {
                console.log(`套 Progress: "${goal.title}" = ${Math.round(progress)}% (${elapsedDays.toFixed(1)}/${totalDays.toFixed(1)} days)`);
            }

            return Math.round(progress);
        } catch (error) {
            console.error('Error calculating progress:', error);
            return goal.progress || 0;
        }
    }
    
    setupGoalsStorageListener() {
        // 驥崎､・Μ繧ｹ繝翫・髦ｲ豁｢縺ｮ繝輔Λ繧ｰ
        if (this.goalsListenerSetup) {
            return;
        }
        this.goalsListenerSetup = true;

        // LocalStorage縺ｮ螟画峩繧堤屮隕厄ｼ井ｻ悶・繧ｿ繝悶°繧峨・螟画峩縺ｮ縺ｿ・・        window.addEventListener('storage', (e) => {
            if (e.key === 'goals') {
                console.log('識 Storage event detected from another tab');
                this.loadDashboardGoals();
            }
        });

        console.log('識 Goals storage listener setup completed');
    }
    
    updateNavigation(pageId) {
        const navBtns = document.querySelectorAll('.nav-btn');
        navBtns.forEach(btn => {
            btn.classList.remove('active');
            if (btn.dataset.page === pageId) {
                btn.classList.add('active');
            }
        });
    }

    // === 繝翫ン繧ｲ繝ｼ繧ｷ繝ｧ繝ｳ謾ｯ謠ｴ讖溯・ ===
    initNavigationHelpers() {
        // 蛻・梵繧ｿ繝悶∈縺ｮ繝翫ン繧ｲ繝ｼ繧ｷ繝ｧ繝ｳ繝懊ち繝ｳ
        const gotoAnalysisBtn = document.getElementById('goto-analysis');
        if (gotoAnalysisBtn) {
            gotoAnalysisBtn.addEventListener('click', () => {
                this.showPage('analysis');
                this.updateNavigation('analysis');
            });
        }
        
        // AI逕ｨ逶ｮ讓呵ｨｭ螳壹・繧ｿ繝ｳ
    }

    // === 繝・・繧ｿ繧ｽ繝ｼ繧ｹ邂｡逅・ｩ溯・ (Client-Side) ===
    loadDataSourcePage() {
        const files = this.getLocalDataSources();
        this.renderDataSources(files);
    }

    getLocalDataSources() {
        const sources = [];
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key.startsWith('datasource-')) {
                sources.push(key.replace('datasource-', ''));
            }
        }
        return sources;
    }

    renderDataSources(files) {
        const listContainer = document.getElementById('data-source-list');
        if (!listContainer) return;

        if (files.length === 0) {
            listContainer.innerHTML = `<div class="no-files-message"><p>縺ｾ縺繧｢繝・・繝ｭ繝ｼ繝峨＆繧後◆繝輔ぃ繧､繝ｫ縺後≠繧翫∪縺帙ｓ縲・/p></div>`;
            return;
        }

        listContainer.innerHTML = files.map(file => `
            <div class="data-source-item" data-filename="${file}">
                <span class="file-icon">塘</span>
                <span class="file-name">${file}</span>
                <div class="file-actions">
                    <button class="btn-secondary btn-sm view-file-btn">陦ｨ遉ｺ</button>
                    <button class="btn-danger btn-sm delete-file-btn">蜑企勁</button>
                </div>
            </div>
        `).join('');

        listContainer.querySelectorAll('.view-file-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.handleViewFile(e));
        });
        listContainer.querySelectorAll('.delete-file-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.handleDeleteFile(e));
        });
    }

    async handleFileUpload(event) {
        event.preventDefault();
        const fileInput = document.getElementById('file-input');
        const uploadBtn = document.getElementById('upload-btn');
        const file = fileInput.files[0];

        if (!file) {
            this.showToast('繝輔ぃ繧､繝ｫ繧帝∈謚槭＠縺ｦ縺上□縺輔＞', 'warning');
            return;
        }

        // 繝輔ぃ繧､繝ｫ繧ｵ繧､繧ｺ繝√ぉ繝・け・・000譁・ｭ・竕・12KB遞句ｺｦ・・        const maxFileSize = 50 * 1024; // 50KB・育ｴ・5,000譁・ｭ暦ｼ・        if (file.size > maxFileSize) {
            this.showToast(`繝輔ぃ繧､繝ｫ繧ｵ繧､繧ｺ縺悟､ｧ縺阪☆縺弱∪縺吶よ怙螟ｧ50KB・育ｴ・5,000譁・ｭ暦ｼ峨∪縺ｧ縺ｧ縺吶ら樟蝨ｨ: ${Math.round(file.size / 1024)}KB`, 'warning');
            return;
        }

        uploadBtn.disabled = true;
        uploadBtn.textContent = '蜃ｦ逅・ｸｭ...';

        const reader = new FileReader();

        reader.onload = async (e) => {
            try {
                let textContent;
                let filename = file.name;

                if (file.name.toLowerCase().endsWith('.docx')) {
                    if (typeof mammoth === 'undefined') {
                        throw new Error('DOCX繝代・繧ｵ繝ｼ縺後Ο繝ｼ繝峨＆繧後※縺・∪縺帙ｓ縲・);
                    }
                    const arrayBuffer = e.target.result;
                    const result = await mammoth.extractRawText({ arrayBuffer: arrayBuffer });
                    textContent = result.value;
                    filename = file.name.replace(/\.docx$/i, '.txt');
                } else {
                    textContent = e.target.result;
                }

                localStorage.setItem(`datasource-${filename}`, textContent);
                this.showToast(`縲・{filename}縲阪ｒ繝ｭ繝ｼ繧ｫ繝ｫ縺ｫ菫晏ｭ倥＠縺ｾ縺励◆`, 'success');
                fileInput.value = ''; // Reset file input
                uploadBtn.disabled = true;
                this.loadDataSourcePage();
            } catch (err) {
                console.error('File processing error:', err);
                this.showToast(`繝輔ぃ繧､繝ｫ蜃ｦ逅・お繝ｩ繝ｼ: ${err.message}`, 'error');
            } finally {
                uploadBtn.disabled = false;
                uploadBtn.textContent = '繧｢繝・・繝ｭ繝ｼ繝・;
            }
        };

        reader.onerror = () => {
            this.showToast('繝輔ぃ繧､繝ｫ縺ｮ隱ｭ縺ｿ霎ｼ縺ｿ縺ｫ螟ｱ謨励＠縺ｾ縺励◆', 'error');
            uploadBtn.disabled = false;
            uploadBtn.textContent = '繧｢繝・・繝ｭ繝ｼ繝・;
        };

        if (file.name.toLowerCase().endsWith('.docx')) {
            reader.readAsArrayBuffer(file);
        } else {
            reader.readAsText(file);
        }
    }

    handleViewFile(event) {
        const filename = event.target.closest('.data-source-item').dataset.filename;
        const content = localStorage.getItem(`datasource-${filename}`);
        if (content) {
            alert(`Content of ${filename}:\n\n${content.substring(0, 1000)}...`);
        } else {
            this.showToast('繝輔ぃ繧､繝ｫ縺ｮ蜀・ｮｹ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ縺ｧ縺励◆', 'error');
        }
    }

    handleDeleteFile(event) {
        const filename = event.target.closest('.data-source-item').dataset.filename;
        if (confirm(`譛ｬ蠖薙↓繝ｭ繝ｼ繧ｫ繝ｫ繧ｹ繝医Ξ繝ｼ繧ｸ縺九ｉ縲・{filename}縲阪ｒ蜑企勁縺励∪縺吶°・歔)) {
            localStorage.removeItem(`datasource-${filename}`);
            this.showToast('繝輔ぃ繧､繝ｫ繧貞炎髯､縺励∪縺励◆', 'success');
            this.loadDataSourcePage();
        }
    }


    // === 逶ｮ讓咏ｮ｡逅・髪謠ｴ讖溯・・医さ繝ｼ繝√Φ繧ｰ逕ｨ・・===

    // 迴ｾ蝨ｨ縺ｮ逶ｮ讓吶ｒ繧ｹ繝医Ξ繝ｼ繧ｸ縺九ｉ蜿門ｾ暦ｼ医さ繝ｼ繝√Φ繧ｰ逕ｨ・・    getCurrentGoalsFromStorage() {
        try {
            const goals = JSON.parse(localStorage.getItem('goals') || '[]');
            // 莉頑律莉･髯阪・譛滄剞縺ｮ逶ｮ讓吶ｒ霑斐☆・育樟蝨ｨ騾ｲ陦御ｸｭ縺ｮ逶ｮ讓呻ｼ・            const today = new Date().toISOString().split('T')[0];
            return goals.filter(goal => {
                if (!goal.deadline) return true; // 譛滄剞縺ｪ縺励・迴ｾ蝨ｨ逶ｮ讓吶→縺励※謇ｱ縺・                return goal.deadline >= today;
            });
        } catch (error) {
            console.warn('Failed to get current goals:', error);
            return [];
        }
    }

    // 莉企ｱ縺ｮ逶ｮ讓吶ｒ繧ｹ繝医Ξ繝ｼ繧ｸ縺九ｉ蜿門ｾ暦ｼ医さ繝ｼ繝√Φ繧ｰ逕ｨ・・    getWeeklyGoalsFromStorage() {
        try {
            const goals = JSON.parse(localStorage.getItem('goals') || '[]');
            // 莉企ｱ蜀・ｼ井ｻ頑律縺九ｉ7譌･莉･蜀・ｼ峨・譛滄剞縺ｮ逶ｮ讓吶ｒ霑斐☆
            const today = new Date();
            const weekFromNow = new Date();
            weekFromNow.setDate(today.getDate() + 7);

            const todayStr = today.toISOString().split('T')[0];
            const weekFromNowStr = weekFromNow.toISOString().split('T')[0];

            return goals.filter(goal => {
                if (!goal.deadline) return false; // 譛滄剞縺ｪ縺励・騾ｱ髢鍋岼讓吶°繧蛾勁螟・                return goal.deadline >= todayStr && goal.deadline <= weekFromNowStr;
            });
        } catch (error) {
            console.warn('Failed to get weekly goals:', error);
            return [];
        }
    }

    // === 繧ｳ繝ｼ繝√Φ繧ｰ繝励Λ繝ｳ讖溯・ ===

    // 繝励Λ繝ｳ莉倥″逶ｮ讓吩ｽ懈・繧帝幕蟋・    handleCreateGoalWithPlan() {
        // 遨ｺ縺ｮ逶ｮ讓吶ョ繝ｼ繧ｿ縺ｧ繝｢繝ｼ繝繝ｫ繧帝幕縺擾ｼ医Δ繝ｼ繝繝ｫ蜀・〒蜈･蜉幢ｼ・        const goalData = {
            title: '',
            deadline: '',
            description: '',
            gameGenre: this.getCurrentGameGenre(),
            skillLevel: this.getCurrentSkillLevel()
        };

        // 繝励Λ繝ｳ繝｢繝ｼ繝繝ｫ繧帝幕縺・        this.openCoachingPlanModal(goalData);
    }

    // 迴ｾ蝨ｨ縺ｮ繧ｲ繝ｼ繝繧ｸ繝｣繝ｳ繝ｫ繧貞叙蠕・    getCurrentGameGenre() {
        const gameData = localStorage.getItem('selectedGameData');
        if (gameData) {
            const game = JSON.parse(gameData);
            const categoryToGenre = {
                'FPS': 'fps',
                'MOBA': 'moba',
                '譬ｼ髣倥ご繝ｼ繝': 'fighting',
                '繧ｹ繝医Λ繝・ず繝ｼ': 'strategy'
            };
            return categoryToGenre[game.category] || 'universal';
        }
        return 'universal';
    }

    // 迴ｾ蝨ｨ縺ｮ繧ｹ繧ｭ繝ｫ繝ｬ繝吶Ν繧貞叙蠕・    getCurrentSkillLevel() {
        return localStorage.getItem('playerSkillLevel') || 'intermediate';
    }

    // 繧ｳ繝ｼ繝√Φ繧ｰ繝励Λ繝ｳ繝｢繝ｼ繝繝ｫ縺ｮ蛻晄悄蛹・    initCoachingPlanModal() {
        // 繝｢繝ｼ繝繝ｫ繧ｯ繝ｭ繝ｼ繧ｺ
        const closeModal = document.getElementById('close-plan-modal');
        if (closeModal) {
            closeModal.addEventListener('click', () => {
                this.closeCoachingPlanModal();
            });
        }

        // 遏･隴倥・繝ｼ繧ｹ蜀崎ｪｭ縺ｿ霎ｼ縺ｿ繝懊ち繝ｳ
        const reloadKbBtn = document.getElementById('reload-kb-btn');
        if (reloadKbBtn) {
            reloadKbBtn.addEventListener('click', () => {
                this.reloadSF6KnowledgeBase();
            });
        }

        // AI逕滓・繝懊ち繝ｳ
        const generateBtn = document.getElementById('generate-plan-btn');
        if (generateBtn) {
            generateBtn.addEventListener('click', () => {
                this.generatePlanWithAI();
            });
        }

        // 謇句虚菴懈・繝懊ち繝ｳ
        const manualBtn = document.getElementById('manual-plan-btn');
        if (manualBtn) {
            manualBtn.addEventListener('click', () => {
                this.createManualPlan();
            });
        }

        // 繝励Λ繝ｳ邱ｨ髮・・繧ｿ繝ｳ
        const editBtn = document.getElementById('edit-plan-btn');
        if (editBtn) {
            editBtn.addEventListener('click', () => {
                this.editPlan();
            });
        }

        // 繝励Λ繝ｳ謇ｿ隱阪・繧ｿ繝ｳ
        const approveBtn = document.getElementById('approve-plan-btn');
        if (approveBtn) {
            approveBtn.addEventListener('click', () => {
                this.approvePlan();
            });
        }

        // 蜀咲函謌舌・繧ｿ繝ｳ
        const regenerateBtn = document.getElementById('regenerate-plan-btn');
        if (regenerateBtn) {
            regenerateBtn.addEventListener('click', () => {
                this.regeneratePlan();
            });
        }

        // 繝励Λ繝ｳ菫晏ｭ倥・繧ｿ繝ｳ
        const saveBtn = document.getElementById('save-plan-btn');
        if (saveBtn) {
            saveBtn.addEventListener('click', () => {
                this.savePlanEdits();
            });
        }

        // 邱ｨ髮・く繝｣繝ｳ繧ｻ繝ｫ繝懊ち繝ｳ
        const cancelEditBtn = document.getElementById('cancel-edit-btn');
        if (cancelEditBtn) {
            cancelEditBtn.addEventListener('click', () => {
                this.cancelPlanEdit();
            });
        }
    }

    // 繧ｳ繝ｼ繝√Φ繧ｰ繝励Λ繝ｳ繝｢繝ｼ繝繝ｫ繧帝幕縺・    openCoachingPlanModal(goalData) {
        this.currentGoalData = goalData;

        // 逶ｮ讓呎ュ蝣ｱ繧定｡ｨ遉ｺ
        this.displayGoalSummary(goalData);

        // SF6遏･隴倥・繝ｼ繧ｹ縺ｮ迥ｶ諷九ｒ譖ｴ譁ｰ
        this.updateSF6KnowledgeStatus();

        // 繝｢繝ｼ繝繝ｫ繧定｡ｨ遉ｺ
        const modal = document.getElementById('coaching-plan-modal');
        if (modal) {
            modal.classList.remove('hidden');
            this.showPlanStep('plan-generation-step');
        }
    }

    // SF6遏･隴倥・繝ｼ繧ｹ縺ｮ迥ｶ諷九ｒ譖ｴ譁ｰ
    updateSF6KnowledgeStatus() {
        try {
            // LocalStorage縺九ｉ繝・・繧ｿ繧ｽ繝ｼ繧ｹ繝輔ぃ繧､繝ｫ繧貞叙蠕・            const datasourceKeys = Object.keys(localStorage).filter(key => key.startsWith('datasource-'));
            
            const statusText = document.getElementById('kb-status-text');
            const fileCount = document.getElementById('kb-file-count');
            const dataSize = document.getElementById('kb-data-size');
            const kbDetails = document.getElementById('kb-details');
            
            if (datasourceKeys.length > 0) {
                // 繝・・繧ｿ縺後≠繧句ｴ蜷・                let totalSize = 0;
                datasourceKeys.forEach(key => {
                    const content = localStorage.getItem(key);
                    if (content) {
                        totalSize += content.length;
                    }
                });
                
                if (statusText) statusText.textContent = '譛牙柑';
                if (statusText) statusText.className = 'indicator-value active';
                if (fileCount) fileCount.textContent = datasourceKeys.length;
                if (dataSize) dataSize.textContent = totalSize.toLocaleString();
                if (kbDetails) kbDetails.classList.remove('hidden');
                
                console.log(`答 SF6遏･隴倥・繝ｼ繧ｹ: ${datasourceKeys.length}繝輔ぃ繧､繝ｫ縲・{totalSize}譁・ｭ輿);
            } else {
                // 繝・・繧ｿ縺後↑縺・ｴ蜷・                if (statusText) statusText.textContent = '譛ｪ險ｭ螳・;
                if (statusText) statusText.className = 'indicator-value inactive';
                if (fileCount) fileCount.textContent = '0';
                if (dataSize) dataSize.textContent = '0';
                if (kbDetails) kbDetails.classList.remove('hidden');
                
                console.log('答 SF6遏･隴倥・繝ｼ繧ｹ: 繝・・繧ｿ縺ｪ縺・);
            }
        } catch (error) {
            console.error('遏･隴倥・繝ｼ繧ｹ迥ｶ諷区峩譁ｰ繧ｨ繝ｩ繝ｼ:', error);
        }
    }

    // SF6遏･隴倥・繝ｼ繧ｹ繧貞・隱ｭ縺ｿ霎ｼ縺ｿ
    async reloadSF6KnowledgeBase() {
        try {
            const reloadBtn = document.getElementById('reload-kb-btn');
            if (reloadBtn) {
                reloadBtn.disabled = true;
                reloadBtn.textContent = '売';
                reloadBtn.classList.add('spinning');
            }
            
            // 繧ｳ繝ｼ繝√Φ繧ｰ繝励Λ繝ｳ繧ｵ繝ｼ繝薙せ縺ｮ遏･隴倥・繝ｼ繧ｹ繧貞・隱ｭ縺ｿ霎ｼ縺ｿ
            if (this.coachingPlanService) {
                await this.coachingPlanService.loadSF6KnowledgeBase();
            }
            
            // 迥ｶ諷玖｡ｨ遉ｺ繧呈峩譁ｰ
            this.updateSF6KnowledgeStatus();
            
            this.showToast('答 SF6遏･隴倥・繝ｼ繧ｹ繧呈峩譁ｰ縺励∪縺励◆', 'success');
            
            setTimeout(() => {
                if (reloadBtn) {
                    reloadBtn.disabled = false;
                    reloadBtn.classList.remove('spinning');
                }
            }, 1000);
        } catch (error) {
            console.error('遏･隴倥・繝ｼ繧ｹ蜀崎ｪｭ縺ｿ霎ｼ縺ｿ繧ｨ繝ｩ繝ｼ:', error);
            this.showToast('遏･隴倥・繝ｼ繧ｹ縺ｮ譖ｴ譁ｰ縺ｫ螟ｱ謨励＠縺ｾ縺励◆', 'error');
            
            const reloadBtn = document.getElementById('reload-kb-btn');
            if (reloadBtn) {
                reloadBtn.disabled = false;
                reloadBtn.classList.remove('spinning');
            }
        }
    }

    // 繧ｳ繝ｼ繝√Φ繧ｰ繝励Λ繝ｳ繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
    closeCoachingPlanModal() {
        const modal = document.getElementById('coaching-plan-modal');
        if (modal) {
            modal.classList.add('hidden');
        }
        this.currentGoalData = null;
        this.currentPlan = null;
    }

    // 逶ｮ讓呎ｦりｦ√ｒ陦ｨ遉ｺ・医ヵ繧ｩ繝ｼ繝蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨↓蛻晄悄蛟､繧定ｨｭ螳夲ｼ・    displayGoalSummary(goalData) {
        const titleInput = document.getElementById('modal-goal-title-input');
        const deadlineInput = document.getElementById('modal-goal-deadline-input');
        const descriptionInput = document.getElementById('modal-goal-description-input');

        if (titleInput && goalData.title) {
            titleInput.value = goalData.title;
        }
        if (deadlineInput && goalData.deadline) {
            deadlineInput.value = goalData.deadline;
        }
        if (descriptionInput && goalData.description) {
            descriptionInput.value = goalData.description;
        }

        // 譛滄剞縺ｮ譛蟆丞､繧剃ｻ頑律縺ｮ譌･莉倥↓險ｭ螳・        if (deadlineInput) {
            const today = new Date().toISOString().split('T')[0];
            deadlineInput.min = today;
        }
    }

    // 繝励Λ繝ｳ繧ｹ繝・ャ繝励ｒ陦ｨ遉ｺ
    showPlanStep(stepId) {
        console.log('売 Switching to plan step:', stepId);

        // 蜈ｨ繧ｹ繝・ャ繝励ｒ髱櫁｡ｨ遉ｺ
        document.querySelectorAll('.plan-step').forEach(step => {
            step.classList.remove('active');
            console.log('売 Removed active from step:', step.id);
        });

        // 謖・ｮ壹せ繝・ャ繝励ｒ陦ｨ遉ｺ
        const targetStep = document.getElementById(stepId);
        if (targetStep) {
            targetStep.classList.add('active');
            targetStep.classList.remove('hidden'); // hidden繧ｯ繝ｩ繧ｹ繧ょ炎髯､
            console.log('笨・Activated step:', stepId);
        } else {
            console.error('笶・Target step not found:', stepId);
        }
    }

    // AI縺ｧ繝励Λ繝ｳ逕滓・
    async generatePlanWithAI() {
        if (!this.coachingPlanService) {
            this.showToast('繧ｳ繝ｼ繝√Φ繧ｰ繝励Λ繝ｳ繧ｵ繝ｼ繝薙せ縺悟茜逕ｨ縺ｧ縺阪∪縺帙ｓ', 'error');
            return;
        }

        // 繝｢繝ｼ繝繝ｫ蜀・・繝輔か繝ｼ繝縺九ｉ逶ｮ讓吶ョ繝ｼ繧ｿ繧貞叙蠕・        const titleInput = document.getElementById('modal-goal-title-input');
        const deadlineInput = document.getElementById('modal-goal-deadline-input');
        const descriptionInput = document.getElementById('modal-goal-description-input');

        if (!titleInput || !deadlineInput) {
            this.showToast('繝輔か繝ｼ繝隕∫ｴ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ', 'error');
            return;
        }

        const title = titleInput.value.trim();
        const deadline = deadlineInput.value;
        const description = descriptionInput ? descriptionInput.value.trim() : '';

        // 蜈･蜉帶､懆ｨｼ
        if (!title || !deadline) {
            this.showToast('逶ｮ讓吶ち繧､繝医Ν縺ｨ譛滄剞繧貞・蜉帙＠縺ｦ縺上□縺輔＞', 'warning');
            return;
        }

        // 譛滄剞縺碁℃蜴ｻ縺ｮ譌･莉倥〒縺ｪ縺・°繝√ぉ繝・け
        const deadlineDate = new Date(deadline);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        if (deadlineDate < today) {
            this.showToast('譛滄剞縺ｯ譛ｬ譌･莉･髯阪・譌･莉倥ｒ險ｭ螳壹＠縺ｦ縺上□縺輔＞', 'warning');
            return;
        }

        // 逶ｮ讓吶ョ繝ｼ繧ｿ繧呈峩譁ｰ
        this.currentGoalData = {
            title: title,
            deadline: deadline,
            description: description,
            gameGenre: this.getCurrentGameGenre(),
            skillLevel: this.getCurrentSkillLevel()
        };

        this.showPlanGenerationLoading(true);

        try {
            const plan = await this.coachingPlanService.generateCoachingPlan(this.currentGoalData);
            this.currentPlan = plan;

            this.showToast('AI縺ｫ繧医ｋ繧ｫ繧ｹ繧ｿ繝繝励Λ繝ｳ繧堤函謌舌＠縺ｾ縺励◆・・, 'success');
            this.displayGeneratedPlan(plan);
            this.showPlanStep('plan-review-step');
        } catch (error) {
            console.error('Failed to generate coaching plan:', error);

            let errorMessage = '繝励Λ繝ｳ逕滓・縺ｫ螟ｱ謨励＠縺ｾ縺励◆: ';
            if (error.message.includes('API繧ｭ繝ｼ')) {
                errorMessage += 'Gemini API繧ｭ繝ｼ繧定ｨｭ螳壹＠縺ｦ縺上□縺輔＞縲・;
            } else if (error.message.includes('API')) {
                errorMessage += 'API謗･邯壹↓蝠城｡後′縺ゅｊ縺ｾ縺吶・;
            } else {
                errorMessage += error.message;
            }

            this.showToast(errorMessage, 'error');
        } finally {
            this.showPlanGenerationLoading(false);
        }
    }

    // 繝励Λ繝ｳ逕滓・繝ｭ繝ｼ繝・ぅ繝ｳ繧ｰ陦ｨ遉ｺ
    showPlanGenerationLoading(show) {
        const status = document.getElementById('generation-status');
        const buttons = document.getElementById('generation-buttons');

        if (status) {
            status.style.display = show ? 'block' : 'none';
        }
        if (buttons) {
            buttons.style.display = show ? 'none' : 'flex';
        }
    }

    // 逕滓・縺輔ｌ縺溘・繝ｩ繝ｳ繧定｡ｨ遉ｺ
    displayGeneratedPlan(plan) {
        console.log('識 Displaying generated plan:', plan);

        // 繝励Λ繝ｳ邨ｱ險医ｒ陦ｨ遉ｺ
        const weeksEl = document.getElementById('plan-total-weeks');
        const daysEl = document.getElementById('plan-total-days');

        if (weeksEl) {
            weeksEl.textContent = plan.weeks.length;
            console.log('投 Set weeks count:', plan.weeks.length);
        } else {
            console.error('笶・plan-total-weeks element not found');
        }

        if (daysEl) {
            daysEl.textContent = plan.metadata.totalWeeks * 7;
            console.log('投 Set days count:', plan.metadata.totalWeeks * 7);
        } else {
            console.error('笶・plan-total-days element not found');
        }

        // 騾ｱ蛻･繝励Λ繝ｳ繧定｡ｨ遉ｺ
        console.log('套 Rendering week cards...');
        this.renderWeekCards(plan.weeks);
        
        // 繧ｰ繝ｩ繧ｦ繝ｳ繝・ぅ繝ｳ繧ｰ諠・ｱ繧定｡ｨ遉ｺ
        if (plan.metadata?.groundingSources) {
            this.renderGroundingSources(plan.metadata.groundingSources);
        }
    }

    // 騾ｱ蛻･繧ｫ繝ｼ繝峨ｒ繝ｬ繝ｳ繝繝ｪ繝ｳ繧ｰ
    renderWeekCards(weeks) {
        const container = document.getElementById('weeks-container');
        if (!container) {
            console.error('笶・weeks-container not found');
            return;
        }

        console.log('套 Found weeks container, clearing content...');
        container.innerHTML = '';

        console.log('套 Rendering', weeks.length, 'week cards...');
        weeks.forEach((week, index) => {
            console.log(`套 Creating week card ${index + 1}:`, week);
            const weekCard = this.createWeekCard(week);
            container.appendChild(weekCard);
        });

        console.log('套 Week cards rendered successfully');
    }

    // 繧ｰ繝ｩ繧ｦ繝ｳ繝・ぅ繝ｳ繧ｰ諠・ｱ繧定｡ｨ遉ｺ
    renderGroundingSources(groundingSources) {
        const container = document.getElementById('weeks-container');
        if (!container || !groundingSources || groundingSources.totalSources === 0) {
            return;
        }

        const sourcesCard = document.createElement('div');
        sourcesCard.className = 'grounding-sources-card';
        sourcesCard.innerHTML = `
            <div class="sources-header">
                <span class="sources-icon">倹</span>
                <h4>蜿り・↓縺励◆譛譁ｰ諠・ｱ・・{groundingSources.totalSources}莉ｶ・・/h4>
            </div>
            <div class="sources-list">
                ${groundingSources.sources.slice(0, 5).map(source => `
                    <div class="source-item">
                        <a href="${source.url}" target="_blank" rel="noopener noreferrer">
                            ${source.title}
                        </a>
                        ${source.snippet ? `<p class="source-snippet">${source.snippet}</p>` : ''}
                    </div>
                `).join('')}
            </div>
            <p class="sources-note">
                庁 縺薙・繧ｳ繝ｼ繝√Φ繧ｰ繝励Λ繝ｳ縺ｯ縲∽ｸ願ｨ倥・譛譁ｰ諠・ｱ繧貞盾閠・↓逕滓・縺輔ｌ縺ｾ縺励◆
            </p>
        `;

        container.appendChild(sourcesCard);
    }

    // 騾ｱ繧ｫ繝ｼ繝峨ｒ菴懈・
    createWeekCard(week) {
        const card = document.createElement('div');
        card.className = 'week-card';

        card.innerHTML = `
            <div class="week-header">
                <span class="week-number">隨ｬ${week.weekNumber}騾ｱ</span>
                <span class="week-dates">${week.startDate} - ${week.endDate}</span>
            </div>
            <div class="week-focus">${week.focus}</div>
            <div class="week-objectives">
                <h5>逶ｮ讓・/h5>
                <ul class="objectives-list">
                    ${week.objectives.map(obj => `<li>${obj}</li>`).join('')}
                </ul>
            </div>
            <div class="week-milestones">
                <h5>繝槭う繝ｫ繧ｹ繝医・繝ｳ</h5>
                <ul class="milestones-list">
                    ${week.milestones.map(milestone => `<li>${milestone}</li>`).join('')}
                </ul>
            </div>
        `;

        return card;
    }

    // 繝励Λ繝ｳ繧呈価隱阪＠縺ｦ逶ｮ讓吶ｒ菴懈・
    async approvePlan() {
        if (!this.currentPlan || !this.currentGoalData) return;

        try {
            // 逶ｮ讓吶ｒ菴懈・・医・繝ｩ繝ｳ諠・ｱ莉倥″・・            const goalData = {
                ...this.currentGoalData,
                id: Date.now(),
                progress: 0,
                hasCoachingPlan: true,
                planId: this.currentPlan.id
            };

            // 繝励Λ繝ｳ縺ｮ繧ｹ繝・・繧ｿ繧ｹ繧偵い繧ｯ繝・ぅ繝悶↓譖ｴ譁ｰ
            this.currentPlan.status = 'active';
            this.currentPlan.goalId = goalData.id;

            // 菫晏ｭ・            this.coachingPlanService.savePlan(this.currentPlan);
            this.addGoal(goalData);

            // 繝輔か繝ｼ繝繧偵Μ繧ｻ繝・ヨ
            document.getElementById('goal-form').reset();

            // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
            this.closeCoachingPlanModal();

            this.showToast('繧ｳ繝ｼ繝√Φ繧ｰ繝励Λ繝ｳ莉倥″縺ｮ逶ｮ讓吶ｒ菴懈・縺励∪縺励◆・・, 'success');
        } catch (error) {
            console.error('Failed to approve plan:', error);
            this.showToast('繝励Λ繝ｳ縺ｮ謇ｿ隱阪↓螟ｱ謨励＠縺ｾ縺励◆', 'error');
        }
    }

    // 謇句虚繝励Λ繝ｳ菴懈・・育ｰ｡譏鍋沿・・    createManualPlan() {
        this.showToast('謇句虚繝励Λ繝ｳ菴懈・讖溯・縺ｯ莉雁ｾ悟ｮ溯｣・ｺ亥ｮ壹〒縺・, 'info');
    }

    // 繝励Λ繝ｳ邱ｨ髮・    editPlan() {
        this.showToast('繝励Λ繝ｳ邱ｨ髮・ｩ溯・縺ｯ莉雁ｾ悟ｮ溯｣・ｺ亥ｮ壹〒縺・, 'info');
    }

    // 繝励Λ繝ｳ蜀咲函謌・    regeneratePlan() {
        this.generatePlanWithAI();
    }

    // 繝励Λ繝ｳ邱ｨ髮・ｿ晏ｭ・    savePlanEdits() {
        this.showToast('繝励Λ繝ｳ邱ｨ髮・ｿ晏ｭ俶ｩ溯・縺ｯ莉雁ｾ悟ｮ溯｣・ｺ亥ｮ壹〒縺・, 'info');
    }

    // 繝励Λ繝ｳ邱ｨ髮・く繝｣繝ｳ繧ｻ繝ｫ
    cancelPlanEdit() {
        this.showPlanStep('plan-review-step');
    }

    // 繧ｳ繝ｼ繝√Φ繧ｰ繝励Λ繝ｳ繝壹・繧ｸ縺ｮ蛻晄悄蛹・    initCoachingPlansPage() {
        // 譖ｴ譁ｰ繝懊ち繝ｳ縺ｮ繧､繝吶Φ繝医Μ繧ｹ繝翫・
        document.getElementById('refresh-plans-btn')?.addEventListener('click', () => {
            this.loadCoachingPlans();
        });

        // 繧ｹ繝・・繧ｿ繧ｹ繝輔ぅ繝ｫ繧ｿ繝ｼ縺ｮ繧､繝吶Φ繝医Μ繧ｹ繝翫・
        document.getElementById('plan-status-filter')?.addEventListener('change', (e) => {
            this.filterPlans(e.target.value);
        });

        // 繝壹・繧ｸ陦ｨ遉ｺ譎ゅ↓繝励Λ繝ｳ繧定ｪｭ縺ｿ霎ｼ縺ｿ
        this.loadCoachingPlans();
    }

    // 繧ｳ繝ｼ繝√Φ繧ｰ繝励Λ繝ｳ繧定ｪｭ縺ｿ霎ｼ縺ｿ
    loadCoachingPlans() {
        const activePlans = this.coachingPlanService.getActivePlans();
        const allPlans = this.coachingPlanService.getAllPlans();

        this.displayActivePlans(activePlans);
        this.displayAllPlans(allPlans);

        // 繧｢繧ｯ繝・ぅ繝悶↑繝励Λ繝ｳ縺後≠繧句ｴ蜷医・莉企ｱ縺ｮ隧ｳ邏ｰ繧定｡ｨ遉ｺ
        if (activePlans.length > 0) {
            this.displayCurrentWeek(activePlans[0]);
        }
    }

    // 繧｢繧ｯ繝・ぅ繝悶↑繝励Λ繝ｳ繧定｡ｨ遉ｺ
    displayActivePlans(plans) {
        const container = document.getElementById('active-plans-container');
        if (!container) return;

        if (plans.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">搭</div>
                    <h3>繧｢繧ｯ繝・ぅ繝悶↑繝励Λ繝ｳ縺後≠繧翫∪縺帙ｓ</h3>
                    <p>逶ｮ讓吶・繝ｼ繧ｸ縺ｧ繝励Λ繝ｳ莉倥″縺ｮ逶ｮ讓吶ｒ菴懈・縺励※縺上□縺輔＞</p>
                </div>
            `;
            return;
        }

        container.innerHTML = plans.map(plan => this.createPlanCard(plan)).join('');
    }

    // 縺吶∋縺ｦ縺ｮ繝励Λ繝ｳ繧定｡ｨ遉ｺ
    displayAllPlans(plans) {
        const container = document.getElementById('all-plans-container');
        if (!container) return;

        if (plans.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">搭</div>
                    <h3>繝励Λ繝ｳ縺後≠繧翫∪縺帙ｓ</h3>
                    <p>逶ｮ讓吶・繝ｼ繧ｸ縺ｧ繝励Λ繝ｳ繧剃ｽ懈・縺励※縺上□縺輔＞</p>
                </div>
            `;
            return;
        }

        container.innerHTML = plans.map(plan => this.createPlanCard(plan)).join('');
    }

    // 繝励Λ繝ｳ繧ｫ繝ｼ繝峨ｒ菴懈・
    createPlanCard(plan) {
        const progress = this.calculatePlanProgress(plan);
        const currentWeek = this.coachingPlanService.getCurrentWeekPlan(plan.id);

        return `
            <div class="plan-card" data-plan-id="${plan.id}">
                <div class="plan-card-header">
                    <h3 class="plan-title">${plan.goalTitle}</h3>
                    <span class="plan-status ${plan.status}">${this.getStatusLabel(plan.status)}</span>
                </div>

                <div class="plan-info">
                    <div class="plan-stat">
                        <span class="plan-stat-value">${plan.weeks.length}</span>
                        <span class="plan-stat-label">騾ｱ</span>
                    </div>
                    <div class="plan-stat">
                        <span class="plan-stat-value">${currentWeek?.weekNumber || 1}</span>
                        <span class="plan-stat-label">迴ｾ蝨ｨ騾ｱ</span>
                    </div>
                    <div class="plan-stat">
                        <span class="plan-stat-value">${progress}%</span>
                        <span class="plan-stat-label">騾ｲ謐・/span>
                    </div>
                </div>

                <div class="plan-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${progress}%"></div>
                    </div>
                </div>

                <div class="plan-actions">
                    <button class="btn-primary btn-sm" onclick="app.viewPlanDetails('${plan.id}')">隧ｳ邏ｰ陦ｨ遉ｺ</button>
                    ${plan.status === 'active' ?
                        `<button class="btn-secondary btn-sm" onclick="app.pausePlan('${plan.id}')">荳譎ょ●豁｢</button>` :
                        plan.status === 'paused' ?
                        `<button class="btn-accent btn-sm" onclick="app.resumePlan('${plan.id}')">蜀埼幕</button>` :
                        ''
                    }
                    ${plan.status !== 'completed' ?
                        `<button class="btn-secondary btn-sm" onclick="app.editPlan('${plan.id}')">邱ｨ髮・/button>` : ''
                    }
                </div>
            </div>
        `;
    }

    // 莉企ｱ縺ｮ隧ｳ邏ｰ繧定｡ｨ遉ｺ
    displayCurrentWeek(plan) {
        const currentWeek = this.coachingPlanService.getCurrentWeekPlan(plan.id);
        const card = document.getElementById('current-week-card');
        const content = document.getElementById('current-week-content');

        if (!currentWeek || !card || !content) {
            if (card) card.style.display = 'none';
            return;
        }

        card.style.display = 'block';

        const dayNames = ['譛・, '轣ｫ', '豌ｴ', '譛ｨ', '驥・, '蝨・, '譌･'];

        content.innerHTML = `
            <div class="week-focus">
                隨ｬ${currentWeek.weekNumber}騾ｱ: ${currentWeek.focus}
            </div>

            <div class="week-objectives">
                <h4>莉企ｱ縺ｮ逶ｮ讓・/h4>
                <ul class="objectives-list">
                    ${(currentWeek.objectives || []).map(obj => `<li>${obj}</li>`).join('')}
                </ul>
            </div>


            <div class="week-objectives">
                <h4>驕疲・謖・ｨ・/h4>
                <ul class="objectives-list">
                    ${(currentWeek.milestones || []).map(milestone => `<li>${milestone}</li>`).join('')}
                </ul>
            </div>
        `;
    }

    // 繝励Λ繝ｳ縺ｮ騾ｲ謐励ｒ險育ｮ・    calculatePlanProgress(plan) {
        const currentWeek = this.coachingPlanService.getCurrentWeekPlan(plan.id);
        if (!currentWeek) return 0;

        const totalWeeks = plan.weeks.length;
        const currentWeekNumber = currentWeek.weekNumber;

        return Math.round((currentWeekNumber / totalWeeks) * 100);
    }

    // 繧ｹ繝・・繧ｿ繧ｹ繝ｩ繝吶Ν繧貞叙蠕・    getStatusLabel(status) {
        const labels = {
            'active': '繧｢繧ｯ繝・ぅ繝・,
            'completed': '螳御ｺ・,
            'paused': '荳譎ょ●豁｢',
            'draft': '荳区嶌縺・
        };
        return labels[status] || status;
    }

    // 繝励Λ繝ｳ繧偵ヵ繧｣繝ｫ繧ｿ繝ｼ
    filterPlans(status) {
        const allPlans = this.coachingPlanService.getAllPlans();
        const filteredPlans = status === 'all' ? allPlans : allPlans.filter(plan => plan.status === status);
        this.displayAllPlans(filteredPlans);
    }

    // 繝励Λ繝ｳ隧ｳ邏ｰ繧定｡ｨ遉ｺ
    viewPlanDetails(planId) {
        const plan = this.coachingPlanService.getPlan(planId);
        if (!plan) {
            this.showToast('繝励Λ繝ｳ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ', 'error');
            return;
        }

        this.currentDetailPlanId = planId;
        this.displayPlanDetailModal(plan);
        this.showPlanDetailModal();
    }

    // 繝励Λ繝ｳ隧ｳ邏ｰ繝｢繝ｼ繝繝ｫ繧定｡ｨ遉ｺ
    showPlanDetailModal() {
        const modal = document.getElementById('plan-detail-modal');
        if (modal) {
            modal.classList.remove('hidden');
        }
    }

    // 繝励Λ繝ｳ隧ｳ邏ｰ繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
    closePlanDetailModal() {
        const modal = document.getElementById('plan-detail-modal');
        if (modal) {
            modal.classList.add('hidden');
        }
        this.currentDetailPlanId = null;
    }

    // 繝励Λ繝ｳ隧ｳ邏ｰ繝・・繧ｿ繧定｡ｨ遉ｺ
    displayPlanDetailModal(plan) {
        // 繝励Λ繝ｳ蝓ｺ譛ｬ諠・ｱ
        document.getElementById('detail-goal-title').textContent = plan.goalTitle;
        document.getElementById('detail-plan-status').textContent = this.getStatusLabel(plan.status);
        document.getElementById('detail-total-weeks').textContent = `${plan.weeks.length}騾ｱ`;

        // 騾ｲ謐苓ｨ育ｮ励→陦ｨ遉ｺ
        const progress = this.calculatePlanProgress(plan);
        document.getElementById('detail-progress').textContent = `${progress}%`;
        document.getElementById('detail-progress-bar').style.width = `${progress}%`;

        // 迴ｾ蝨ｨ騾ｱ縺ｮ隧ｳ邏ｰ陦ｨ遉ｺ
        this.displayCurrentWeekDetail(plan);

        // 騾ｱ蛻･繧ｿ繧､繝繝ｩ繧､繝ｳ陦ｨ遉ｺ
        this.displayWeeksTimeline(plan);

        // 繧｢繧ｯ繧ｷ繝ｧ繝ｳ繝懊ち繝ｳ縺ｮ迥ｶ諷区峩譁ｰ
        this.updatePlanDetailActions(plan);
    }

    // 迴ｾ蝨ｨ騾ｱ縺ｮ隧ｳ邏ｰ繧定｡ｨ遉ｺ
    displayCurrentWeekDetail(plan) {
        const currentWeek = this.coachingPlanService.getCurrentWeekPlan(plan.id);
        const container = document.getElementById('detail-current-week');

        if (!currentWeek) {
            container.innerHTML = `
                <div class="empty-state">
                    <p>迴ｾ蝨ｨ繧｢繧ｯ繝・ぅ繝悶↑騾ｱ縺後≠繧翫∪縺帙ｓ</p>
                </div>
            `;
            return;
        }

        container.innerHTML = `
            <div class="week-header">
                <div class="week-title">隨ｬ${currentWeek.weekNumber}騾ｱ</div>
                <div class="week-period">${currentWeek.startDate} ・・${currentWeek.endDate}</div>
                <div class="week-focus">${currentWeek.focus}</div>
            </div>
            <div class="week-content">
                <div class="objectives-section">
                    <h4>搭 莉企ｱ縺ｮ逶ｮ讓・/h4>
                    <ul class="objectives-list">
                        ${currentWeek.objectives.map(obj => `<li>${obj}</li>`).join('')}
                    </ul>
                </div>
                <div class="milestones-section">
                    <h4>識 驕疲・謖・ｨ・/h4>
                    <ul class="milestones-list">
                        ${currentWeek.milestones.map(milestone => `<li>${milestone}</li>`).join('')}
                    </ul>
                </div>
            </div>
        `;
    }

    // 騾ｱ蛻･繧ｿ繧､繝繝ｩ繧､繝ｳ陦ｨ遉ｺ
    displayWeeksTimeline(plan) {
        const container = document.getElementById('detail-weeks-timeline');
        const currentWeek = this.coachingPlanService.getCurrentWeekPlan(plan.id);
        const currentWeekNumber = currentWeek?.weekNumber || 1;

        container.innerHTML = plan.weeks.map(week => {
            const isCompleted = week.weekNumber < currentWeekNumber;
            const isCurrent = week.weekNumber === currentWeekNumber;
            const statusClass = isCompleted ? 'completed' : isCurrent ? 'current' : '';

            return `
                <div class="timeline-week ${statusClass}">
                    <div class="week-number">${week.weekNumber}</div>
                    <div class="week-info">
                        <div class="week-info-title">隨ｬ${week.weekNumber}騾ｱ: ${week.focus}</div>
                        <div class="week-info-focus">${week.objectives.join(', ')}</div>
                        <div class="week-info-period">${week.startDate} ・・${week.endDate}</div>
                    </div>
                </div>
            `;
        }).join('');
    }

    // 繝励Λ繝ｳ隧ｳ邏ｰ繧｢繧ｯ繧ｷ繝ｧ繝ｳ繝懊ち繝ｳ縺ｮ迥ｶ諷区峩譁ｰ
    updatePlanDetailActions(plan) {
        const editBtn = document.getElementById('detail-edit-plan-btn');
        const pauseBtn = document.getElementById('detail-pause-plan-btn');
        const resumeBtn = document.getElementById('detail-resume-plan-btn');
        const completeBtn = document.getElementById('detail-complete-plan-btn');

        // 繝懊ち繝ｳ縺ｮ陦ｨ遉ｺ/髱櫁｡ｨ遉ｺ繧貞宛蠕｡
        if (editBtn) editBtn.style.display = plan.status === 'completed' ? 'none' : 'inline-block';
        if (pauseBtn) pauseBtn.style.display = plan.status === 'active' ? 'inline-block' : 'none';
        if (resumeBtn) resumeBtn.style.display = plan.status === 'paused' ? 'inline-block' : 'none';
        if (completeBtn) completeBtn.style.display = plan.status === 'completed' ? 'none' : 'inline-block';
    }

    // 隧ｳ邏ｰ繝｢繝ｼ繝繝ｫ縺九ｉ繝励Λ繝ｳ邱ｨ髮・    editPlanFromDetail() {
        if (this.currentDetailPlanId) {
            this.closePlanDetailModal();
            this.editPlan(this.currentDetailPlanId);
        }
    }

    // 隧ｳ邏ｰ繝｢繝ｼ繝繝ｫ縺九ｉ繝励Λ繝ｳ荳譎ょ●豁｢
    pausePlanFromDetail() {
        if (this.currentDetailPlanId) {
            this.pausePlan(this.currentDetailPlanId);
            // 繝｢繝ｼ繝繝ｫ繧呈峩譁ｰ
            const plan = this.coachingPlanService.getPlan(this.currentDetailPlanId);
            if (plan) {
                this.displayPlanDetailModal(plan);
            }
        }
    }

    // 隧ｳ邏ｰ繝｢繝ｼ繝繝ｫ縺九ｉ繝励Λ繝ｳ蜀埼幕
    resumePlanFromDetail() {
        if (this.currentDetailPlanId) {
            this.resumePlan(this.currentDetailPlanId);
            // 繝｢繝ｼ繝繝ｫ繧呈峩譁ｰ
            const plan = this.coachingPlanService.getPlan(this.currentDetailPlanId);
            if (plan) {
                this.displayPlanDetailModal(plan);
            }
        }
    }

    // 隧ｳ邏ｰ繝｢繝ｼ繝繝ｫ縺九ｉ繝励Λ繝ｳ螳御ｺ・    completePlanFromDetail() {
        if (this.currentDetailPlanId) {
            if (this.coachingPlanService.updatePlanStatus(this.currentDetailPlanId, 'completed')) {
                this.showToast('繝励Λ繝ｳ繧貞ｮ御ｺ・＠縺ｾ縺励◆脂', 'success');
                this.loadCoachingPlans();
                // 繝｢繝ｼ繝繝ｫ繧呈峩譁ｰ
                const plan = this.coachingPlanService.getPlan(this.currentDetailPlanId);
                if (plan) {
                    this.displayPlanDetailModal(plan);
                }
            }
        }
    }

    // 繝励Λ繝ｳ繧剃ｸ譎ょ●豁｢
    pausePlan(planId) {
        if (this.coachingPlanService.updatePlanStatus(planId, 'paused')) {
            this.showToast('繝励Λ繝ｳ繧剃ｸ譎ょ●豁｢縺励∪縺励◆', 'success');
            this.loadCoachingPlans();
        }
    }

    // 繝励Λ繝ｳ繧貞・髢・    resumePlan(planId) {
        if (this.coachingPlanService.updatePlanStatus(planId, 'active')) {
            this.showToast('繝励Λ繝ｳ繧貞・髢九＠縺ｾ縺励◆', 'success');
            this.loadCoachingPlans();
        }
    }

    // 繝励Λ繝ｳ繧堤ｷｨ髮・    editPlan(planId) {
        // 繝励Λ繝ｳ邱ｨ髮・ｩ溯・・井ｻ雁ｾ悟ｮ溯｣・ｼ・        this.showToast('繝励Λ繝ｳ邱ｨ髮・ｩ溯・縺ｯ莉雁ｾ悟ｮ溯｣・ｺ亥ｮ壹〒縺・, 'info');
    }

    // ==========================================
    // Gallery Functions
    // ==========================================

    loadGalleryMatches(filters = {}) {
        // sf6_gallery縺ｨrecentMatches縺ｮ荳｡譁ｹ縺九ｉ繝・・繧ｿ繧貞叙蠕励＠縺ｦ繝槭・繧ｸ
        const sf6Gallery = JSON.parse(localStorage.getItem('sf6_gallery') || '[]');
        const recentMatches = JSON.parse(localStorage.getItem('recentMatches') || '[]');
        
        // 荳｡譁ｹ縺ｮ繝・・繧ｿ繧偵・繝ｼ繧ｸ・磯㍾隍・ｒ驕ｿ縺代ｋ・・        const matchesMap = new Map();
        [...sf6Gallery, ...recentMatches].forEach(match => {
            if (match.id) {
                matchesMap.set(match.id, match);
            }
        });
        
        const matches = Array.from(matchesMap.values());
        const galleryGrid = document.getElementById('gallery-grid');
        
        if (!galleryGrid) return;

        // 繝輔ぅ繝ｫ繧ｿ繝ｼ繧帝←逕ｨ
        let filteredMatches = matches;

        if (filters.opponent) {
            filteredMatches = filteredMatches.filter(m => 
                m.opponentCharacter === filters.opponent
            );
        }

        if (filters.result) {
            filteredMatches = filteredMatches.filter(m => 
                m.result === filters.result
            );
        }

        if (filters.tag) {
            filteredMatches = filteredMatches.filter(m => {
                const tags = m.insightTags || [];
                return tags.some(tag => 
                    tag.toLowerCase().includes(filters.tag.toLowerCase())
                );
            });
        }

        // 陦ｨ遉ｺ
        if (filteredMatches.length === 0) {
            galleryGrid.innerHTML = `
                <div class="no-matches-gallery">
                    <h3>隧ｦ蜷医ョ繝ｼ繧ｿ縺後≠繧翫∪縺帙ｓ</h3>
                    <p>蛻・梵繝壹・繧ｸ縺九ｉ隧ｦ蜷医ｒ險倬鹸縺励※縺ｿ縺ｾ縺励ｇ縺・/p>
                </div>
            `;
            return;
        }

        galleryGrid.innerHTML = filteredMatches.map(match => this.createMatchCard(match)).join('');

        // 繧ｫ繝ｼ繝峨け繝ｪ繝・け繧､繝吶Φ繝医ｒ險ｭ螳・        document.querySelectorAll('.match-card').forEach(card => {
            card.addEventListener('click', (e) => {
                // 驕ｸ謚槭Δ繝ｼ繝我ｸｭ縺ｯ繝｢繝ｼ繝繝ｫ繧帝幕縺九↑縺・                if (this.selectionMode) {
                    return;
                }
                
                // 繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ縺ｮ繧ｯ繝ｪ繝・け縺ｯ辟｡隕・                if (e.target.type === 'checkbox' || e.target.closest('.match-checkbox')) {
                    return;
                }
                
                // ID縺ｯ譁・ｭ怜・縺ｨ縺励※謇ｱ縺・ｼ医ヰ繝・メ蜈･蜉帙・ID繧ょｯｾ蠢懶ｼ・                const matchId = card.dataset.matchId;
                this.showMatchDetail(matchId);
            });
        });
    }

    createMatchCard(match) {
        const isWin = match.result === 'WIN';
        const resultClass = isWin ? 'win' : 'loss';
        const tags = match.insightTags || [];
        const feelings = match.feelings || '';

        // 繧ｭ繝｣繝ｩ繧ｯ繧ｿ繝ｼ繧｢繧､繧ｳ繝ｳ繧貞叙蠕暦ｼ育ｰ｡譏灘ｮ溯｣・ｼ・        const getCharIcon = (charName) => {
            const icons = {
                'Luke': '相', 'Ryu': '･・, 'Ken': '櫨', 'Chun-Li': '暢',
                'Cammy': '笞｡', 'Zangief': '潮', 'JP': '鹿', 'Juri': '早・・
            };
            return icons[charName] || '･・;
        };

        return `
            <div class="match-card ${resultClass}-card" data-match-id="${match.id}">
                <div class="match-card-header">
                    <span class="match-result-badge ${resultClass}">${isWin ? 'WIN' : 'LOSS'}</span>
                    <span class="match-date">${match.date || '譌･莉倅ｸ肴・'}</span>
                </div>

                <div class="character-matchup">
                    <div class="character-box">
                        <div class="character-icon">${getCharIcon(match.playerCharacter)}</div>
                        <div class="character-name">${match.playerCharacter || 'Unknown'}</div>
                    </div>
                    <div class="vs-divider">VS</div>
                    <div class="character-box">
                        <div class="character-icon">${getCharIcon(match.opponentCharacter)}</div>
                        <div class="character-name">${match.opponentCharacter || 'Unknown'}</div>
                    </div>
                </div>

                <div class="match-info">
                    <div class="info-row">
                        <span class="info-label">繝ｩ繧ｦ繝ｳ繝・/span>
                        <span class="info-value">${match.roundsWon || 0}-${match.roundsLost || 0}</span>
                    </div>
                    ${match.decision ? `
                    <div class="info-row">
                        <span class="info-label">豎ｺ逹譁ｹ豕・/span>
                        <span class="info-value">${this.getDecisionLabel(match.decision)}</span>
                    </div>
                    ` : ''}
                </div>

                ${tags.length > 0 ? `
                <div class="match-tags">
                    ${tags.slice(0, 3).map(tag => `<span class="match-tag">${tag}</span>`).join('')}
                    ${tags.length > 3 ? `<span class="match-tag">+${tags.length - 3}</span>` : ''}
                </div>
                ` : ''}
            </div>
        `;
    }

    getDecisionLabel(decision) {
        const labels = {
            'ko': 'KO',
            'timeout': '繧ｿ繧､繝繧｢繝・・',
            'perfect': '繝代・繝輔ぉ繧ｯ繝・,
            'super': '繧ｹ繝ｼ繝代・繧｢繝ｼ繝・,
            'critical': '繧ｯ繝ｪ繝・ぅ繧ｫ繝ｫ繧｢繝ｼ繝・,
            'drive-impact': '繝峨Λ繧､繝悶う繝ｳ繝代け繝・
        };
        return labels[decision] || decision;
    }

    showMatchDetail(matchId) {
        // sf6_gallery縺ｨrecentMatches縺ｮ荳｡譁ｹ縺九ｉ讀懃ｴ｢
        const sf6Gallery = JSON.parse(localStorage.getItem('sf6_gallery') || '[]');
        const recentMatches = JSON.parse(localStorage.getItem('recentMatches') || '[]');
        const allMatches = [...sf6Gallery, ...recentMatches];
        
        // ID縺ｯ譁・ｭ怜・縺ｨ縺励※豈碑ｼ・ｼ医ヰ繝・メ蜈･蜉帙・ID繧ょｯｾ蠢懶ｼ・        const match = allMatches.find(m => String(m.id) === String(matchId));

        if (!match) {
            console.error('隧ｦ蜷医′隕九▽縺九ｊ縺ｾ縺帙ｓ縲・D:', matchId, '繧ｿ繧､繝・', typeof matchId);
            this.showToast('隧ｦ蜷医ョ繝ｼ繧ｿ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ', 'error');
            return;
        }

        const modal = document.getElementById('match-detail-modal');
        const body = document.getElementById('match-detail-body');

        if (!modal || !body) return;

        const isWin = match.result === 'WIN';
        const tags = match.insightTags || [];
        const feelings = match.feelings || '';

        body.innerHTML = `
            <div class="detail-section">
                <h3>隧ｦ蜷育ｵ先棡</h3>
                <div class="detail-grid">
                    <div class="detail-item">
                        <div class="detail-label">邨先棡</div>
                        <div class="detail-value">
                            <span class="match-result-badge ${isWin ? 'win' : 'loss'}">${isWin ? 'WIN' : 'LOSS'}</span>
                        </div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">隧ｦ蜷域律</div>
                        <div class="detail-value">${match.date || '譌･莉倅ｸ肴・'}</div>
                    </div>
                </div>
            </div>

            <div class="detail-section">
                <h3>蟇ｾ謌ｦ諠・ｱ</h3>
                <div class="detail-grid">
                    <div class="detail-item">
                        <div class="detail-label">閾ｪ蛻・/div>
                        <div class="detail-value">${match.playerCharacter || 'Unknown'}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">逶ｸ謇・/div>
                        <div class="detail-value">${match.opponentCharacter || 'Unknown'}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">繝ｩ繧ｦ繝ｳ繝・/div>
                        <div class="detail-value">${match.roundsWon || 0}-${match.roundsLost || 0}</div>
                    </div>
                    ${match.decision ? `
                    <div class="detail-item">
                        <div class="detail-label">豎ｺ逹譁ｹ豕・/div>
                        <div class="detail-value">${this.getDecisionLabel(match.decision)}</div>
                    </div>
                    ` : ''}
                </div>
            </div>

            ${tags.length > 0 ? `
            <div class="detail-section">
                <h3>豌励▼縺阪ち繧ｰ</h3>
                <div class="match-tags">
                    ${tags.map(tag => `<span class="match-tag">${tag}</span>`).join('')}
                </div>
            </div>
            ` : ''}

            ${feelings ? `
            <div class="detail-section">
                <h3>隧ｦ蜷医・豌励▼縺・/h3>
                <div class="memo-box">${feelings}</div>
            </div>
            ` : ''}
        `;

        // 邱ｨ髮・・蜑企勁繝懊ち繝ｳ縺ｫ繧､繝吶Φ繝医ｒ險ｭ螳・        const editBtn = document.getElementById('edit-match-btn');
        const deleteBtn = document.getElementById('delete-match-btn');

        if (editBtn) {
            editBtn.onclick = () => this.editMatch(matchId);
        }

        if (deleteBtn) {
            deleteBtn.onclick = () => this.deleteMatch(matchId);
        }

        modal.classList.remove('hidden');
    }

    closeMatchDetailModal() {
        const modal = document.getElementById('match-detail-modal');
        if (modal) {
            modal.classList.add('hidden');
        }
    }

    editMatch(matchId) {
        this.showToast('邱ｨ髮・ｩ溯・縺ｯ莉雁ｾ悟ｮ溯｣・ｺ亥ｮ壹〒縺・, 'info');
        // TODO: 邱ｨ髮・Δ繝ｼ繝繝ｫ繧定｡ｨ遉ｺ縺励※縲∬ｩｦ蜷医ョ繝ｼ繧ｿ繧堤ｷｨ髮・〒縺阪ｋ繧医≧縺ｫ縺吶ｋ
    }

    deleteMatch(matchId) {
        if (!confirm('縺薙・隧ｦ蜷医ョ繝ｼ繧ｿ繧貞炎髯､縺励※繧ゅｈ繧阪＠縺・〒縺吶°・・)) {
            return;
        }

        // sf6_gallery縺ｨrecentMatches縺ｮ荳｡譁ｹ縺九ｉ蜑企勁
        const sf6Gallery = JSON.parse(localStorage.getItem('sf6_gallery') || '[]');
        const recentMatches = JSON.parse(localStorage.getItem('recentMatches') || '[]');
        
        // ID繧呈枚蟄怜・縺ｨ縺励※豈碑ｼ・        const filteredSf6 = sf6Gallery.filter(m => String(m.id) !== String(matchId));
        const filteredRecent = recentMatches.filter(m => String(m.id) !== String(matchId));

        localStorage.setItem('sf6_gallery', JSON.stringify(filteredSf6));
        localStorage.setItem('recentMatches', JSON.stringify(filteredRecent));

        this.showToast('隧ｦ蜷医ョ繝ｼ繧ｿ繧貞炎髯､縺励∪縺励◆', 'success');
        this.closeMatchDetailModal();
        this.loadGalleryMatches();

        // 邨ｱ險医ｂ譖ｴ譁ｰ
        if (this.playerStatsManager) {
            this.playerStatsManager.loadStatsToUI();
        }
    }

    loadOpponentFilter() {
        const matches = JSON.parse(localStorage.getItem('recentMatches') || '[]');
        const opponents = [...new Set(matches.map(m => m.opponentCharacter).filter(Boolean))];

        const select = document.getElementById('filter-opponent');
        if (!select) return;

        // 譌｢蟄倥・繧ｪ繝励す繝ｧ繝ｳ繧偵け繝ｪ繧｢縺励※蜀咲函謌・        select.innerHTML = '<option value="">縺吶∋縺ｦ</option>';
        opponents.forEach(opponent => {
            const option = document.createElement('option');
            option.value = opponent;
            option.textContent = opponent;
            select.appendChild(option);
        });
    }

    setupGalleryFilters() {
        const applyBtn = document.getElementById('apply-filters');
        const clearBtn = document.getElementById('clear-filters');

        if (applyBtn) {
            applyBtn.addEventListener('click', () => {
                const filters = {
                    opponent: document.getElementById('filter-opponent')?.value || '',
                    result: document.getElementById('filter-result')?.value || '',
                    tag: document.getElementById('filter-tag')?.value || ''
                };

                this.loadGalleryMatches(filters);
            });
        }

        if (clearBtn) {
            clearBtn.addEventListener('click', () => {
                document.getElementById('filter-opponent').value = '';
                document.getElementById('filter-result').value = '';
                document.getElementById('filter-tag').value = '';
                this.loadGalleryMatches();
            });
        }
    }

    // 繧ｮ繝｣繝ｩ繝ｪ繝ｼ驕ｸ謚槭Δ繝ｼ繝峨・險ｭ螳・    setupGallerySelectionMode() {
        this.selectionMode = false;
        this.selectedMatches = new Set();
        this.lastSelectedIndex = -1; // SHIFT驕ｸ謚樒畑

        const toggleBtn = document.getElementById('toggle-selection-mode');
        const selectAllBtn = document.getElementById('select-all-btn');
        const deselectAllBtn = document.getElementById('deselect-all-btn');
        const deleteSelectedBtn = document.getElementById('delete-selected-btn');
        const cancelBtn = document.getElementById('cancel-selection-btn');

        if (toggleBtn) {
            toggleBtn.onclick = () => this.toggleSelectionMode();
        }

        if (selectAllBtn) {
            selectAllBtn.onclick = () => this.selectAllMatches();
        }

        if (deselectAllBtn) {
            deselectAllBtn.onclick = () => this.deselectAllMatches();
        }

        if (deleteSelectedBtn) {
            deleteSelectedBtn.onclick = () => this.deleteSelectedMatches();
        }

        if (cancelBtn) {
            cancelBtn.onclick = () => this.cancelSelectionMode();
        }
    }

    // 驕ｸ謚槭Δ繝ｼ繝峨・蛻・ｊ譖ｿ縺・    toggleSelectionMode() {
        this.selectionMode = !this.selectionMode;
        
        const selectionActions = document.getElementById('selection-actions');
        const galleryGrid = document.getElementById('gallery-grid');
        const toggleBtn = document.getElementById('toggle-selection-mode');

        if (this.selectionMode) {
            // 驕ｸ謚槭Δ繝ｼ繝画怏蜉ｹ蛹・            selectionActions?.classList.remove('hidden');
            galleryGrid?.classList.add('selection-mode');
            if (toggleBtn) {
                toggleBtn.classList.add('active');
                toggleBtn.innerHTML = '<span class="icon">笨・/span> 繧ｭ繝｣繝ｳ繧ｻ繝ｫ';
            }

            // 蜷・き繝ｼ繝峨↓繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ繧定ｿｽ蜉
            this.addCheckboxesToCards();
        } else {
            // 驕ｸ謚槭Δ繝ｼ繝臥┌蜉ｹ蛹・            this.cancelSelectionMode();
        }
    }

    // 驕ｸ謚槭Δ繝ｼ繝峨ｒ繧ｭ繝｣繝ｳ繧ｻ繝ｫ
    cancelSelectionMode() {
        this.selectionMode = false;
        this.selectedMatches.clear();
        this.lastSelectedIndex = -1;

        const selectionActions = document.getElementById('selection-actions');
        const galleryGrid = document.getElementById('gallery-grid');
        const toggleBtn = document.getElementById('toggle-selection-mode');

        selectionActions?.classList.add('hidden');
        galleryGrid?.classList.remove('selection-mode');
        
        if (toggleBtn) {
            toggleBtn.classList.remove('active');
            toggleBtn.innerHTML = '<span class="icon">笨・/span> 蜑企勁';
        }

        // 繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ繧貞炎髯､
        document.querySelectorAll('.match-checkbox').forEach(cb => cb.remove());
        this.updateSelectionCount();
    }

    // 繧ｫ繝ｼ繝峨↓繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ繧定ｿｽ蜉
    addCheckboxesToCards() {
        const cards = document.querySelectorAll('.match-card');
        cards.forEach((card, index) => {
            // 譌｢蟄倥・繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ縺後≠繧後・蜑企勁
            const existingCheckbox = card.querySelector('.match-checkbox');
            if (existingCheckbox) {
                existingCheckbox.remove();
            }

            // 譁ｰ縺励＞繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ繧定ｿｽ蜉
            const checkbox = document.createElement('div');
            checkbox.className = 'match-checkbox';
            const input = document.createElement('input');
            input.type = 'checkbox';
            input.className = 'match-select-input';
            checkbox.appendChild(input);
            
            const matchId = card.dataset.matchId;

            // 繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ蜈ｨ菴薙・繧ｯ繝ｪ繝・け繧､繝吶Φ繝医〒SHIFT繧ｭ繝ｼ繧呈､懃衍
            checkbox.addEventListener('click', (e) => {
                e.stopPropagation();
                // 繧ｯ繝ｪ繝・け蠕後∝ｰ代＠蠕・▲縺ｦ縺九ｉ迥ｶ諷九ｒ遒ｺ隱搾ｼ医メ繧ｧ繝・け繝懊ャ繧ｯ繧ｹ縺ｮ迥ｶ諷区峩譁ｰ繧貞ｾ・▽・・                setTimeout(() => {
                    this.handleCheckboxChange(matchId, index, e.shiftKey);
                }, 0);
            });

            card.insertBefore(checkbox, card.firstChild);
            card.style.cursor = 'pointer';
        });
    }

    // 繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ螟画峩繝上Φ繝峨Λ繝ｼ
    handleCheckboxChange(matchId, currentIndex, shiftKey) {
        const checkbox = document.querySelector(`.match-card[data-match-id="${matchId}"] input`);
        
        if (!checkbox) {
            console.error('繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ:', matchId);
            return;
        }
        
        // ID繧呈枚蟄怜・縺ｨ縺励※豁｣隕丞喧
        const normalizedId = String(matchId);
        const isChecked = checkbox.checked;
        
        console.log('handleCheckboxChange:', {
            matchId: normalizedId,
            isChecked: isChecked,
            shiftKey: shiftKey,
            lastSelectedIndex: this.lastSelectedIndex,
            currentIndex: currentIndex
        });
        
        if (shiftKey && this.lastSelectedIndex !== -1 && this.lastSelectedIndex !== currentIndex) {
            // SHIFT+繧ｯ繝ｪ繝・け縺ｧ遽・峇驕ｸ謚・            console.log('識 SHIFT遽・峇驕ｸ謚槭ｒ螳溯｡・);
            this.selectRange(this.lastSelectedIndex, currentIndex, isChecked);
            // 遽・峇驕ｸ謚槭・蝣ｴ蜷医「pdateSelectionCount縺ｯselectRange蜀・〒蜻ｼ縺ｰ繧後ｋ
        } else {
            // 騾壼ｸｸ縺ｮ驕ｸ謚・            if (isChecked) {
                this.selectedMatches.add(normalizedId);
                console.log('笨・Selected:', normalizedId, 'Total:', this.selectedMatches.size);
            } else {
                this.selectedMatches.delete(normalizedId);
                console.log('笨・Deselected:', normalizedId, 'Total:', this.selectedMatches.size);
            }
            this.updateSelectionCount();
        }

        // 譛蠕後↓驕ｸ謚槭＠縺溘う繝ｳ繝・ャ繧ｯ繧ｹ繧呈峩譁ｰ
        this.lastSelectedIndex = currentIndex;
    }

    // 遽・峇驕ｸ謚・    selectRange(startIndex, endIndex, checked) {
        const [start, end] = startIndex < endIndex 
            ? [startIndex, endIndex] 
            : [endIndex, startIndex];

        console.log('遽・峇驕ｸ謚・', {
            start: start,
            end: end,
            checked: checked,
            range: end - start + 1
        });

        const cards = document.querySelectorAll('.match-card');
        let selectedCount = 0;
        
        for (let i = start; i <= end; i++) {
            if (cards[i]) {
                const input = cards[i].querySelector('input');
                const matchId = String(cards[i].dataset.matchId); // 譁・ｭ怜・縺ｨ縺励※豁｣隕丞喧
                
                if (input) {
                    input.checked = checked;
                    if (checked) {
                        this.selectedMatches.add(matchId);
                        selectedCount++;
                    } else {
                        this.selectedMatches.delete(matchId);
                    }
                }
            }
        }
        
        console.log(`遽・峇驕ｸ謚槫ｮ御ｺ・ ${selectedCount}莉ｶ繧・{checked ? '驕ｸ謚・ : '隗｣髯､'}`);
        this.updateSelectionCount();
    }

    // 縺吶∋縺ｦ驕ｸ謚・    selectAllMatches() {
        const cards = document.querySelectorAll('.match-card');
        cards.forEach(card => {
            const input = card.querySelector('input');
            const matchId = String(card.dataset.matchId); // 譁・ｭ怜・縺ｨ縺励※豁｣隕丞喧
            
            if (input) {
                input.checked = true;
                this.selectedMatches.add(matchId);
            }
        });

        console.log('Selected all:', this.selectedMatches.size, 'matches');
        this.updateSelectionCount();
    }

    // 縺吶∋縺ｦ驕ｸ謚櫁ｧ｣髯､
    deselectAllMatches() {
        const cards = document.querySelectorAll('.match-card');
        cards.forEach(card => {
            const input = card.querySelector('input');
            if (input) {
                input.checked = false;
            }
        });

        this.selectedMatches.clear();
        this.updateSelectionCount();
    }

    // 驕ｸ謚樊焚縺ｮ譖ｴ譁ｰ
    updateSelectionCount() {
        const countEl = document.getElementById('selection-count');
        const deleteBtn = document.getElementById('delete-selected-btn');

        if (countEl) {
            countEl.textContent = `${this.selectedMatches.size}莉ｶ驕ｸ謚樔ｸｭ`;
        }

        if (deleteBtn) {
            deleteBtn.disabled = this.selectedMatches.size === 0;
        }
    }

    // 驕ｸ謚槭＆繧後◆隧ｦ蜷医ｒ蜑企勁
    deleteSelectedMatches() {
        if (this.selectedMatches.size === 0) {
            this.showToast('蜑企勁縺吶ｋ隧ｦ蜷医ｒ驕ｸ謚槭＠縺ｦ縺上□縺輔＞', 'warning');
            return;
        }

        const count = this.selectedMatches.size;
        const message = `驕ｸ謚槭＠縺・{count}隧ｦ蜷医ｒ蜑企勁縺励※繧ゅｈ繧阪＠縺・〒縺吶°・歃n\n縺薙・謫堺ｽ懊・蜿悶ｊ豸医○縺ｾ縺帙ｓ縲Ａ;

        if (!confirm(message)) {
            return;
        }

        // sf6_gallery縺ｨrecentMatches縺ｮ荳｡譁ｹ縺九ｉ蜑企勁
        const sf6Gallery = JSON.parse(localStorage.getItem('sf6_gallery') || '[]');
        const recentMatches = JSON.parse(localStorage.getItem('recentMatches') || '[]');

        console.log('蜑企勁蜑阪・繝・・繧ｿ謨ｰ:', {
            sf6Gallery: sf6Gallery.length,
            recentMatches: recentMatches.length,
            selected: Array.from(this.selectedMatches)
        });

        // ID縺ｮ蝙九↓髢｢菫ゅ↑縺丞炎髯､縺ｧ縺阪ｋ繧医≧縺ｫ縲∽ｸ｡譁ｹ縺ｮ蠖｢蠑上〒豈碑ｼ・        const selectedIds = Array.from(this.selectedMatches);
        const filteredSf6 = sf6Gallery.filter(m => {
            const matchId = String(m.id);
            const shouldKeep = !selectedIds.some(id => String(id) === matchId);
            if (!shouldKeep) {
                console.log('sf6_gallery縺九ｉ蜑企勁:', matchId);
            }
            return shouldKeep;
        });
        const filteredRecent = recentMatches.filter(m => {
            const matchId = String(m.id);
            const shouldKeep = !selectedIds.some(id => String(id) === matchId);
            if (!shouldKeep) {
                console.log('recentMatches縺九ｉ蜑企勁:', matchId);
            }
            return shouldKeep;
        });

        console.log('蜑企勁蠕後・繝・・繧ｿ謨ｰ:', {
            sf6Gallery: filteredSf6.length,
            recentMatches: filteredRecent.length,
            deleted: sf6Gallery.length - filteredSf6.length + recentMatches.length - filteredRecent.length
        });

        localStorage.setItem('sf6_gallery', JSON.stringify(filteredSf6));
        localStorage.setItem('recentMatches', JSON.stringify(filteredRecent));

        this.showToast(`${count}隧ｦ蜷医・繝・・繧ｿ繧貞炎髯､縺励∪縺励◆`, 'success');

        // 驕ｸ謚槭ｒ繧ｯ繝ｪ繧｢
        this.selectedMatches.clear();
        this.cancelSelectionMode();

        // 繧ｮ繝｣繝ｩ繝ｪ繝ｼ繧貞・隱ｭ縺ｿ霎ｼ縺ｿ
        this.loadGalleryMatches();

        // 繝繝・す繝･繝懊・繝峨・邨ｱ險医ｂ譖ｴ譁ｰ
        this.loadDashboard();
    }

    // ========== 騾｣蜍晁ｨ倬鹸讖溯・ ==========

    // 騾｣蜍晁ｨ倬鹸縺ｮ蛻晄悄蛹・    initWinStreak() {
        const currentStreak = this.getWinStreak();
        this.updateWinStreakDisplay(currentStreak);
        console.log('騾｣蜍晁ｨ倬鹸繧貞・譛溷喧縺励∪縺励◆:', currentStreak);
    }

    // 騾｣蜍晁ｨ倬鹸繧貞叙蠕・    getWinStreak() {
        const streak = localStorage.getItem('winStreak');
        return streak ? parseInt(streak) : 0;
    }

    // 騾｣蜍晁ｨ倬鹸繧剃ｿ晏ｭ・    saveWinStreak(streak) {
        localStorage.setItem('winStreak', streak.toString());
    }

    // 騾｣蜍晁ｨ倬鹸繧呈峩譁ｰ・郁ｩｦ蜷育ｵ先棡縺ｫ蠢懊§縺ｦ・・    updateWinStreak(result) {
        const currentStreak = this.getWinStreak();
        let newStreak = currentStreak;

        switch (result.toUpperCase()) {
            case 'WIN':
                newStreak = currentStreak + 1;
                console.log(`櫨 蜍晏茜・・｣蜍晁ｨ倬鹸繧呈峩譁ｰ: ${currentStreak} 竊・${newStreak}`);
                if (newStreak > 1) {
                    this.showToast(`櫨 ${newStreak}騾｣蜍昜ｸｭ・～, 'success');
                }
                break;
            case 'LOSS':
                if (currentStreak > 0) {
                    console.log(`个 謨怜圏... 騾｣蜍晁ｨ倬鹸縺後Μ繧ｻ繝・ヨ縺輔ｌ縺ｾ縺励◆ (${currentStreak}騾｣蜍・`);
                    this.showToast(`个 騾｣蜍晁ｨ倬鹸縺後Μ繧ｻ繝・ヨ縺輔ｌ縺ｾ縺励◆ (${currentStreak}騾｣蜍・`, 'info');
                }
                newStreak = 0;
                break;
            case 'DRAW':
                console.log(`､・蠑輔″蛻・￠縲る｣蜍晁ｨ倬鹸縺ｯ邯ｭ謖・ ${currentStreak}`);
                // 蠑輔″蛻・￠縺ｮ蝣ｴ蜷医・螟牙虚縺ｪ縺・                break;
            default:
                console.warn('荳肴・縺ｪ隧ｦ蜷育ｵ先棡:', result);
                break;
        }

        this.saveWinStreak(newStreak);
        this.updateWinStreakDisplay(newStreak);
    }

    // 騾｣蜍晁ｨ倬鹸繧偵Μ繧ｻ繝・ヨ
    resetWinStreak() {
        const currentStreak = this.getWinStreak();
        if (currentStreak > 0) {
            console.log(`騾｣蜍晁ｨ倬鹸繧偵Μ繧ｻ繝・ヨ: ${currentStreak} 竊・0`);
        }
        this.saveWinStreak(0);
        this.updateWinStreakDisplay(0);
    }

    // 騾｣蜍晁ｨ倬鹸縺ｮ陦ｨ遉ｺ繧呈峩譁ｰ
    updateWinStreakDisplay(streak) {
        const banner = document.getElementById('win-streak-banner');
        const streakValue = document.getElementById('current-win-streak');

        if (!banner || !streakValue) {
            console.warn('騾｣蜍昴ヰ繝翫・縺ｮ隕∫ｴ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ');
            return;
        }

        streakValue.textContent = streak.toString();
        banner.setAttribute('data-streak', streak.toString());

        // 騾｣蜍晄焚縺・縺ｮ蝣ｴ蜷医・髱櫁｡ｨ遉ｺ
        if (streak === 0) {
            banner.style.display = 'none';
        } else {
            banner.style.display = 'block';
        }
    }

}

// 繧｢繝励Μ縺ｮ襍ｷ蜍・const app = new App();

// Export for global access
window.app = app;
